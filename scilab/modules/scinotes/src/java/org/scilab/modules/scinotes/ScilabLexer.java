// DO NOT EDIT
// Generated by JFlex 1.9.1 http://jflex.de/
// source: modules/scinotes/src/java/jflex/scilab.jflex

//CHECKSTYLE:OFF

package org.scilab.modules.scinotes;

import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import javax.swing.text.BadLocationException;
import javax.swing.text.Element;
import org.scilab.modules.commons.ScilabCommonsUtils;

@javax.annotation.Generated("JFlex")


@SuppressWarnings("fallthrough")
public final class ScilabLexer extends ScilabLexerConstants {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;
  public static final int QSTRING = 2;
  public static final int COMMENT = 4;
  public static final int BLOCKCOMMENT = 6;
  public static final int FIELD = 8;
  public static final int COMMANDS = 10;
  public static final int COMMANDSWHITE = 12;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6, 6
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\37\u0100\1\u0200\267\u0100\10\u0300\u1020\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\3\1\4\1\5\22\0\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\3\26"+
    "\1\27\6\26\1\30\1\31\1\32\1\33\1\34\1\11"+
    "\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44"+
    "\1\45\1\46\1\47\1\50\1\51\1\52\1\53\1\54"+
    "\1\55\1\56\1\57\1\60\1\61\1\62\1\63\1\64"+
    "\1\56\1\65\1\66\1\67\1\70\1\17\1\71\1\72"+
    "\1\0\1\73\1\74\1\75\1\76\1\77\1\100\1\101"+
    "\1\102\1\103\1\104\1\105\1\106\1\107\1\110\1\111"+
    "\1\112\1\113\1\114\1\115\1\116\1\117\1\120\1\121"+
    "\1\122\1\123\1\124\1\67\1\125\1\17\1\126\6\0"+
    "\1\3\42\0\1\127\1\130\12\0\1\131\16\0\1\132"+
    "\u0164\0\2\3\326\0\u0100\3";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1024];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\7\0\1\1\1\2\1\3\1\4\1\5\1\6\1\4"+
    "\1\7\1\10\1\11\1\12\2\7\1\1\1\7\1\13"+
    "\1\7\1\14\1\6\2\7\3\4\1\7\16\4\1\7"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24"+
    "\26\22\1\25\1\26\1\27\1\25\1\30\1\31\1\32"+
    "\1\15\1\2\1\3\1\15\1\0\1\33\3\0\1\34"+
    "\1\4\2\34\2\4\2\7\1\33\1\0\1\7\1\6"+
    "\1\7\1\14\1\35\1\36\1\33\1\14\10\4\1\37"+
    "\5\4\1\40\10\4\1\7\2\0\1\41\52\0\1\42"+
    "\1\0\1\15\3\0\4\4\1\33\3\14\1\34\11\4"+
    "\1\43\12\4\1\33\1\41\1\44\51\0\7\4\1\45"+
    "\1\4\1\46\10\4\45\0\1\41\12\4\34\0\1\47"+
    "\4\0\3\4\1\45\2\4\40\0\3\4\40\0\1\50"+
    "\1\4\1\51\1\0\1\52\372\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[686];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\133\0\266\0\u0111\0\u016c\0\u01c7\0\u0222\0\u027d"+
    "\0\u02d8\0\u0333\0\u038e\0\u03e9\0\u038e\0\u0444\0\u049f\0\u03e9"+
    "\0\u027d\0\u027d\0\u04fa\0\u0555\0\u05b0\0\u060b\0\u0666\0\u06c1"+
    "\0\u071c\0\u05b0\0\u0777\0\u07d2\0\u082d\0\u0888\0\u08e3\0\u05b0"+
    "\0\u093e\0\u0999\0\u09f4\0\u0a4f\0\u0aaa\0\u0b05\0\u0b60\0\u0bbb"+
    "\0\u0c16\0\u0c71\0\u0ccc\0\u0d27\0\u0d82\0\u0ddd\0\u0e38\0\u0e93"+
    "\0\u027d\0\u027d\0\u027d\0\u0eee\0\u027d\0\u027d\0\u027d\0\u0f49"+
    "\0\u0fa4\0\u0fff\0\u105a\0\u10b5\0\u1110\0\u116b\0\u11c6\0\u1221"+
    "\0\u127c\0\u12d7\0\u1332\0\u138d\0\u13e8\0\u1443\0\u149e\0\u14f9"+
    "\0\u1554\0\u15af\0\u160a\0\u1665\0\u16c0\0\u027d\0\u027d\0\u171b"+
    "\0\u171b\0\u1776\0\u1776\0\u027d\0\u17d1\0\u027d\0\u027d\0\u182c"+
    "\0\u02d8\0\u1887\0\u18e2\0\u05b0\0\u193d\0\u038e\0\u1998\0\u19f3"+
    "\0\u1a4e\0\u1aa9\0\u1b04\0\u1b5f\0\u027d\0\u027d\0\u1bba\0\u1c15"+
    "\0\u1c70\0\u1ccb\0\u1d26\0\u1d81\0\u027d\0\u1ddc\0\u1e37\0\u1e92"+
    "\0\u1eed\0\u1f48\0\u1fa3\0\u1ffe\0\u2059\0\u20b4\0\u210f\0\u038e"+
    "\0\u216a\0\u21c5\0\u2220\0\u227b\0\u22d6\0\u038e\0\u2331\0\u238c"+
    "\0\u23e7\0\u2442\0\u249d\0\u24f8\0\u2553\0\u25ae\0\u2609\0\u0eee"+
    "\0\u0f49\0\u027d\0\u2664\0\u26bf\0\u0fff\0\u271a\0\u2775\0\u27d0"+
    "\0\u282b\0\u2886\0\u28e1\0\u293c\0\u2997\0\u29f2\0\u2a4d\0\u2aa8"+
    "\0\u2b03\0\u2b5e\0\u2bb9\0\u2c14\0\u2c6f\0\u2cca\0\u2d25\0\u2d80"+
    "\0\u2ddb\0\u2e36\0\u2e91\0\u2eec\0\u2f47\0\u2fa2\0\u2ffd\0\u3058"+
    "\0\u30b3\0\u310e\0\u3169\0\u31c4\0\u321f\0\u327a\0\u32d5\0\u3330"+
    "\0\u338b\0\u33e6\0\u3441\0\u16c0\0\u027d\0\u1776\0\u349c\0\u34f7"+
    "\0\u3552\0\u35ad\0\u3608\0\u3663\0\u36be\0\u3719\0\u1b5f\0\u3774"+
    "\0\u37cf\0\u382a\0\u3885\0\u38e0\0\u393b\0\u3996\0\u39f1\0\u3a4c"+
    "\0\u3aa7\0\u3b02\0\u3b5d\0\u3bb8\0\u3c13\0\u3c6e\0\u3cc9\0\u3d24"+
    "\0\u3d7f\0\u3dda\0\u3e35\0\u3e90\0\u3eeb\0\u3f46\0\u3fa1\0\u2609"+
    "\0\u0f49\0\u027d\0\u3ffc\0\u4057\0\u40b2\0\u410d\0\u4168\0\u41c3"+
    "\0\u421e\0\u4279\0\u42d4\0\u432f\0\u438a\0\u43e5\0\u4440\0\u449b"+
    "\0\u44f6\0\u4551\0\u45ac\0\u4607\0\u4662\0\u46bd\0\u4718\0\u4773"+
    "\0\u47ce\0\u4829\0\u4884\0\u48df\0\u493a\0\u4995\0\u49f0\0\u4a4b"+
    "\0\u4aa6\0\u4b01\0\u4b5c\0\u4bb7\0\u4c12\0\u4c6d\0\u4cc8\0\u4d23"+
    "\0\u4d7e\0\u4dd9\0\u4e34\0\u4e8f\0\u4eea\0\u4f45\0\u4fa0\0\u4ffb"+
    "\0\u5056\0\u50b1\0\u510c\0\u5167\0\u038e\0\u51c2\0\u521d\0\u5278"+
    "\0\u52d3\0\u532e\0\u5389\0\u53e4\0\u543f\0\u549a\0\u54f5\0\u5550"+
    "\0\u55ab\0\u5606\0\u5661\0\u56bc\0\u5717\0\u5772\0\u57cd\0\u5828"+
    "\0\u5883\0\u58de\0\u5939\0\u5994\0\u59ef\0\u5a4a\0\u5aa5\0\u5b00"+
    "\0\u5b5b\0\u5bb6\0\u5c11\0\u5c6c\0\u5cc7\0\u5d22\0\u5d7d\0\u5dd8"+
    "\0\u5e33\0\u5e8e\0\u5ee9\0\u5f44\0\u5f9f\0\u5ffa\0\u6055\0\u60b0"+
    "\0\u610b\0\u6166\0\u34f7\0\u61c1\0\u621c\0\u6277\0\u62d2\0\u632d"+
    "\0\u6388\0\u63e3\0\u643e\0\u6499\0\u64f4\0\u654f\0\u65aa\0\u6605"+
    "\0\u6660\0\u66bb\0\u6716\0\u6771\0\u67cc\0\u6827\0\u6882\0\u68dd"+
    "\0\u6938\0\u6993\0\u69ee\0\u6a49\0\u6aa4\0\u6aff\0\u6b5a\0\u6bb5"+
    "\0\u6c10\0\u6c6b\0\u6cc6\0\u6d21\0\u6d7c\0\u6dd7\0\u6e32\0\u6e8d"+
    "\0\u6ee8\0\u6f43\0\u6f9e\0\u6ff9\0\u7054\0\u70af\0\u710a\0\u7165"+
    "\0\u71c0\0\u038e\0\u721b\0\u7276\0\u72d1\0\u732c\0\u7387\0\u73e2"+
    "\0\u743d\0\u7498\0\u74f3\0\u754e\0\u75a9\0\u7604\0\u765f\0\u76ba"+
    "\0\u7715\0\u7770\0\u77cb\0\u7826\0\u7881\0\u78dc\0\u7937\0\u7992"+
    "\0\u79ed\0\u7a48\0\u7aa3\0\u7afe\0\u7b59\0\u7bb4\0\u7c0f\0\u7c6a"+
    "\0\u7cc5\0\u7d20\0\u7d7b\0\u7dd6\0\u7e31\0\u7e8c\0\u7ee7\0\u7f42"+
    "\0\u7f9d\0\u7ff8\0\u8053\0\u80ae\0\u8109\0\u8164\0\u81bf\0\u821a"+
    "\0\u8275\0\u82d0\0\u832b\0\u8386\0\u83e1\0\u843c\0\u8497\0\u84f2"+
    "\0\u854d\0\u85a8\0\u8603\0\u865e\0\u86b9\0\u8714\0\u876f\0\u87ca"+
    "\0\u8825\0\u8880\0\u88db\0\u8936\0\u8991\0\u89ec\0\u8a47\0\u7dd6"+
    "\0\u8aa2\0\u038e\0\u8afd\0\u027d\0\u8b58\0\u8bb3\0\u8c0e\0\u8c69"+
    "\0\u8cc4\0\u8d1f\0\u8d7a\0\u8dd5\0\u8e30\0\u8e8b\0\u8ee6\0\u8f41"+
    "\0\u8f9c\0\u8ff7\0\u9052\0\u90ad\0\u9108\0\u9163\0\u91be\0\u9219"+
    "\0\u9274\0\u92cf\0\u932a\0\u9385\0\u93e0\0\u943b\0\u9496\0\u94f1"+
    "\0\u954c\0\u95a7\0\u9602\0\u965d\0\u96b8\0\u9713\0\u976e\0\u97c9"+
    "\0\u9824\0\u987f\0\u98da\0\u9935\0\u9990\0\u99eb\0\u9a46\0\u9aa1"+
    "\0\u9afc\0\u9b57\0\u9bb2\0\u9c0d\0\u9c68\0\u9cc3\0\u9d1e\0\u9d79"+
    "\0\u9dd4\0\u9e2f\0\u9e8a\0\u9ee5\0\u9f40\0\u9f9b\0\u9ff6\0\ua051"+
    "\0\ua0ac\0\ua107\0\ua162\0\ua1bd\0\ua218\0\ua273\0\ua2ce\0\ua329"+
    "\0\ua384\0\ua3df\0\ua43a\0\ua495\0\ua4f0\0\ua54b\0\ua5a6\0\ua601"+
    "\0\ua65c\0\ua6b7\0\ua712\0\ua76d\0\ua7c8\0\ua823\0\ua87e\0\ua8d9"+
    "\0\ua934\0\ua98f\0\ua9ea\0\uaa45\0\uaaa0\0\uaafb\0\uab56\0\uabb1"+
    "\0\uac0c\0\uac67\0\uacc2\0\uad1d\0\uad78\0\uadd3\0\uae2e\0\uae89"+
    "\0\uaee4\0\uaf3f\0\uaf9a\0\uaff5\0\ub050\0\ub0ab\0\ub106\0\ub161"+
    "\0\ub1bc\0\ub217\0\ub272\0\ub2cd\0\ub328\0\ub383\0\ub3de\0\ub439"+
    "\0\ub494\0\ub4ef\0\ub54a\0\ub5a5\0\ub600\0\ub65b\0\ub6b6\0\ub711"+
    "\0\ub76c\0\ub7c7\0\ub822\0\ub87d\0\ub8d8\0\ub933\0\ub98e\0\ub9e9"+
    "\0\uba44\0\uba9f\0\ubafa\0\ubb55\0\ubbb0\0\ubc0b\0\ubc66\0\ubcc1"+
    "\0\ubd1c\0\ubd77\0\ubdd2\0\ube2d\0\ube88\0\ubee3\0\ubf3e\0\ubf99"+
    "\0\ubff4\0\uc04f\0\uc0aa\0\uc105\0\uc160\0\uc1bb\0\uc216\0\uc271"+
    "\0\uc2cc\0\uc327\0\uc382\0\uc3dd\0\uc438\0\uc493\0\uc4ee\0\uc549"+
    "\0\uc5a4\0\uc5ff\0\uc65a\0\uc6b5\0\uc710\0\uc76b\0\uc7c6\0\uc821"+
    "\0\uc87c\0\uc8d7\0\uc932\0\uc98d\0\uc9e8\0\uca43\0\uca9e\0\ucaf9"+
    "\0\ucb54\0\ucbaf\0\ucc0a\0\ucc65\0\uccc0\0\ucd1b\0\ucd76\0\ucdd1"+
    "\0\uce2c\0\uce87\0\ucee2\0\ucf3d\0\ucf98\0\ucff3\0\ud04e\0\ud0a9"+
    "\0\ud104\0\ud15f\0\ud1ba\0\ud215\0\ud270\0\ud2cb\0\ud326\0\ud381"+
    "\0\ud3dc\0\ud437\0\ud492\0\ud4ed\0\ud548\0\ud5a3\0\ud5fe\0\ud659"+
    "\0\ud6b4\0\ud70f\0\ud76a\0\ud7c5\0\ud820\0\ud87b\0\ud8d6\0\ud931"+
    "\0\ud98c\0\ud9e7\0\uda42\0\uda9d\0\udaf8\0\udb53\0\udbae\0\udc09"+
    "\0\udc64\0\udcbf\0\udd1a\0\udd75\0\uddd0\0\ude2b\0\ude86\0\udee1"+
    "\0\udf3c\0\udf97\0\udff2\0\ue04d\0\ue0a8\0\ue103\0\ue15e\0\ue1b9"+
    "\0\ue214\0\ue26f\0\ue2ca\0\ue325\0\ue380\0\ue3db";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[686];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\10\1\11\1\10\3\0\1\12\1\13\1\14\1\13"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24"+
    "\1\25\1\26\1\27\1\30\2\31\1\32\1\10\1\33"+
    "\3\34\22\13\1\35\1\36\2\13\1\37\2\13\1\21"+
    "\2\40\1\13\1\41\1\42\1\43\1\44\1\45\1\46"+
    "\2\13\1\47\5\13\1\50\1\51\1\52\1\53\1\54"+
    "\1\55\2\13\1\56\3\13\1\57\1\34\4\10\1\60"+
    "\1\61\1\62\2\60\1\0\1\63\1\60\1\64\4\60"+
    "\1\64\115\60\1\65\1\66\1\65\3\0\1\67\3\65"+
    "\1\70\14\65\1\71\2\65\1\72\3\65\1\73\1\74"+
    "\1\75\1\76\1\77\3\65\1\100\1\101\2\65\1\102"+
    "\2\65\1\103\2\65\1\104\1\105\1\65\1\106\1\65"+
    "\1\107\1\110\11\65\1\111\1\65\1\112\12\65\1\113"+
    "\1\114\15\65\1\66\1\65\3\0\1\67\3\65\1\70"+
    "\5\65\1\115\6\65\1\71\2\65\1\72\3\65\1\73"+
    "\1\74\1\75\1\76\1\77\3\65\1\100\1\101\2\65"+
    "\1\102\2\65\1\103\2\65\1\104\1\105\1\65\1\106"+
    "\1\65\1\107\1\110\11\65\1\111\1\65\1\112\12\65"+
    "\1\113\1\114\14\65\2\116\1\117\3\0\1\116\1\120"+
    "\1\116\1\120\1\121\1\120\22\116\31\120\3\116\33\120"+
    "\7\116\1\122\1\117\3\0\1\123\7\116\1\124\114\116"+
    "\1\125\1\126\4\125\1\127\13\125\1\116\2\125\1\130"+
    "\3\125\1\116\101\125\134\0\1\131\4\0\1\132\125\0"+
    "\1\132\4\0\1\133\1\134\132\0\1\13\1\0\2\13"+
    "\13\0\2\13\6\0\31\13\3\0\33\13\20\0\1\135"+
    "\127\0\1\13\1\0\2\13\13\0\2\13\6\0\5\13"+
    "\1\136\15\13\1\136\5\13\3\0\3\13\1\137\1\13"+
    "\1\140\1\136\2\13\1\141\4\13\1\142\1\13\1\143"+
    "\2\13\2\136\5\13\1\136\22\0\1\144\136\0\1\145"+
    "\12\0\1\146\117\0\1\146\3\0\1\147\1\146\5\0"+
    "\1\146\34\0\2\146\74\0\1\146\117\0\1\146\3\0"+
    "\1\147\1\146\5\0\2\146\33\0\2\146\56\0\1\145"+
    "\2\0\1\150\3\0\1\151\1\152\2\153\3\0\1\146"+
    "\34\0\1\152\1\145\61\0\1\154\3\0\1\145\1\155"+
    "\5\0\1\146\106\0\1\156\1\0\2\156\11\0\1\153"+
    "\1\0\2\31\6\0\3\156\2\157\24\156\3\0\4\156"+
    "\2\157\25\156\41\0\2\145\131\0\1\145\106\0\1\13"+
    "\1\0\2\13\13\0\2\13\6\0\2\13\1\160\26\13"+
    "\3\0\33\13\15\0\1\13\1\0\2\13\13\0\2\13"+
    "\6\0\14\13\1\161\14\13\3\0\33\13\15\0\1\13"+
    "\1\0\2\13\13\0\2\13\6\0\22\13\1\162\6\13"+
    "\3\0\33\13\15\0\1\13\1\0\2\13\13\0\2\13"+
    "\6\0\31\13\3\0\2\13\1\163\17\13\1\164\10\13"+
    "\15\0\1\13\1\0\2\13\13\0\2\13\6\0\31\13"+
    "\3\0\22\13\1\165\10\13\15\0\1\13\1\0\2\13"+
    "\13\0\2\13\6\0\31\13\3\0\1\13\1\166\15\13"+
    "\1\167\13\13\15\0\1\13\1\0\2\13\13\0\2\13"+
    "\6\0\31\13\3\0\17\13\1\170\13\13\15\0\1\13"+
    "\1\0\2\13\13\0\2\13\6\0\31\13\3\0\14\13"+
    "\1\171\1\13\1\172\11\13\1\173\2\13\15\0\1\13"+
    "\1\0\2\13\13\0\2\13\6\0\31\13\3\0\17\13"+
    "\1\174\5\13\1\175\5\13\15\0\1\13\1\0\2\13"+
    "\13\0\2\13\6\0\31\13\3\0\6\13\1\176\24\13"+
    "\15\0\1\13\1\0\2\13\13\0\2\13\6\0\31\13"+
    "\3\0\24\13\1\177\6\13\15\0\1\13\1\0\2\13"+
    "\13\0\2\13\6\0\31\13\3\0\1\13\1\200\31\13"+
    "\15\0\1\13\1\0\2\13\13\0\2\13\6\0\31\13"+
    "\3\0\25\13\1\173\5\13\15\0\1\13\1\0\2\13"+
    "\13\0\2\13\6\0\31\13\3\0\5\13\1\201\25\13"+
    "\15\0\1\13\1\0\2\13\13\0\2\13\6\0\31\13"+
    "\3\0\5\13\1\202\21\13\1\203\3\13\15\0\1\13"+
    "\1\0\2\13\13\0\2\13\6\0\31\13\3\0\10\13"+
    "\1\204\11\13\1\205\10\13\15\0\1\13\1\0\2\13"+
    "\13\0\2\13\6\0\31\13\3\0\10\13\1\206\22\13"+
    "\133\0\1\207\5\0\1\60\2\0\2\60\2\0\1\60"+
    "\1\210\4\60\1\210\115\60\10\0\1\60\4\0\1\60"+
    "\115\0\12\211\1\212\55\211\1\213\42\211\41\0\1\214"+
    "\72\0\1\215\4\0\1\215\14\0\2\216\1\0\2\216"+
    "\6\0\31\216\3\0\33\216\104\0\1\217\7\0\1\220"+
    "\1\0\1\221\121\0\1\222\14\0\1\223\111\0\1\224"+
    "\3\0\1\225\6\0\1\226\23\0\1\227\46\0\1\230"+
    "\24\0\1\231\7\0\1\232\102\0\1\233\4\0\1\234"+
    "\125\0\1\235\34\0\1\236\121\0\1\237\32\0\1\240"+
    "\73\0\1\241\7\0\1\242\122\0\1\243\7\0\1\244"+
    "\122\0\1\245\3\0\1\246\3\0\1\247\12\0\1\250"+
    "\4\0\1\251\63\0\1\252\34\0\1\253\124\0\1\254"+
    "\122\0\1\255\141\0\1\256\133\0\1\257\12\0\1\260"+
    "\132\0\1\261\114\0\1\262\6\0\1\263\134\0\1\253"+
    "\41\0\1\264\4\0\1\265\114\0\1\120\1\0\2\120"+
    "\13\0\2\120\6\0\31\120\3\0\33\120\7\0\1\266"+
    "\4\0\1\266\7\0\1\124\114\0\1\125\1\0\4\125"+
    "\1\0\13\125\1\0\2\125\1\0\3\125\1\0\101\125"+
    "\6\267\1\0\16\267\1\155\105\267\1\0\1\132\4\0"+
    "\1\132\125\0\1\132\4\0\1\133\124\0\10\135\1\270"+
    "\1\135\1\271\2\135\1\270\52\135\1\272\42\135\7\0"+
    "\1\13\1\0\2\13\13\0\2\13\6\0\31\13\3\0"+
    "\10\13\1\273\22\13\15\0\1\13\1\0\2\13\13\0"+
    "\2\13\6\0\31\13\3\0\20\13\1\274\12\13\15\0"+
    "\1\13\1\0\2\13\13\0\2\13\6\0\31\13\3\0"+
    "\16\13\1\275\14\13\15\0\1\13\1\0\2\13\13\0"+
    "\2\13\6\0\31\13\3\0\1\13\1\276\31\13\15\0"+
    "\1\13\1\0\2\13\13\0\2\13\6\0\31\13\3\0"+
    "\11\13\1\136\21\13\22\0\1\277\136\0\2\146\1\0"+
    "\1\146\1\0\1\146\42\0\2\146\61\0\1\145\3\0"+
    "\1\145\132\0\1\151\132\0\1\145\134\0\2\153\11\0"+
    "\2\300\33\0\2\300\53\0\1\154\121\0\1\156\1\0"+
    "\2\156\13\0\2\156\6\0\31\156\3\0\33\156\15\0"+
    "\1\156\1\0\2\156\6\0\1\301\1\0\1\301\2\0"+
    "\2\302\6\0\31\156\3\0\33\156\15\0\1\13\1\0"+
    "\2\13\13\0\2\13\6\0\10\13\1\303\20\13\3\0"+
    "\33\13\15\0\1\13\1\0\2\13\13\0\2\13\6\0"+
    "\17\13\1\304\11\13\3\0\33\13\15\0\1\13\1\0"+
    "\2\13\13\0\2\13\6\0\2\13\1\305\26\13\3\0"+
    "\33\13\15\0\1\13\1\0\2\13\13\0\2\13\6\0"+
    "\31\13\3\0\17\13\1\306\13\13\15\0\1\13\1\0"+
    "\2\13\13\0\2\13\6\0\31\13\3\0\7\13\1\307"+
    "\23\13\15\0\1\13\1\0\2\13\13\0\2\13\6\0"+
    "\31\13\3\0\5\13\1\310\25\13\15\0\1\13\1\0"+
    "\2\13\13\0\2\13\6\0\31\13\3\0\23\13\1\311"+
    "\1\312\6\13\15\0\1\13\1\0\2\13\13\0\2\13"+
    "\6\0\31\13\3\0\16\13\1\313\14\13\15\0\1\13"+
    "\1\0\2\13\13\0\2\13\6\0\31\13\3\0\23\13"+
    "\1\314\7\13\15\0\1\13\1\0\2\13\13\0\2\13"+
    "\6\0\31\13\3\0\4\13\1\315\26\13\15\0\1\13"+
    "\1\0\2\13\13\0\2\13\6\0\31\13\3\0\11\13"+
    "\1\316\21\13\15\0\1\13\1\0\2\13\13\0\2\13"+
    "\6\0\31\13\3\0\22\13\1\176\10\13\15\0\1\13"+
    "\1\0\2\13\13\0\2\13\6\0\31\13\3\0\16\13"+
    "\1\317\14\13\15\0\1\13\1\0\2\13\13\0\2\13"+
    "\6\0\31\13\3\0\10\13\1\320\22\13\15\0\1\13"+
    "\1\0\2\13\13\0\2\13\6\0\31\13\3\0\25\13"+
    "\1\321\5\13\15\0\1\13\1\0\2\13\13\0\2\13"+
    "\6\0\31\13\3\0\23\13\1\322\1\323\6\13\15\0"+
    "\1\13\1\0\2\13\13\0\2\13\6\0\31\13\3\0"+
    "\14\13\1\324\16\13\15\0\1\13\1\0\2\13\13\0"+
    "\2\13\6\0\31\13\3\0\11\13\1\325\21\13\15\0"+
    "\1\13\1\0\2\13\13\0\2\13\6\0\31\13\3\0"+
    "\5\13\1\326\25\13\15\0\1\13\1\0\2\13\13\0"+
    "\2\13\6\0\31\13\3\0\31\13\1\176\1\13\15\0"+
    "\1\13\1\0\2\13\13\0\2\13\6\0\31\13\3\0"+
    "\11\13\1\327\21\13\133\0\1\330\5\0\12\211\1\331"+
    "\55\211\1\213\42\211\60\0\1\332\75\0\2\216\1\0"+
    "\2\216\5\0\1\333\31\216\3\0\33\216\105\0\1\334"+
    "\141\0\1\335\142\0\1\336\130\0\1\337\135\0\1\340"+
    "\121\0\1\341\122\0\1\342\127\0\1\343\3\0\1\344"+
    "\32\0\1\345\130\0\1\346\46\0\1\347\203\0\1\350"+
    "\116\0\1\351\106\0\1\352\123\0\1\353\143\0\1\354"+
    "\167\0\1\355\132\0\1\356\146\0\1\357\112\0\1\360"+
    "\117\0\1\361\154\0\1\362\112\0\1\363\142\0\1\364"+
    "\137\0\1\365\125\0\1\366\122\0\1\367\32\0\1\370"+
    "\106\0\1\371\65\0\1\372\167\0\1\373\144\0\1\374"+
    "\132\0\1\375\133\0\1\376\127\0\1\377\136\0\1\u0100"+
    "\136\0\1\260\132\0\1\u0101\110\0\1\u0102\36\0\6\267"+
    "\1\0\16\267\1\0\105\267\10\0\1\135\4\0\1\135"+
    "\125\0\1\212\4\0\1\212\115\0\10\135\1\270\1\135"+
    "\1\u0103\2\135\1\270\52\135\1\272\42\135\7\0\1\13"+
    "\1\0\2\13\13\0\2\13\6\0\31\13\3\0\1\13"+
    "\1\u0104\31\13\15\0\1\13\1\0\2\13\13\0\2\13"+
    "\6\0\31\13\3\0\23\13\1\136\7\13\15\0\1\13"+
    "\1\0\2\13\13\0\2\13\6\0\31\13\3\0\6\13"+
    "\1\136\24\13\15\0\1\13\1\0\2\13\13\0\2\13"+
    "\6\0\31\13\3\0\16\13\1\136\14\13\27\0\1\301"+
    "\1\0\1\301\2\0\2\301\131\0\2\301\112\0\1\156"+
    "\1\0\2\156\13\0\2\302\6\0\31\156\3\0\33\156"+
    "\15\0\1\13\1\0\2\13\13\0\2\13\6\0\7\13"+
    "\1\u0105\21\13\3\0\33\13\15\0\1\13\1\0\2\13"+
    "\13\0\2\13\6\0\3\13\1\u0106\25\13\3\0\33\13"+
    "\15\0\1\13\1\0\2\13\13\0\2\13\6\0\10\13"+
    "\1\136\20\13\3\0\33\13\15\0\1\13\1\0\2\13"+
    "\13\0\2\13\6\0\31\13\3\0\22\13\1\316\10\13"+
    "\15\0\1\13\1\0\2\13\13\0\2\13\6\0\31\13"+
    "\3\0\25\13\1\u0107\5\13\15\0\1\13\1\0\2\13"+
    "\13\0\2\13\6\0\31\13\3\0\1\13\1\u0108\31\13"+
    "\15\0\1\13\1\0\2\13\13\0\2\13\6\0\31\13"+
    "\3\0\5\13\1\170\25\13\15\0\1\13\1\0\2\13"+
    "\13\0\2\13\6\0\31\13\3\0\3\13\1\u0109\27\13"+
    "\15\0\1\13\1\0\2\13\13\0\2\13\6\0\31\13"+
    "\3\0\24\13\1\u010a\6\13\15\0\1\13\1\0\2\13"+
    "\13\0\2\13\6\0\31\13\3\0\5\13\1\u010b\25\13"+
    "\15\0\1\13\1\0\2\13\13\0\2\13\6\0\31\13"+
    "\3\0\6\13\1\u010c\24\13\15\0\1\13\1\0\2\13"+
    "\13\0\2\13\6\0\31\13\3\0\24\13\1\u010d\6\13"+
    "\15\0\1\13\1\0\2\13\13\0\2\13\6\0\31\13"+
    "\3\0\3\13\1\u010e\27\13\15\0\1\13\1\0\2\13"+
    "\13\0\2\13\6\0\31\13\3\0\5\13\1\u010f\25\13"+
    "\15\0\1\13\1\0\2\13\13\0\2\13\6\0\31\13"+
    "\3\0\23\13\1\u0110\7\13\15\0\1\13\1\0\2\13"+
    "\13\0\2\13\6\0\31\13\3\0\25\13\1\u0111\5\13"+
    "\15\0\1\13\1\0\2\13\13\0\2\13\6\0\31\13"+
    "\3\0\25\13\1\u0112\5\13\15\0\1\13\1\0\2\13"+
    "\13\0\2\13\6\0\31\13\3\0\5\13\1\u0113\25\13"+
    "\15\0\1\13\1\0\2\13\13\0\2\13\6\0\31\13"+
    "\3\0\24\13\1\u0114\6\13\15\0\1\13\1\0\2\13"+
    "\13\0\2\13\6\0\31\13\3\0\16\13\1\170\14\13"+
    "\15\0\1\13\1\0\2\13\13\0\2\13\6\0\31\13"+
    "\3\0\14\13\1\u0115\16\13\31\0\1\u0116\2\0\2\u0116"+
    "\6\0\31\u0116\4\0\32\u0116\114\0\1\u0117\117\0\1\u0118"+
    "\150\0\1\u0119\131\0\1\u011a\132\0\1\u011b\125\0\1\u011c"+
    "\143\0\1\u011d\135\0\1\u011e\122\0\1\u011f\153\0\1\u0120"+
    "\100\0\1\u0121\102\0\1\u0122\201\0\1\u0123\120\0\1\u0124"+
    "\67\0\1\332\100\0\1\u0125\172\0\1\u0126\167\0\1\u0127"+
    "\140\0\1\u0128\135\0\1\u0129\135\0\1\u012a\115\0\1\u012b"+
    "\136\0\1\u012c\140\0\1\u012d\135\0\1\u012e\114\0\1\u012f"+
    "\142\0\1\u0130\133\0\1\u0131\150\0\1\u0132\122\0\1\u0133"+
    "\66\0\1\u0134\167\0\1\u0134\116\0\1\u0135\145\0\1\u0136"+
    "\141\0\1\u0137\112\0\1\u0138\63\0\1\u0139\64\0\1\u0138"+
    "\127\0\1\u0138\50\0\1\u013a\102\0\10\135\1\u013b\1\135"+
    "\1\271\2\135\1\u013b\52\135\1\272\42\135\7\0\1\13"+
    "\1\0\2\13\13\0\2\13\6\0\31\13\3\0\22\13"+
    "\1\274\10\13\15\0\1\13\1\0\2\13\13\0\2\13"+
    "\6\0\16\13\1\u013c\12\13\3\0\33\13\15\0\1\13"+
    "\1\0\2\13\13\0\2\13\6\0\10\13\1\u013d\20\13"+
    "\3\0\33\13\15\0\1\13\1\0\2\13\13\0\2\13"+
    "\6\0\31\13\3\0\15\13\1\u013e\15\13\15\0\1\13"+
    "\1\0\2\13\13\0\2\13\6\0\31\13\3\0\13\13"+
    "\1\u010d\17\13\15\0\1\13\1\0\2\13\13\0\2\13"+
    "\6\0\31\13\3\0\10\13\1\170\22\13\15\0\1\13"+
    "\1\0\2\13\13\0\2\13\6\0\31\13\3\0\11\13"+
    "\1\u013f\21\13\15\0\1\13\1\0\2\13\13\0\2\13"+
    "\6\0\31\13\3\0\11\13\1\u0140\21\13\15\0\1\13"+
    "\1\0\2\13\13\0\2\13\6\0\31\13\3\0\25\13"+
    "\1\175\5\13\15\0\1\13\1\0\2\13\13\0\2\13"+
    "\6\0\31\13\3\0\24\13\1\u0141\6\13\15\0\1\13"+
    "\1\0\2\13\13\0\2\13\6\0\31\13\3\0\22\13"+
    "\1\u0142\10\13\15\0\1\13\1\0\2\13\13\0\2\13"+
    "\6\0\31\13\3\0\5\13\1\u010d\25\13\15\0\1\13"+
    "\1\0\2\13\13\0\2\13\6\0\31\13\3\0\15\13"+
    "\1\u0110\15\13\15\0\1\13\1\0\2\13\13\0\2\13"+
    "\6\0\31\13\3\0\22\13\1\u0143\10\13\15\0\1\13"+
    "\1\0\2\13\13\0\2\13\6\0\31\13\3\0\3\13"+
    "\1\u0144\27\13\15\0\1\13\1\0\2\13\13\0\2\13"+
    "\6\0\31\13\3\0\3\13\1\u0145\27\13\15\0\1\13"+
    "\1\0\2\13\13\0\2\13\6\0\31\13\3\0\5\13"+
    "\1\176\25\13\31\0\1\u0116\1\u0146\1\0\2\u0116\6\0"+
    "\31\u0116\4\0\32\u0116\111\0\1\u0147\137\0\1\u0148\125\0"+
    "\1\u0149\122\0\1\u014a\150\0\1\u014b\143\0\1\u014c\113\0"+
    "\1\u014d\125\0\1\u014e\133\0\1\u014f\142\0\1\u0150\137\0"+
    "\1\u0151\77\0\1\u0152\144\0\1\u0153\155\0\1\u0154\60\0"+
    "\1\u0155\124\0\1\332\167\0\1\332\146\0\1\u0156\155\0"+
    "\1\u0157\77\0\1\u0158\126\0\1\u0159\45\0\1\u015a\240\0"+
    "\1\u015b\115\0\1\u015c\132\0\1\u015d\143\0\1\u015e\124\0"+
    "\1\u015f\142\0\1\u0160\117\0\1\u0161\34\0\1\u0162\4\0"+
    "\1\u0162\21\0\1\u0162\201\0\1\u0163\41\0\1\u0164\240\0"+
    "\1\u0165\46\0\1\u0139\127\0\1\u0166\132\0\1\u0139\114\0"+
    "\1\13\1\0\2\13\13\0\2\13\6\0\14\13\1\u0167"+
    "\14\13\3\0\33\13\15\0\1\13\1\0\2\13\13\0"+
    "\2\13\6\0\21\13\1\136\7\13\3\0\33\13\15\0"+
    "\1\13\1\0\2\13\13\0\2\13\6\0\31\13\3\0"+
    "\5\13\1\u0168\25\13\15\0\1\13\1\0\2\13\13\0"+
    "\2\13\6\0\31\13\3\0\16\13\1\u0169\14\13\15\0"+
    "\1\13\1\0\2\13\13\0\2\13\6\0\31\13\3\0"+
    "\6\13\1\u016a\24\13\15\0\1\13\1\0\2\13\13\0"+
    "\2\13\6\0\31\13\3\0\11\13\1\u016b\21\13\15\0"+
    "\1\13\1\0\2\13\13\0\2\13\6\0\31\13\3\0"+
    "\27\13\1\u016c\3\13\15\0\1\13\1\0\2\13\13\0"+
    "\2\13\6\0\31\13\3\0\16\13\1\u010d\14\13\15\0"+
    "\1\13\1\0\2\13\13\0\2\13\6\0\31\13\3\0"+
    "\24\13\1\176\6\13\15\0\1\13\1\0\2\13\13\0"+
    "\2\13\6\0\31\13\3\0\10\13\1\176\22\13\31\0"+
    "\1\u0116\2\0\2\u0116\6\0\31\u016d\4\0\32\u016d\116\0"+
    "\1\u016e\30\0\1\u016f\234\0\1\u0170\136\0\1\u0171\24\0"+
    "\1\u0172\242\0\1\u0173\111\0\1\u0174\134\0\1\u0175\143\0"+
    "\1\u0176\121\0\1\u0177\136\0\1\u0178\71\0\1\u0179\207\0"+
    "\1\u017a\112\0\1\u017b\147\0\1\u017c\115\0\1\u017d\164\0"+
    "\1\u017e\107\0\1\u017f\123\0\1\u0180\72\0\1\u0181\172\0"+
    "\1\u0182\141\0\1\u0183\32\0\1\u0184\132\0\1\u0185\217\0"+
    "\1\u0186\141\0\1\u0187\145\0\1\u0188\15\0\2\u0162\1\0"+
    "\130\u0162\110\0\1\u0189\62\0\1\u018a\100\0\1\u018b\151\0"+
    "\1\u018c\114\0\1\13\1\0\2\13\13\0\2\13\6\0"+
    "\4\13\1\136\24\13\3\0\33\13\15\0\1\13\1\0"+
    "\2\13\13\0\2\13\6\0\31\13\3\0\16\13\1\u018d"+
    "\14\13\15\0\1\13\1\0\2\13\13\0\2\13\6\0"+
    "\31\13\3\0\25\13\1\u0110\5\13\15\0\1\13\1\0"+
    "\2\13\13\0\2\13\6\0\31\13\3\0\17\13\1\u018e"+
    "\13\13\15\0\1\13\1\0\2\13\13\0\2\13\6\0"+
    "\31\13\3\0\11\13\1\u018f\21\13\31\0\1\u0116\1\u0146"+
    "\1\0\2\u0116\6\0\31\u0190\4\0\32\u0190\105\0\1\u0191"+
    "\73\0\1\u0192\17\0\1\u0193\151\0\1\u0194\131\0\1\u0195"+
    "\103\0\1\u0196\162\0\1\u0197\41\0\1\u0198\132\0\1\u0199"+
    "\242\0\1\u019a\124\0\1\u019b\117\0\1\u019c\111\0\1\332"+
    "\164\0\1\u019d\135\0\1\332\132\0\1\u019e\27\0\1\u019f"+
    "\233\0\1\u01a0\31\0\1\u01a1\232\0\1\u01a2\72\0\1\u01a3"+
    "\34\0\1\u01a4\35\0\1\u01a5\132\0\1\u01a6\204\0\1\u01a7"+
    "\116\0\1\u01a8\176\0\1\u01a9\115\0\1\u01aa\155\0\1\u01ab"+
    "\132\0\1\u01ac\70\0\1\u01ad\34\0\1\u01ae\73\0\1\u01af"+
    "\60\0\1\u01b0\2\0\1\u01b0\3\0\1\u01b0\1\0\4\u01b0"+
    "\1\0\115\u01b0\7\0\1\13\1\0\2\13\13\0\2\13"+
    "\6\0\31\13\3\0\24\13\1\u01b1\6\13\15\0\1\13"+
    "\1\0\2\13\13\0\2\13\6\0\31\13\3\0\16\13"+
    "\1\u01b2\14\13\15\0\1\13\1\0\2\13\13\0\2\13"+
    "\6\0\31\13\3\0\23\13\1\311\7\13\7\0\1\u01b3"+
    "\4\0\1\u01b3\14\0\1\u0116\1\u0146\1\0\2\u0116\4\0"+
    "\1\u01b4\1\0\31\u01b5\4\0\32\u01b5\14\0\1\u01b6\200\0"+
    "\1\u01b7\34\0\1\u01b8\67\0\1\u01b9\34\0\1\u01ba\35\0"+
    "\1\u01bb\132\0\1\u01bc\200\0\1\u01bd\34\0\1\u01be\27\0"+
    "\1\u01bf\165\0\1\u01c0\135\0\1\u01c1\74\0\1\u01c2\242\0"+
    "\1\u01c3\22\0\1\u01c4\242\0\1\u01c5\133\0\1\u01c6\70\0"+
    "\1\u01c7\154\0\1\u01c8\102\0\1\u01c9\71\0\1\u01ca\170\0"+
    "\1\u01cb\167\0\1\u01cc\102\0\1\u01cd\1\u01ce\124\0\1\u01cf"+
    "\147\0\1\u01d0\34\0\1\u01d1\52\0\1\u01d2\34\0\1\u01d3"+
    "\136\0\1\u01d4\143\0\1\u01d5\136\0\1\u01d6\24\0\1\u01d7"+
    "\175\0\1\u01d8\167\0\1\u01d9\62\0\1\u01da\34\0\1\u01db"+
    "\46\0\1\13\1\0\2\13\13\0\2\13\6\0\31\13"+
    "\3\0\23\13\1\176\7\13\7\0\1\u01b3\4\0\1\u01b3"+
    "\25\0\1\u01b4\77\0\1\u01b3\4\0\1\u01b3\14\0\1\u0116"+
    "\1\u0146\1\0\2\u0116\4\0\1\u01b4\1\0\31\u01dc\4\0"+
    "\32\u01dc\46\0\1\u01dd\151\0\1\u01de\167\0\1\u01df\70\0"+
    "\1\u01e0\167\0\1\u01e1\65\0\1\u01e2\135\0\1\u01e3\130\0"+
    "\1\u01e4\167\0\1\u01e5\73\0\1\u01e6\133\0\1\u01e7\34\0"+
    "\1\u01e8\107\0\1\u01e9\34\0\1\u01ea\62\0\1\u01eb\77\0"+
    "\1\u01ec\165\0\1\u01ed\77\0\1\u01ee\236\0\1\332\66\0"+
    "\1\u01ef\34\0\1\u01f0\35\0\1\u01f1\206\0\1\u01f2\34\0"+
    "\1\u01f3\52\0\1\u01f4\146\0\1\u01f5\167\0\1\u01f6\60\0"+
    "\1\u01f7\34\0\1\u01f8\75\0\1\u01f9\34\0\1\u01fa\113\0"+
    "\1\u01fb\34\0\1\u01fc\63\0\1\u01fd\167\0\1\u01fe\112\0"+
    "\1\u01ff\167\0\1\u0200\24\0\1\u0201\223\0\1\u0202\132\0"+
    "\1\u0203\73\0\1\u0204\10\0\1\u0205\132\0\1\u0206\167\0"+
    "\1\u0207\65\0\1\u0208\167\0\1\u0209\35\0\1\u01b3\4\0"+
    "\1\u01b3\14\0\1\u0116\1\u0146\1\0\2\u0116\4\0\1\u01b4"+
    "\1\0\31\u020a\4\0\32\u020a\44\0\1\u020b\34\0\1\u020c"+
    "\112\0\1\u020d\167\0\1\u020e\76\0\1\u020f\167\0\1\u0210"+
    "\72\0\1\u0211\34\0\1\u0212\106\0\1\u0213\34\0\1\u0214"+
    "\72\0\1\u020d\167\0\1\u020e\60\0\1\u0215\34\0\1\u0216"+
    "\104\0\1\u0217\167\0\1\u0218\76\0\1\u0219\167\0\1\u021a"+
    "\61\0\1\u021b\34\0\1\u021c\100\0\1\u021d\133\0\1\u01e7"+
    "\150\0\1\u021e\112\0\1\u021f\167\0\1\u0220\112\0\1\u0221"+
    "\126\0\1\u0222\167\0\1\u0223\62\0\1\u0224\34\0\1\u0225"+
    "\105\0\1\u01fd\167\0\1\u01fe\102\0\1\u0226\167\0\1\u0227"+
    "\101\0\1\u0228\167\0\1\u0229\100\0\1\u022a\167\0\1\u022b"+
    "\55\0\1\u022c\167\0\1\u022d\75\0\1\u022e\167\0\1\u022f"+
    "\105\0\1\u0230\66\0\1\u0231\132\0\1\u0232\200\0\1\u0233"+
    "\34\0\1\u0234\63\0\1\u0235\3\0\1\u021f\30\0\1\u0236"+
    "\3\0\1\u0220\71\0\1\u0237\167\0\1\u0238\101\0\1\u0239"+
    "\167\0\1\u023a\30\0\1\u01b3\4\0\1\u01b3\14\0\1\u0116"+
    "\1\u0146\1\0\2\u0116\4\0\1\u01b4\1\0\31\u0116\4\0"+
    "\32\u0116\65\0\1\u023b\167\0\1\u023c\60\0\1\u023d\167\0"+
    "\1\u023e\106\0\1\332\167\0\1\332\70\0\1\u023f\167\0"+
    "\1\u0240\73\0\1\u0241\167\0\1\u0242\104\0\1\u0243\167\0"+
    "\1\u0244\60\0\1\u0245\167\0\1\u0246\101\0\1\u0247\167\0"+
    "\1\u0248\116\0\1\u0249\167\0\1\u024a\50\0\1\u021b\217\0"+
    "\1\u024b\45\0\1\u024c\167\0\1\u024d\105\0\1\u01ef\132\0"+
    "\1\u024e\167\0\1\u024f\111\0\1\u0250\167\0\1\u0251\54\0"+
    "\1\u0179\167\0\1\u017b\76\0\1\u0252\167\0\1\u0253\77\0"+
    "\1\u0254\167\0\1\u0255\110\0\1\332\167\0\1\332\76\0"+
    "\1\u0256\167\0\1\u0257\71\0\1\u0258\34\0\1\u0259\73\0"+
    "\1\u025a\130\0\1\u025b\1\u025c\143\0\1\u025d\167\0\1\u025e"+
    "\62\0\1\u025f\167\0\1\u0260\107\0\1\u0256\167\0\1\u0257"+
    "\67\0\1\u0261\167\0\1\u0262\75\0\1\u0263\167\0\1\u0264"+
    "\103\0\1\332\167\0\1\332\52\0\1\214\167\0\1\u0265"+
    "\121\0\1\u0266\167\0\1\u0267\61\0\1\u0268\167\0\1\u0269"+
    "\101\0\1\u026a\167\0\1\u026b\111\0\1\332\170\0\1\332"+
    "\54\0\1\u026c\167\0\1\u026d\144\0\1\u026e\74\0\1\u026c"+
    "\167\0\1\u026d\54\0\1\u026f\167\0\1\u0270\100\0\1\u0271"+
    "\167\0\1\u0272\74\0\1\u0273\167\0\1\u0274\77\0\1\u01e0"+
    "\167\0\1\u01e1\114\0\1\u0275\167\0\1\u0276\75\0\1\u0277"+
    "\167\0\1\u0278\70\0\1\u0258\132\0\1\u0279\34\0\1\u027a"+
    "\63\0\1\u027b\34\0\1\u027c\116\0\1\u027d\167\0\1\u027e"+
    "\54\0\1\u027f\167\0\1\u0280\101\0\1\u0281\167\0\1\u0282"+
    "\75\0\1\214\167\0\1\u0265\144\0\1\332\57\0\1\u0283"+
    "\167\0\1\u0284\121\0\1\u020d\170\0\1\u020e\44\0\1\u0285"+
    "\167\0\1\u0286\100\0\1\332\167\0\1\332\152\0\1\u0287"+
    "\54\0\1\u0288\167\0\1\u0289\103\0\1\u020f\167\0\1\u0210"+
    "\74\0\1\u028a\167\0\1\u028b\72\0\1\332\167\0\1\332"+
    "\114\0\1\u028c\167\0\1\u028d\76\0\1\u028e\167\0\1\u028f"+
    "\54\0\1\u0290\167\0\1\u0291\76\0\1\u0292\167\0\1\u0293"+
    "\115\0\1\u0294\167\0\1\u0295\36\0\1\u0296\132\0\1\u0297"+
    "\162\0\1\u0298\167\0\1\u0299\101\0\1\u029a\167\0\1\u029b"+
    "\150\0\1\u029c\45\0\1\214\167\0\1\u0265\66\0\1\u029d"+
    "\167\0\1\u029e\101\0\1\u029f\167\0\1\u02a0\105\0\1\u02a1"+
    "\167\0\1\u02a2\102\0\1\u02a3\167\0\1\u02a4\75\0\1\u023d"+
    "\167\0\1\u023e\71\0\1\u0275\167\0\1\u0276\110\0\1\u02a5"+
    "\132\0\1\u02a6\106\0\1\u02a7\167\0\1\u02a8\112\0\1\u0275"+
    "\167\0\1\u0276\145\0\1\u02a9\54\0\1\332\167\0\1\332"+
    "\75\0\1\u020d\167\0\1\u020e\62\0\1\u022c\167\0\1\u022d"+
    "\121\0\1\332\167\0\1\332\67\0\1\u02aa\167\0\1\u02ab"+
    "\106\0\1\332\170\0\1\332\116\0\1\u02ac\105\0\1\u02ad"+
    "\167\0\1\u02ae\112\0\1\u0265\101\0\1\u0294\167\0\1\u0295"+
    "\27\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[58422];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\7\0\1\11\10\1\2\11\36\1\3\11\1\1\3\11"+
    "\26\1\2\11\4\1\1\11\1\1\2\11\1\1\1\0"+
    "\1\1\3\0\7\1\2\11\1\0\5\1\1\11\32\1"+
    "\2\0\1\11\52\0\1\11\1\0\1\1\3\0\37\1"+
    "\1\11\51\0\22\1\45\0\13\1\34\0\1\1\4\0"+
    "\6\1\40\0\3\1\40\0\3\1\1\0\1\11\372\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[686];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen())];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
    public int start;
    public int end;
    public int beginString;
    public static Set<String> commands = new HashSet<String>();
    public static Set<String> macros = new HashSet<String>();
    public static Set<String> variables = new HashSet<String>();
    public Set<String> infile;

    private ScilabDocument doc;
    private boolean transposable;
    private Element elem;
    private MatchingBlockScanner matchBlock;

    static {
        // For SciNotes colors in preferences
        commands.add("cos");
        macros.add("sind");
    }

    public ScilabLexer(ScilabDocument doc) {
        this(doc, new MatchingBlockScanner(doc), true);
    }

    public ScilabLexer(ScilabDocument doc, boolean update) {
        this(doc, new MatchingBlockScanner(doc), update);
    }

    public ScilabLexer(ScilabDocument doc, MatchingBlockScanner matchBlock, boolean update) {
        this.doc = doc;
        this.elem = doc.getDefaultRootElement();
        this.infile = doc.getFunctionsInDoc();
        this.matchBlock = matchBlock;
        if (update) {
                update();
        }
    }

    public static void update() {
       if (ScilabCommonsUtils.isScilabThread()) {
           String[] vars = ScilabKeywords.GetVariablesName();
           String[] funs = ScilabKeywords.GetFunctionsName();
           String[] macs = ScilabKeywords.GetMacrosName();
           variables.clear();
           commands.clear();
           macros.clear();
           if (vars != null) {
               variables.addAll(Arrays.asList(vars));
           }
           if (funs != null) {
               commands.addAll(Arrays.asList(funs));
           }
           if (macs != null) {
               macros.addAll(Arrays.asList(macs));
           }
        }
    }

    public void setRange(int p0, int p1) {
        start = p0;
        end = p1;
        transposable = false;
        yyreset(new ScilabDocumentReader(doc, p0, p1));
        int currentLine = elem.getElementIndex(start);
        if (currentLine != 0) {
           ScilabDocument.ScilabLeafElement e = (ScilabDocument.ScilabLeafElement) elem.getElement(currentLine - 1);
           if (e.isBlockComment()) {
              yybegin(BLOCKCOMMENT);
           }
        }
    }

    public int yychar() {
        return (int) yychar;
    }

    public int scan() throws IOException {
        int ret = yylex();
        int lastPos = start + yychar() + yylength();
        if (lastPos == end) {
           ((ScilabDocument.ScilabLeafElement) elem.getElement(elem.getElementIndex(start))).setBlockComment(yystate() == BLOCKCOMMENT);
        }
        return ret;
    }

    public boolean isLineFinishedByBlockComment(int start, int end) {
        this.start = start;
        this.end = end;
        try {           
           yyreset(new ScilabDocumentReader(doc, start, end));
           int tok = 0;
           while (tok != ScilabLexerConstants.EOF) {
              tok = yylex();
           }
        } catch (Exception e) { }
        
        return yystate() == BLOCKCOMMENT;
    }

    public int getKeyword(int pos, boolean strict) {
        // Pre condition
        if (elem == null) {
            return ScilabLexerConstants.DEFAULT;
        }

        Element line = elem.getElement(elem.getElementIndex(pos));
        int end = line.getEndOffset();
        int tok = -1;
        start = line.getStartOffset();
        int startL = start;
        int s = -1;

        try {
           yyreset(new ScilabDocumentReader(doc, start, end));
           if (!strict) {
              pos++;
           }

           while (startL < pos && s != startL && tok != EOF) {
               s = startL;
               tok = yylex();
               startL = start + yychar() + yylength();
           }

           return tok;
        } catch (IOException e) {
           return ScilabLexerConstants.DEFAULT;
        }
     }

     public static ScilabTokens getScilabTokens(String str) {
         ScilabDocument doc = new ScilabDocument(false);
         try {
             doc.insertString(0, str, null);
         } catch (BadLocationException e) { }
         return getScilabTokens(doc);
     }

     public static ScilabTokens getScilabTokens(ScilabDocument doc) {
         ScilabLexer lexer = new ScilabLexer(doc);
         lexer.yyreset(new ScilabDocumentReader(doc, 0, doc.getLength()));
         ScilabTokens tokens = new ScilabTokens();
         int tok = -1;
         try {
            while (tok != ScilabLexerConstants.EOF) {
               tok = lexer.yylex();
               tokens.add(tok, lexer.yychar() + lexer.yylength());
            }
         } catch (IOException e) { }
 
         return tokens;
     }

     public static class ScilabTokens {
        private List<Integer> tokenType = new ArrayList<Integer>();
        private List<Integer> tokenPos = new ArrayList<Integer>();

        ScilabTokens() { }

        void add(final int type, final int pos) {
           tokenType.add(type);
           tokenPos.add(pos);
        }

        public final List<Integer> getTokenType() {
           return tokenType;
        }

        public final List<Integer> getTokenPos() {
           return tokenPos;
        }
     }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public ScilabLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate && zzCanGrow()) {
      /* if not, and it can grow: blow it up */
      char newBuffer[] = new char[Math.min(zzBuffer.length * 2, zzMaxBufferLen())];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      if (requested == 0) {
        throw new java.io.EOFException("Scan buffer limit reached ["+zzBuffer.length+"]");
      }
      else {
        throw new java.io.IOException(
            "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
      }
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    int initBufferSize = Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen());
    if (zzBuffer.length > initBufferSize) {
      zzBuffer = new char[initBufferSize];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  public int yylex() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
              {
                return ScilabLexerConstants.EOF;
              }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { transposable = false;
                                   return ScilabLexerConstants.DEFAULT;
            }
          // fall through
          case 43: break;
          case 2:
            { return ScilabLexerConstants.TAB;
            }
          // fall through
          case 44: break;
          case 3:
            { return ScilabLexerConstants.WHITE;
            }
          // fall through
          case 45: break;
          case 4:
            { transposable = true;
                                   String str = yytext();
                                   if (commands.contains(str)) {
                                       yybegin(COMMANDS);
                                       return ScilabLexerConstants.COMMANDS;
                                   } else if (macros.contains(str)) {
                                       yybegin(COMMANDS);
                                       return ScilabLexerConstants.MACROS;
                                   } else if (infile.contains(str)) {
                                       yybegin(COMMANDS);
                                       return ScilabLexerConstants.MACROINFILE;
                                   } else {
                                       List<String>[] arr = doc.getInOutArgs(start + yychar());
                                       if (arr != null && (arr[0].contains(str) || arr[1].contains(str))) {
                                           return ScilabLexerConstants.INPUTOUTPUTARGS;
                                       } else if (variables.contains(str)) {
                                           return ScilabLexerConstants.VARIABLES;
                                       }
                                   }
                                   return ScilabLexerConstants.ID;
            }
          // fall through
          case 46: break;
          case 5:
            { transposable = false;
                                   beginString = zzStartRead;
                                   yybegin(QSTRING);
                                   return ScilabLexerConstants.STRING;
            }
          // fall through
          case 47: break;
          case 6:
            { transposable = false;
                                   return ScilabLexerConstants.SPECIAL;
            }
          // fall through
          case 48: break;
          case 7:
            { transposable = false;
                                   return ScilabLexerConstants.OPERATOR;
            }
          // fall through
          case 49: break;
          case 8:
            { if (transposable) {
                                       return ScilabLexerConstants.TRANSP;
                                    } else {
                                       beginString = zzStartRead;
                                       yybegin(QSTRING);
                                       return ScilabLexerConstants.STRING;
                                    }
            }
          // fall through
          case 50: break;
          case 9:
            { transposable = false;
                                   return ScilabLexerConstants.OPENCLOSE;
            }
          // fall through
          case 51: break;
          case 10:
            { transposable = true;
                                   return ScilabLexerConstants.OPENCLOSE;
            }
          // fall through
          case 52: break;
          case 11:
            { transposable = false;
                                   yybegin(FIELD);
                                   return ScilabLexerConstants.OPERATOR;
            }
          // fall through
          case 53: break;
          case 12:
            { transposable = true;
                                   return ScilabLexerConstants.NUMBER;
            }
          // fall through
          case 54: break;
          case 13:
            { return ScilabLexerConstants.STRING;
            }
          // fall through
          case 55: break;
          case 14:
            { return ScilabLexerConstants.TAB_STRING;
            }
          // fall through
          case 56: break;
          case 15:
            { return ScilabLexerConstants.DEFAULT;
            }
          // fall through
          case 57: break;
          case 16:
            { return ScilabLexerConstants.WHITE_STRING;
            }
          // fall through
          case 58: break;
          case 17:
            { transposable = false;
                                   yybegin(YYINITIAL);
                                   return ScilabLexerConstants.STRING;
            }
          // fall through
          case 59: break;
          case 18:
            { return ScilabLexerConstants.COMMENT;
            }
          // fall through
          case 60: break;
          case 19:
            { return ScilabLexerConstants.TAB_COMMENT;
            }
          // fall through
          case 61: break;
          case 20:
            { return ScilabLexerConstants.WHITE_COMMENT;
            }
          // fall through
          case 62: break;
          case 21:
            { yypushback(1);
                                   yybegin(YYINITIAL);
            }
          // fall through
          case 63: break;
          case 22:
            { 
            }
          // fall through
          case 64: break;
          case 23:
            { transposable = true;
                                   return ScilabLexerConstants.FIELD;
            }
          // fall through
          case 65: break;
          case 24:
            { yybegin(COMMANDSWHITE);
                                   return ScilabLexerConstants.TAB;
            }
          // fall through
          case 66: break;
          case 25:
            { yybegin(COMMANDSWHITE);
                                   return ScilabLexerConstants.WHITE;
            }
          // fall through
          case 67: break;
          case 26:
            { yypushback(yylength());
                                   yybegin(YYINITIAL);
            }
          // fall through
          case 68: break;
          case 27:
            { return ScilabLexerConstants.ERROR;
            }
          // fall through
          case 69: break;
          case 28:
            { transposable = true;
                                   return ScilabLexerConstants.CONSTANTES;
            }
          // fall through
          case 70: break;
          case 29:
            { transposable = false;
                                   yypushback(2);
                                   yybegin(BLOCKCOMMENT);
            }
          // fall through
          case 71: break;
          case 30:
            { transposable = false;
                                   yypushback(2);
                                   yybegin(COMMENT);
            }
          // fall through
          case 72: break;
          case 31:
            { transposable = false;
                                   return ScilabLexerConstants.SKEYWORD;
            }
          // fall through
          case 73: break;
          case 32:
            { transposable = false;
                                   return ScilabLexerConstants.OSKEYWORD;
            }
          // fall through
          case 74: break;
          case 33:
            { return ScilabLexerConstants.LATEX;
            }
          // fall through
          case 75: break;
          case 34:
            { yybegin(YYINITIAL);
                                   return ScilabLexerConstants.COMMENT;
            }
          // fall through
          case 76: break;
          case 35:
            { transposable = false;
                                   if (matchBlock != null) {
                                      MatchingBlockScanner.MatchingPositions pos = matchBlock.getMatchingBlock(start + yychar() + yylength(), false);
                                      if (pos != null) {
                                         try {
                                             String match = doc.getText(pos.secondB, pos.secondE - pos.secondB);
                                             if (match.equals("function")) {
                                                return ScilabLexerConstants.FKEYWORD;
                                             }
                                         } catch (BadLocationException e) { }
                                      }
                                   }
                                   return ScilabLexerConstants.OSKEYWORD;
            }
          // fall through
          case 77: break;
          case 36:
            { return ScilabLexerConstants.AUTHORS;
            }
          // fall through
          case 78: break;
          case 37:
            { transposable = false;
                                   return ScilabLexerConstants.ELSEIF;
            }
          // fall through
          case 79: break;
          case 38:
            { transposable = false;
                                   return ScilabLexerConstants.CKEYWORD;
            }
          // fall through
          case 80: break;
          case 39:
            { return ScilabLexerConstants.TODO;
            }
          // fall through
          case 81: break;
          case 40:
            { return ScilabLexerConstants.URL;
            }
          // fall through
          case 82: break;
          case 41:
            { transposable = false;
                                   return ScilabLexerConstants.FKEYWORD;
            }
          // fall through
          case 83: break;
          case 42:
            { return ScilabLexerConstants.MAIL;
            }
          // fall through
          case 84: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
