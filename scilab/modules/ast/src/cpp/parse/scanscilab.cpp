
#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern int yyleng;

extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = NULL; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = NULL;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart ( FILE *input_file  );
void yy_switch_to_buffer ( YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer ( FILE *file, int size  );
void yy_delete_buffer ( YY_BUFFER_STATE b  );
void yy_flush_buffer ( YY_BUFFER_STATE b  );
void yypush_buffer_state ( YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state ( void );

static void yyensure_buffer_stack ( void );
static void yy_load_buffer_state ( void );
static void yy_init_buffer ( YY_BUFFER_STATE b, FILE *file  );
#define YY_FLUSH_BUFFER yy_flush_buffer( YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer ( char *base, yy_size_t size  );
YY_BUFFER_STATE yy_scan_string ( const char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes ( const char *bytes, int len  );

void *yyalloc ( yy_size_t  );
void *yyrealloc ( void *, yy_size_t  );
void yyfree ( void *  );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define yywrap() (/*CONSTCOND*/1)
#define YY_SKIP_YYWRAP
typedef flex_uint8_t YY_CHAR;

FILE *yyin = NULL, *yyout = NULL;

typedef int yy_state_type;

extern int yylineno;
int yylineno = 1;

extern char *yytext;
#ifdef yytext_ptr
#undef yytext_ptr
#endif
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state ( void );
static yy_state_type yy_try_NUL_trans ( yy_state_type current_state  );
static int yy_get_next_buffer ( void );
static void yynoreturn yy_fatal_error ( const char* msg  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;
#define YY_NUM_RULES 147
#define YY_END_OF_BUFFER 148
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_acclist[996] =
    {   0,
    16409,  126,  126,  135,  135,  117,  117,  113,  113,  148,
       87,  147,   83,   87,  147,   84,  147,   84,   87,  147,
       76,   87,  147,   80,   87,  147,   28,   87,  147,   76,
       87,  147,   31,   87,  147,   82,   87,  147,   35,   87,
      147,   36,   87,  147,   49,   87,  147,   48,   87,  147,
       38,   87,  147,   47,   87,  147,   68,   87,  147,   50,
       87,  147,   70,   87,  147,   39,   87,  147,   37,   87,
      147,   61,   87,  147,   65,   87,  147,   62,   87,  147,
       27,   87,  147,   66,   87,  147,   51,   87,  147,   67,
       87,  147,   52,   87,  147,   76,   87,  147,   76,   87,

      147,   76,   87,  147,   76,   87,  147,   76,   87,  147,
       76,   87,  147,   76,   87,  147,   76,   87,  147,   76,
       87,  147,   76,   87,  147,   76,   87,  147,   76,   87,
      147,   40,   87,  147,   33,   87,  147,   41,   87,  147,
       27,   87,  147,   87,  147,   87,  147,   87,  147,   87,
      147,   87,  147,   87,  147,   87,  147,   87,  147,   87,
      147,   83,   87,  147,16409,   76,   87,  147,   28,   87,
      147,   76,   87,  147,   76,   87,  147,   76,   87,  147,
       76,   87,  147,   76,   87,  147,   76,   87,  147,   76,
       87,  147,   76,   87,  147,   76,   87,  147,   76,   87,

      147,   76,   87,  147,   76,   87,  147,   76,   87,  147,
       87,  147,   87,  147,   87,  147,   87,  147,   87,  147,
       87,  147,   87,  147,   87,  147,   87,  147,  126,  127,
      147,  125,  147,  125,  127,  147,  124,  127,  147,  123,
      127,  147,  127,  147,  135,  136,  147,  134,  147,  134,
      136,  147,  132,  136,  147,  133,  136,  147,  136,  147,
      117,  118,  147,  116,  147,  116,  118,  147,  118,  147,
      118,  147,  113,  147,  112,  147,  112,  147,  111,  147,
      110,  111,  147,  107,  147,  107,  111,  147,  111,  147,
      102,  147,   83,  102,  147,   92,  147,   92,  102,  147,

       76,  102,  147,   80,  102,  147,   28,  102,  147,   76,
      102,  147,   31,  102,  147,   82,  102,  147,   88,  102,
      147,   89,  102,  147,   49,  102,  147,   96,  102,  147,
       38,  102,  147,   98,  102,  147,   68,  102,  147,   50,
      102,  147,   70,  102,  147,   39,   91,  102,  147,   37,
      102,  147,   61,  102,  147,   65,  102,  147,   62,  102,
      147,   27,  102,  147,   66,  102,  147,   51,  102,  147,
       94,  102,  147,   52,  102,  147,   40,  102,  147,   33,
      102,  147,   95,  102,  147,   27,  102,  147,  102,  147,
      102,  147,  102,  147,  102,  147,  102,  147,  102,  147,

      102,  147,  102,  147,  146,  147,  137,  147,  140,  147,
      140,  147,   80,  147,   82,  147,  142,  146,  147,  139,
      147,  146,  147,  138,  147,  143,  146,  147,  141,  146,
      147,  144,  146,  147,  145,  146,  147,  147,   26,  147,
      147,   26,  147,  147,   26,  147,   26,  147,   26,  147,
       26,  147,   26,  147,   26,  147,   26,  147,   26,  147,
       26,  147,   26,  147,   26,  147,   26,  147,  147,  147,
      147,  147,  147,  147,  147,  147,   83,   85,   85,   81,
       84,   76,   76,    3,   30,   76,    2,   29,   76,   32,
       52,   42,   43,   69,   44,   75,   45,   46,   78,   79,

       77,   74,   70,   77,   77,   63,   60,   59,   64,   76,
       76,   76,   76,   18,   76,   76,   76,   76,   76,    5,
       76,   76,   76,   76,   76,   76,   76,   76,   34,   76,
       83,16409,   76,   76,    3,   30,   76,    2,   29,   76,
       76,   76,   76,   76,   18,   76,   76,   76,   76,   76,
        5,   76,   76,   76,   76,   76,   76,   76,   76,   76,
      126,  125,  119,  120,  121,  122,  135,  134,  128,  129,
      130,  131,  117,  116,  114,  115,  113,  112,  110,  107,
      108,  109,   83,   81,   93,   90,  100,  101,   91,   92,
       30,   76,   29,   76,  105,   91,  146,  137,  140,   78,

      146,   79,  146,   26,   26,    3,   26,    2,   26,   26,
       26,   26,   26,   18,   26,   26,   26,   26,   26,    5,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   86,
       86,   56,   53,   54,   55,   57,   77,   77,   73,   74,
       71,   77,   72,   77,   58,   76,   76,   76,   76,   76,
       76,    9,   76,   16,   76,   76,   76,   76,   76,   76,
       76,   76,   21,   76,   76,    1,   76, 8217, 8217,   76,
       76,   76,   76,   76,   76,    9,   76,   16,   76,   76,
       76,   76,   76,   76,   76,   76,   21,   76,   76,    1,
       76,   97,   99,  106,  103,  104,   26,   26,   26,   26,

       26,   26,    9,   26,   16,   26,   26,   26,   26,   26,
       26,   26,   26,   21,   26,   26,   71,   77,   77,   72,
       76,   76,   13,   76,   76,   76,    7,   76,   76,   76,
       76,   76,   76,   76,   76,    6,   76,   76,    1,    1,
       76,    1,    1,    1,    1,    1,    1,    1,    1,   76,
     8217,   76,   76,   13,   76,   76,   76,    7,   76,   76,
       76,   76,   76,   76,   76,   76,    6,   76,   76,    1,
        1,   76,    1,    1,    1,    1,    1,    1,    1,    1,
       76,   26,   26,   13,   26,   26,   26,    7,   26,   26,
       26,   26,   26,   26,   26,   26,    6,   26,   26,   26,

       76,   76,   77,   77,   76,   19,   76,   22,   76,   76,
       76,   76,   76,   76,   76,   76,   76,   76,   17,   76,
        1,    1,    1,    1,    1,    1,    1,   76,   76,   76,
       19,   76,   22,   76,   76,   76,   76,   76,   76,   76,
       76,   76,   76,   17,   76,    1, 8217,    1, 8217,    1,
        1,    1,    1,    1,    1,    1,   26,   26,   26,   19,
       26,   22,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   17,   26,   77,   77,   76,   76,    8,   76,
       76,   76,   76,   24,   76,   23,   76,   10,   76,   11,
       76,    1,    1,    1,   76,   76,    8,   76,   76,   76,

       76,   24,   76,   23,   76,   10,   76,   11,   76,    1,
     8217,    1,    1,    1,   26,   26,    8,   26,   26,   26,
       26,   24,   26,   23,   26,   10,   26,   11,   26,   77,
       76,   76,   76,   76,   76,    1,   76,   76,   76,   76,
       76,   76,    1,   76,   26,   26,   26,   26,   26,   77,
       76,   20,   76,   76,   14,   76,   76,   76,   20,   76,
       76,   14,   76,   76,   26,   20,   26,   26,   14,   26,
       26,    4,   76,   76,   12,   76,    4,   76,   76,   12,
       76,    4,   26,   26,   12,   26,   76,   76,   26,   15,
       76,   15,   76,   15,   26

    } ;

static const flex_int16_t yy_accept[943] =
    {   0,
        1,    1,    2,    3,    4,    5,    6,    7,    8,    9,
       10,   10,   10,   10,   10,   10,   10,   10,   10,   11,
       13,   16,   18,   21,   24,   27,   30,   33,   36,   39,
       42,   45,   48,   51,   54,   57,   60,   63,   66,   69,
       72,   75,   78,   81,   84,   87,   90,   93,   96,   99,
      102,  105,  108,  111,  114,  117,  120,  123,  126,  129,
      132,  135,  138,  141,  144,  146,  148,  150,  152,  154,
      156,  158,  160,  162,  166,  169,  172,  175,  178,  181,
      184,  187,  190,  193,  196,  199,  202,  205,  208,  211,
      213,  215,  217,  219,  221,  223,  225,  227,  229,  232,

      234,  237,  240,  243,  245,  248,  250,  253,  256,  259,
      261,  264,  266,  269,  271,  273,  275,  277,  279,  281,
      284,  286,  289,  291,  293,  296,  298,  301,  304,  307,
      310,  313,  316,  319,  322,  325,  328,  331,  334,  337,
      340,  343,  346,  350,  353,  356,  359,  362,  365,  368,
      371,  374,  377,  380,  383,  386,  389,  391,  393,  395,
      397,  399,  401,  403,  405,  407,  409,  411,  413,  415,
      417,  420,  422,  424,  426,  429,  432,  435,  438,  439,
      441,  442,  444,  445,  447,  449,  451,  453,  455,  457,
      459,  461,  463,  465,  467,  469,  470,  471,  472,  473,

      474,  475,  476,  477,  478,  479,  480,  481,  481,  481,
      482,  483,  483,  483,  483,  483,  483,  483,  483,  483,
      484,  484,  484,  484,  484,  484,  484,  484,  484,  487,
      490,  491,  492,  492,  493,  494,  495,  496,  497,  498,
      499,  500,  500,  501,  502,  502,  503,  504,  505,  506,
      506,  506,  506,  506,  506,  506,  506,  506,  506,  507,
      508,  508,  509,  509,  510,  510,  510,  511,  512,  513,
      514,  516,  517,  518,  519,  520,  522,  523,  524,  525,
      526,  527,  528,  529,  530,  530,  531,  531,  531,  531,
      531,  531,  531,  531,  531,  533,  533,  533,  533,  533,

      533,  533,  533,  533,  533,  533,  533,  534,  534,  534,
      534,  534,  534,  534,  534,  534,  535,  535,  535,  535,
      535,  535,  535,  535,  535,  538,  541,  542,  543,  544,
      545,  547,  548,  549,  550,  551,  553,  554,  555,  556,
      557,  558,  559,  560,  561,  561,  561,  561,  561,  561,
      561,  561,  561,  562,  563,  564,  565,  566,  567,  568,
      569,  570,  571,  572,  573,  574,  575,  576,  577,  578,
      579,  580,  581,  582,  583,  584,  586,  587,  588,  589,
      589,  590,  591,  593,  595,  595,  595,  596,  597,  598,
      599,  600,  602,  604,  605,  605,  605,  605,  605,  605,

      605,  605,  605,  606,  606,  606,  606,  606,  606,  606,
      606,  606,  608,  610,  611,  612,  613,  614,  616,  617,
      618,  619,  620,  622,  623,  624,  625,  626,  627,  628,
      629,  630,  630,  630,  630,  630,  630,  630,  630,  631,
      632,  632,  632,  632,  632,  632,  632,  632,  632,  632,
      632,  632,  632,  632,  632,  633,  634,  635,  636,  637,
      638,  638,  638,  638,  638,  638,  638,  638,  638,  639,
      639,  639,  639,  639,  639,  639,  639,  639,  640,  641,
      641,  643,  643,  645,  645,  645,  645,  645,  645,  645,
      645,  646,  647,  648,  649,  650,  651,  652,  654,  656,

      657,  658,  659,  660,  661,  662,  663,  665,  666,  668,
      668,  668,  668,  668,  668,  668,  668,  668,  668,  668,
      668,  668,  668,  668,  668,  668,  668,  668,  668,  668,
      668,  668,  668,  668,  668,  668,  668,  668,  669,  670,
      670,  670,  670,  670,  670,  670,  670,  670,  670,  670,
      670,  670,  670,  670,  671,  672,  673,  674,  675,  676,
      678,  680,  681,  682,  683,  684,  685,  686,  687,  689,
      690,  692,  692,  692,  692,  693,  694,  695,  696,  697,
      697,  697,  697,  697,  697,  697,  697,  697,  697,  697,
      697,  697,  697,  697,  698,  699,  700,  701,  702,  703,

      705,  707,  708,  709,  710,  711,  712,  713,  714,  716,
      717,  717,  717,  717,  717,  717,  717,  717,  717,  717,
      717,  717,  717,  717,  717,  717,  717,  717,  717,  717,
      717,  717,  717,  717,  718,  719,  720,  720,  720,  720,
      720,  720,  720,  720,  720,  721,  721,  721,  721,  722,
      723,  725,  726,  727,  729,  730,  731,  732,  733,  734,
      735,  736,  738,  739,  740,  742,  743,  744,  745,  746,
      747,  748,  749,  750,  751,  751,  751,  751,  751,  751,
      751,  751,  751,  751,  751,  751,  751,  751,  751,  751,
      751,  751,  752,  752,  752,  752,  752,  752,  752,  753,

      754,  756,  757,  758,  760,  761,  762,  763,  764,  765,
      766,  767,  769,  770,  771,  773,  774,  775,  776,  777,
      778,  779,  780,  781,  782,  782,  782,  782,  782,  782,
      782,  783,  784,  786,  787,  788,  790,  791,  792,  793,
      794,  795,  796,  797,  799,  800,  801,  802,  803,  803,
      803,  803,  803,  803,  803,  804,  804,  804,  804,  804,
      804,  804,  804,  804,  804,  804,  804,  804,  804,  804,
      804,  805,  806,  808,  810,  811,  812,  813,  814,  815,
      816,  817,  818,  819,  821,  822,  823,  824,  825,  826,
      827,  828,  828,  828,  828,  828,  828,  828,  828,  829,

      830,  831,  833,  835,  836,  837,  838,  839,  840,  841,
      842,  843,  844,  846,  848,  850,  851,  852,  853,  854,
      855,  856,  857,  858,  859,  860,  862,  864,  865,  866,
      867,  868,  869,  870,  871,  872,  873,  875,  876,  877,
      877,  877,  877,  877,  877,  877,  877,  877,  877,  877,
      878,  879,  881,  882,  883,  884,  886,  888,  890,  892,
      893,  894,  895,  895,  895,  896,  897,  899,  900,  901,
      902,  904,  906,  908,  910,  912,  913,  914,  915,  916,
      917,  919,  920,  921,  922,  924,  926,  928,  930,  930,
      930,  930,  931,  932,  933,  934,  935,  936,  938,  939,

      940,  941,  942,  943,  945,  946,  947,  948,  949,  950,
      951,  952,  954,  955,  957,  958,  959,  961,  962,  964,
      965,  966,  968,  969,  971,  972,  974,  975,  977,  979,
      980,  982,  984,  985,  987,  988,  989,  990,  992,  994,
      996,  996
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        2,    2,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    5,    6,    5,    7,    8,    9,   10,   11,
       12,   13,   14,   15,   16,   17,   18,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   20,   21,   22,
       23,   24,    5,   25,    5,    5,    5,   26,   27,   28,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,   29,    5,    5,    5,    5,    5,    5,
       30,   31,   32,   33,    5,    1,   34,   35,   36,   37,

       38,   39,   40,   41,   42,    5,   43,   44,   45,   46,
       47,    5,    5,   48,   49,   50,   51,    5,   52,    5,
       53,    5,   54,   55,   56,   57,    1,   58,   58,   58,
       58,   58,   58,   58,   58,   58,   58,   58,   58,   58,
       58,   58,   58,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   60,
       60,   60,   60,   60,   60,   60,   60,   60,   60,   60,
       60,   60,   60,   60,   60,   60,   60,   60,   60,   60,
       60,   60,   60,   60,   60,   60,   61,   60,   60,   60,
       62,    1,    1,   63,   63,   63,   63,   63,   63,   63,

       63,   63,   63,   63,   63,   63,   63,   63,   63,   63,
       63,   63,   63,   63,   63,   63,   63,   63,   63,   63,
       63,   63,   63,   64,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   66,   67,   68,   69,
       70,   70,   70,   71,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const YY_CHAR yy_meta[72] =
    {   0,
        1,    2,    3,    4,    5,    6,    5,    7,    1,    8,
        9,    1,   10,    1,   11,    1,   12,   10,   13,    1,
       11,    9,    9,    9,    1,    5,    5,    5,    5,    1,
        1,    1,    1,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    5,    5,    5,    5,    5,    5,    5,    5,
        5
    } ;

static const flex_int16_t yy_base[974] =
    {   0,
        0,   71,  140,  145,  150,  155,  160,  166,  171,  173,
      178,  183,  201,    0,  271,  327,  384,    0, 1244, 4937,
      187,  276,  285,  244, 4937,  253,  428, 1229, 4937, 4937,
     4937,  175, 4937, 4937, 4937,  322,  181,  495, 4937, 4937,
      278,  143,  145,  281, 4937, 1218, 4937, 4937,  315,  318,
      330,  332,  430,  432,  434,  436,  477,  539,  542,  545,
     4937, 1165, 4937,  282,  314,  265,  449,  240,  491,  538,
      428,  543, 1160,  604,  552,  561,  674,  605,  608,  612,
      610,  649,  657,  651,  655,  681,  683,  686,  718,  690,
      457,  702,  467,  711,  716,  604,  721, 1158,    0, 4937,

     1210,  460,  462, 4937,    0, 4937, 1207,  471,  566, 4937,
        0, 4937, 1193, 1172, 1175,    0, 4937, 1182, 4937, 1178,
     4937, 1168,  182, 4937,  782,  554,  785,  762, 4937,  750,
      794, 1154, 4937, 4937, 4937,  596, 1137, 4937, 1114,  817,
      674,    0, 1096, 4937,  730,  360,  659,  695, 4937,  982,
     4937, 4937, 4937,  930, 4937,  787,  779,  668,  793,  521,
      798,  802,  807,  895,    0,  368, 4937,  943, 4937, 4937,
        0, 4937,  272, 4937,    0,    0,    0,    0, 4937,  807,
      816,  860,  569,  863,  866,  904,  868,  906,  908,  932,
      934,  936,  938,  950,  964,  948,  705,  957,  535,  962,

      860,  967,  886,  801, 4937,  914, 4937,  966, 1028,  633,
     1005,  977,  747,  992,  584,  998,  880, 1003,  846,    0,
     1008,  764, 1013,  658, 1018,  935, 1023,  843, 1058, 1060,
     4937, 4937,    0, 4937,  815,  873,  832,  317,  814, 4937,
     4937,    0, 4937, 1048, 1057, 1116,    0, 1136,  884, 1032,
      785, 1042,  697, 1078,  986, 1083,  771,  978, 4937, 4937,
      981, 4937, 1107, 4937, 1130,    0, 1128, 1131, 1133, 1145,
     1136, 1148, 1180, 1183, 1186, 1195, 1198, 1212, 1214, 1218,
     1227, 1241, 1243, 4937, 1156, 1245, 1228, 1238, 1243, 1248,
     1253, 1258, 1263, 1268, 1329, 1277, 1286, 1300,  951, 1305,

      736, 1310, 1314, 1319,  739, 1164, 1362, 1324,  980, 1344,
      784, 1349, 1354, 1359,  700, 1385, 1364, 1045, 1369,  850,
     1374, 1378, 1383,  668, 1418, 1430, 1432, 1435, 1437, 1449,
     1455, 1461, 1464, 1468, 1480, 1484, 1492, 1496, 1499, 1508,
     1523, 1525, 1527, 1531, 1524, 1529, 1534, 1539, 1544, 1549,
     1554, 1559,    0, 4937, 4937, 4937, 4937, 4937,    0, 4937,
     4937, 4937, 4937, 4937,    0, 4937, 4937, 4937,    0, 4937,
      721, 4937, 4937, 4937, 1620, 4937, 4937,  511,  955,  689,
      698,  891, 1599, 1604,  681,  635,  633,  643,    0,  679,
     4937,    0,    0, 1613, 1586, 1132, 1597,  890, 1606, 1610,

     1615,  554, 1615, 1629, 1479, 1634, 1037, 1639, 1643, 1648,
      552, 1683, 1685, 1687, 1690, 1692, 1710, 1715, 1718, 1722,
     1734, 1741, 1746, 1749, 1764, 1766, 1769, 1789, 1773, 1792,
     1796, 1789, 1794, 1799, 1804, 1809, 1814, 1819, 4937,  585,
     1824, 1829, 1834, 1839, 1844, 1849, 1854, 1859, 1864, 1869,
     1874, 1879, 1884, 1889, 4937, 4937, 4937, 4937, 4937, 1132,
     1894, 1600, 1899, 1170, 1904, 1908, 1913,  527, 1913, 1927,
     1776, 1932, 1191, 1937, 1941, 1946,  462, 4937,  538,  485,
     2002,  482, 2067, 1953, 1958, 1964, 1969, 1974, 1979, 1984,
     4937, 2048, 2050, 2052, 2065, 2067, 2090, 2113, 2115, 2117,

     2119, 2121, 2145, 2147, 2149, 2152, 2154, 2161, 2211, 1989,
     1994, 1999, 2281, 2049, 1783, 2062, 1217, 2148, 2225, 2230,
      427, 2291, 2236, 2002, 2241, 1276, 2246, 2250, 2255,  323,
     2260, 2265, 2270, 2275, 2280, 2305, 2310, 4937, 2371, 2316,
     2329, 2338, 2343, 2348, 2353, 2358, 2363, 2368, 2373, 2378,
     2383, 2388, 2393, 2428, 2430, 2432, 2437, 2446, 2455, 2460,
     2462, 2475, 2469, 2487, 2489, 2492, 2494, 2506, 2518, 2520,
     2570, 2584, 2589, 2594,  365,  354,  286,  262,  259, 2599,
     2604, 2609, 2614, 2619, 2624, 2629, 2634, 2639, 2644, 2649,
     2654, 2659, 2664, 2699, 2701, 2703, 2708, 2717, 2726, 2731,

     2733, 2746, 2740, 2758, 2760, 2763, 2765, 2777, 2789, 2791,
     2784, 2789, 2794, 2799, 2804, 2809, 2814, 2819, 2824, 2829,
     2834, 2839, 2844, 2849, 2854, 2859, 2864, 2869, 2874, 2879,
     2884, 2889, 2894, 2524, 1549, 2894, 2908, 2052, 2913, 1279,
     2918, 2772, 2923,  135, 2969, 2931, 2939, 2950, 2974, 2986,
     2988, 2992, 3006, 3011, 3015, 3018, 3023, 3030, 3035, 3048,
     3050, 3053, 3066,    0,    0, 3048, 2065, 3053, 1330, 3059,
     3063, 3068,  125, 3103, 3075, 3085, 3090, 3096, 3101, 3106,
     3111, 3116, 3121, 3126, 3131, 3136, 3141, 3146, 3151, 3156,
     3161, 3222, 3167, 3180, 3189, 3194, 3199, 3204, 3239, 3242,

     3244, 3247, 3251, 3267, 3271, 3274, 3279, 3286, 3291, 3304,
     3306, 3309, 3322, 3355,    0, 3323, 2319, 3328, 1513, 3333,
     3079, 3338,  113, 3324, 3343, 3348, 3355, 3360, 3365, 3370,
     3405, 3408, 3410, 3413, 3417, 3433, 3437, 3440, 3445, 3452,
     3457, 3470, 3472, 3475, 3488, 3484, 3490, 3478, 3492, 3497,
     3502, 3507, 3512, 3517, 3517, 3531, 2323, 3536, 1521, 3541,
     3471, 3546,   94, 3551, 3556, 3561, 3566, 3571, 3576, 3581,
     1739, 3616, 3618, 3620, 3623, 3632, 3635, 3647, 3649, 3655,
     3663, 3667, 3675, 3679, 3661, 3672, 3677, 3682, 3687, 3692,
     3697, 3702, 3707, 3712, 3717, 3722, 3727,    0, 3762, 3790,

     3765, 3767, 3769, 3781, 3785, 3793, 3823, 3797, 3838, 3835,
     3840, 3843, 3858,    0, 2080, 3840, 3845, 3851, 3856, 3861,
     3866, 3871, 3906,    0, 3908, 3910, 3912, 3915, 3924, 3938,
     3940, 3942, 3947, 3967, 3970, 3973, 3976, 1767,    0, 3969,
     3974, 3979, 3984, 3989, 3994, 3999, 4004, 4009, 4014, 4049,
     4051, 4053, 4055, 4057, 4069, 4081, 4084, 4086, 4088, 4081,
     4086, 4091,    0,    0, 4126, 4128, 4130, 4132, 4134, 4146,
     4158, 4161, 4163, 4165, 3344, 4158, 4163, 4168, 4203, 4205,
     4207, 4209, 4211, 4223, 4235, 4238, 4240, 4242, 4235, 4240,
     4245, 1790, 4280, 4282, 4284, 4287, 4289,    0, 4296, 4312,

     4314, 4319, 4327,    0, 4331, 4344, 4339, 4346, 4351,    0,
     4358, 4370, 4374, 4376, 4383, 4389, 4401, 4403, 4407, 4420,
     4415, 4427, 4432, 4434, 4440, 4447, 4452, 4459, 4464, 4466,
     4472, 4478, 4490, 4492, 4495, 4497, 4510, 4522, 4524, 4526,
     4937, 4576, 4589, 4602, 4615, 4628, 4641, 4650, 4659, 4671,
     4678, 4687, 4700, 4713, 4726, 4739, 4752, 4761, 4770, 4783,
     4795, 4803, 4812, 4825, 4836, 4845, 4858, 4867, 4876, 4889,
     4902, 4911, 4923
    } ;

static const flex_int16_t yy_def[974] =
    {   0,
      941,  941,  942,  942,  943,  943,  944,  944,  945,  945,
      946,  946,  941,   13,  947,  947,  941,   17,  941,  941,
      941,  941,  941,  948,  941,  949,  948,  941,  941,  941,
      941,  941,  941,  941,  941,  941,  941,  941,  941,  941,
      941,  941,  941,  941,  941,  941,  941,  941,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
      941,  941,  941,  941,  941,  941,  941,  941,  941,  941,
      941,  941,  941,  950,  951,  952,  951,   77,   77,   77,
       77,   77,   77,   77,   77,   77,   77,   77,   77,  941,
      941,  941,  941,  941,  941,  941,  941,  941,  953,  941,

      941,  941,  941,  941,  954,  941,  941,  941,  941,  941,
      955,  941,  941,  941,  941,  956,  941,  941,  941,  941,
      941,  941,  941,  941,  941,  941,  941,   27,  941,  949,
       27,  941,  941,  941,  941,  941,  941,  941,  941,  941,
      941,   38,  941,  941,  941,  941,  941,  941,  941,  941,
      941,  941,  941,  941,  941,  941,  941,  941,  941,  941,
      941,  941,  941,  941,  957,  941,  941,  941,  941,  941,
      957,  941,  957,  941,  957,  957,  957,  957,  941,  958,
      959,  958,  941,  182,  182,  182,  182,  182,  182,  182,
      182,  182,  182,  182,  182,  941,  941,  941,  941,  941,

      941,  941,  941,  941,  941,  941,  941,  941,  941,  941,
       27,  941,  941,  941,  941,  941,  941,  941,  941,  130,
      941,  941,  941,  941,  941,  941,  941,  941,   27,   27,
      941,  941,  960,  941,  941,  941,  941,   38,  941,  941,
      941,  961,  941,  962,  963,   38,   38,  962,  248,  941,
      941,  941,  941,  941,  941,  941,  941,  941,  941,  941,
      941,  941,  941,  941,  941,  964,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,  941,  941,   27,  941,  941,  941,  941,
      941,  941,  941,  941,  950,  965,  966,  941,  941,  941,

      941,  941,  941,  941,  941,  967,   77,  941,  941,  941,
      941,  941,  941,  941,  941,  952,  941,  941,  941,  941,
      941,  941,  941,  941,   77,   77,   77,   77,   77,   77,
       77,   77,   77,   77,   77,   77,   77,   77,   77,   77,
       77,   77,   77,   77,  941,  941,  941,  941,  941,  941,
      941,  941,  953,  941,  941,  941,  941,  941,  954,  941,
      941,  941,  941,  941,  955,  941,  941,  941,  956,  941,
      941,  941,  941,  941,  941,  941,  941,  941,  941,  941,
      941,  941,   27,   27,  941,  941,  941,  941,  957,  941,
      941,  957,  957,  182,  941,  941,  941,  941,  941,  941,

      941,  941,  959,  941,  941,  941,  941,  941,  941,  941,
      941,  182,  182,  182,  182,  182,  182,  182,  182,  182,
      182,  182,  182,  182,  182,  182,  182,  182,  182,  182,
      182,  941,  941,  941,  941,  941,  941,  941,  941,  941,
      941,  941,  941,  941,  941,  941,  941,  941,  941,  941,
      941,  941,  941,  941,  941,  941,  941,  941,  941,  248,
      941,  941,  941,  941,  941,  941,  941,  941,  963,  941,
      941,  941,  941,  941,  941,  941,  941,  941,   38,  941,
      968,  941,  968,  941,  941,  941,  941,  941,  941,  941,
      941,   27,   27,   27,   27,   27,   27,   27,   27,   27,

       27,   27,   27,   27,   27,   27,   27,   27,  941,  941,
      941,  941,  965,  941,  941,  941,  941,  941,  941,  941,
      941,  966,  941,  941,  941,  941,  941,  941,  941,  941,
      941,  941,  941,  941,  941,  941,  941,  941,  967,  941,
      941,  941,  941,  941,  941,  941,  941,  941,  941,  941,
      941,  941,  941,   77,   77,   77,   77,   77,   77,   77,
       77,   77,   77,   77,   77,   77,   77,   77,   77,   77,
      941,  941,  941,  941,  941,  941,  941,  941,  941,  941,
      941,  941,  941,  941,  941,  941,  941,  941,  941,  941,
      941,  941,  941,  182,  182,  182,  182,  182,  182,  182,

      182,  182,  182,  182,  182,  182,  182,  182,  182,  182,
      941,  941,  941,  941,  941,  941,  941,  941,  941,  941,
      941,  941,  941,  941,  941,  941,  941,  941,  941,  941,
      941,  941,  941,   38,  248,  969,  941,  941,  941,  941,
      941,  941,  941,  941,   38,  941,  941,  941,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,  970,  509,  970,  970,  970,  970,  970,
      970,  970,  970,   27,  941,  941,  941,  941,  941,  941,
      941,  941,  941,  941,  941,  941,  941,  941,  941,  941,
      941,  967,  941,  941,  941,  941,  941,  941,   77,   77,

       77,   77,   77,   77,   77,   77,   77,   77,   77,   77,
       77,   77,   77,  971,  571,  970,  970,  970,  970,  970,
      970,  970,  970,   77,  941,  941,  941,  941,  941,  941,
      182,  182,  182,  182,  182,  182,  182,  182,  182,  182,
      182,  182,  182,  182,  182,  182,   27,  972,  941,  941,
      941,  941,  941,  941,  969,  941,  941,  941,  941,  941,
      941,  941,  941,  941,  941,  941,  941,  941,  941,  941,
      248,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,  970,  970,  970,  970,  970,  970,
      970,  941,  941,  941,  941,  941,  941,  513,   77,  973,

       77,   77,   77,   77,   77,   77,   77,   77,   77,   77,
       77,   77,   77,  970,  971,  970,  970,  970,  970,  970,
      970,  970,  182,  403,  182,  182,  182,  182,  182,  182,
      182,  182,  182,  182,  182,  182,  182,  248,  469,  941,
      941,  941,  941,  941,  941,  941,  941,  941,  941,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,  970,
      970,  970,  513,  522,   77,   77,   77,   77,   77,   77,
       77,   77,   77,   77,  971,  970,  970,  970,  182,  182,
      182,  182,  182,  182,  182,  182,  182,  182,  941,  941,
      941,  248,   27,   27,   27,   27,   27,  509,   77,   77,

       77,   77,   77,  571,  182,  182,  182,  182,  182,  755,
       27,   27,   27,   27,   27,   77,   77,   77,   77,   77,
      182,  182,  182,  182,  182,   27,   27,   27,   77,   77,
       77,  182,  182,  182,   27,   77,  182,   27,   77,  182,
        0,  941,  941,  941,  941,  941,  941,  941,  941,  941,
      941,  941,  941,  941,  941,  941,  941,  941,  941,  941,
      941,  941,  941,  941,  941,  941,  941,  941,  941,  941,
      941,  941,  941
    } ;

static const flex_int16_t yy_nxt[5009] =
    {   0,
       20,   21,   22,   23,   24,   25,   26,   27,   28,   29,
       30,   31,   32,   33,   34,   35,   36,   37,   38,   39,
       40,   41,   42,   43,   44,   24,   24,   24,   24,   45,
       46,   47,   48,   49,   50,   51,   52,   53,   54,   24,
       24,   55,   24,   24,   24,   24,   56,   57,   58,   59,
       24,   60,   24,   61,   62,   63,   64,   20,   20,   20,
       20,   20,   65,   66,   67,   68,   69,   70,   71,   72,
       73,   20,   74,   22,   23,   75,   25,   76,   77,   28,
       29,   30,   31,   32,   33,   34,   35,   36,   37,   38,
       39,   40,   41,   42,   43,   44,   75,   75,   75,   75,

       45,   46,   47,   48,   78,   79,   80,   81,   82,   83,
       75,   75,   84,   75,   75,   75,   75,   85,   86,   87,
       88,   75,   89,   75,   61,   62,   63,   64,   20,   20,
       20,   20,   20,   90,   91,   92,   93,   94,   95,   96,
       97,   98,  100,  101,  261,  102,  263,  100,  101,  103,
      102,  846,  106,  107,  103,  108,  104,  106,  107,  109,
      108,  104,  112,  113,  109,  262,  110,  264,  112,  113,
      822,  110,  114,  117,  118,  117,  118,  115,  114,  120,
      121,  122,  791,  115,  120,  121,  122,  232,  204,  205,
      206,  233,  770,  241,  373,  123,  207,  242,  243,  374,

      123,  124,  125,  126,  127,  128,  129,  130,  131,  132,
      133,  134,  135,  136,  137,  138,  139,  140,  141,  142,
      143,  144,  145,  146,  147,  148,  128,  128,  128,  128,
      149,  150,  151,  152,  128,  128,  128,  128,  128,  128,
      128,  128,  128,  128,  128,  128,  128,  128,  128,  128,
      128,  128,  128,  128,  153,  154,  155,  156,  124,  124,
      124,  124,  124,  157,  158,  159,  160,  161,  161,  162,
      163,  164,  166,  167,  168,  579,  169,  208,  578,  258,
      170,  171,  265,  285,  392,  172,  208,  210,  173,  393,
      209,  174,  175,  176,  177,  178,  209,  289,  289,  209,

      259,  260,  577,  260,  260,  209,  212,  213,  214,  215,
      216,  216,  217,  218,  219,  221,  222,  223,  224,  225,
      225,  226,  227,  228,  287,  287,  287,  178,  166,  167,
      168,  234,  169,  941,  235,  238,  170,  171,  236,  237,
      238,  172,  211,  211,  173,  211,  211,  174,  175,  176,
      177,  178,  239,  211,  240,  576,  211,  211,  211,  211,
      211,  261,  267,  269,  211,  268,  575,  211,  211,  390,
      211,  286,  286,  286,  286,  286,  270,  207,  271,  211,
      688,  211,  262,  178,  179,  179,  179,  179,  180,  179,
      181,  182,  179,  179,  179,  179,  179,  179,  179,  179,

      179,  183,  179,  179,  179,  179,  179,  179,  179,  180,
      180,  180,  180,  179,  179,  179,  179,  184,  185,  186,
      187,  188,  189,  180,  180,  190,  180,  180,  180,  180,
      191,  192,  193,  194,  180,  195,  180,  179,  179,  179,
      179,  179,  179,  179,  179,  179,  196,  197,  198,  199,
      200,  200,  201,  202,  203,  229,  230,  211,  211,  211,
      211,  211,  211,  211,  211,  355,  229,  357,  211,  356,
      211,  358,  276,  272,  211,  273,  361,  230,  274,  211,
      362,  211,  275,  211,  681,  277,  292,  292,  292,  292,
      212,  213,  214,  215,  216,  216,  217,  218,  219,  244,

      645,  245,  244,  634,  211,  211,  288,  288,  288,  288,
      288,  246,  575,  247,  278,  211,  345,  345,  345,  633,
      248,  249,  244,  244,  347,  347,  211,  385,  244,  244,
      244,  248,  249,  244,  244,  244,  244,  244,  244,  244,
      244,  244,  244,  244,  244,  244,  244,  244,  290,  290,
      290,  290,  290,  306,  941,  208,  479,  250,  251,  252,
      253,  254,  254,  255,  256,  257,  211,  211,  209,  211,
      211,  363,  211,  211,  209,  364,  279,  211,  289,  289,
      211,  241,  281,  211,  626,  283,  243,  439,  211,  282,
      280,  211,  434,  434,  211,  290,  290,  290,  291,  290,

      293,  293,  293,  293,  293,  295,  205,  206,  232,  593,
      297,  586,  233,  207,  308,  309,  310,  311,  312,  312,
      313,  314,  315,  317,  318,  319,  320,  321,  321,  322,
      323,  324,  307,  307,  208,  307,  307,  307,  307,  307,
      307,  443,  443,  307,  388,  329,  307,  209,  307,  387,
      307,  579,  327,  209,  307,  328,  331,  307,  330,  307,
      263,  307,  350,  350,  350,  350,  298,  299,  300,  301,
      302,  302,  303,  304,  305,  306,  307,  307,  307,  307,
      390,  264,  307,  307,  307,  307,  241,  307,  207,  336,
      242,  243,  332,  307,  333,  307,  265,  578,  307,  388,

      307,  325,  326,  334,  337,  577,  307,  335,  307,  307,
      307,  307,  325,  307,  307,  450,  450,  260,  338,  307,
      339,  307,  371,  326,  307,  553,  341,  287,  287,  287,
      307,  258,  307,  342,  340,  307,  308,  309,  310,  311,
      312,  312,  313,  314,  315,  307,  307,  344,  344,  344,
      344,  344,  259,  260,  486,  486,  307,  546,  343,  346,
      346,  346,  346,  346,  432,  432,  432,  307,  348,  348,
      348,  348,  348,  348,  348,  348,  349,  348,  351,  351,
      351,  351,  351,  375,  205,  206,  208,  382,  285,  211,
      211,  376,  377,  533,  533,  378,  537,  379,  380,  209,

      211,  381,  204,  205,  206,  209,  441,  441,  441,  260,
      207,  211,  221,  222,  223,  224,  225,  225,  226,  227,
      228,  383,  384,  448,  448,  448,  234,  240,  490,  235,
      458,  456,  383,  387,  237,  238,  286,  286,  286,  286,
      286,  542,  542,  384,  484,  484,  484,  239,  457,  240,
      288,  288,  288,  288,  288,  290,  290,  290,  290,  290,
      292,  292,  292,  292,  293,  293,  293,  293,  293,  395,
      396,  397,  398,  399,  399,  400,  401,  402,  404,  405,
      406,  407,  408,  408,  409,  410,  411,  412,  413,  236,
      394,  394,  208,  394,  394,  394,  394,  482,  412,  482,

      454,  394,  483,  447,  394,  209,  394,  549,  549,  413,
      414,  209,  394,  415,  418,  394,  205,  394,  436,  436,
      436,  436,  395,  396,  397,  398,  399,  399,  400,  401,
      402,  394,  394,  394,  394,  394,  394,  416,  445,  445,
      445,  445,  394,  438,  394,  391,  394,  582,  582,  419,
      417,  420,  294,  394,  421,  394,  576,  394,  422,  394,
      394,  394,  394,  394,  394,  394,  394,  208,  439,  440,
      423,  386,  394,  425,  394,  426,  394,  394,  394,  258,
      209,  394,  261,  424,  284,  394,  209,  394,  394,  427,
      428,  394,  394,  452,  452,  452,  452,  429,  266,  394,

      259,  260,  394,  262,  430,  431,  431,  431,  431,  431,
      531,  531,  531,  394,  433,  433,  433,  433,  433,  435,
      435,  435,  435,  435,  437,  437,  437,  437,  437,  208,
      439,  440,  211,  211,  211,  211,  211,  211,  211,  540,
      540,  540,  209,  211,  488,  488,  488,  488,  209,  442,
      442,  442,  442,  442,  211,  444,  444,  444,  444,  444,
      446,  446,  446,  446,  446,  220,  220,  220,  220,  220,
      449,  449,  449,  449,  449,  451,  451,  451,  451,  451,
      453,  453,  453,  453,  453,  211,  211,  211,  211,  244,
      244,  244,  244,  244,  589,  589,  211,  388,  211,  485,

      485,  485,  485,  485,  547,  547,  547,  211,  263,  211,
      461,  462,  463,  464,  465,  465,  466,  467,  468,  470,
      471,  472,  473,  474,  474,  475,  476,  477,  478,  264,
      386,  265,  941,  478,  479,  487,  487,  487,  487,  487,
      489,  489,  489,  489,  489,  941,  478,  941,  478,  480,
      460,  480,  260,  385,  481,  211,  211,  285,  211,  211,
      211,  211,  231,  211,  211,  306,  211,  492,  493,  211,
      372,  211,  211,  211,  211,  211,  211,  211,  260,  371,
      211,  494,  495,  211,  370,  211,  211,  368,  539,  367,
      496,  580,  580,  580,  211,  366,  497,  211,  461,  462,

      463,  464,  465,  465,  466,  467,  468,  211,  211,  360,
      211,  211,  354,  211,  211,  352,  498,  294,  211,  284,
      539,  211,  211,  211,  211,  211,  211,  622,  622,  211,
      499,  500,  211,  211,  266,  211,  211,  231,  501,  211,
      211,  211,  211,  941,  211,  211,  211,  211,  629,  629,
      211,  941,  211,  941,  211,  211,  211,  504,  941,  505,
      502,  503,  941,  211,  506,  211,  941,  211,  211,  211,
      211,  211,  211,  211,  677,  677,  211,  941,  306,  211,
      941,  211,  941,  211,  508,  286,  286,  286,  286,  286,
      211,  941,  211,  507,  211,  286,  286,  286,  286,  286,

      286,  286,  286,  286,  286,  286,  286,  286,  286,  286,
      286,  286,  286,  286,  509,  510,  510,  510,  510,  510,
      511,  511,  511,  511,  511,  512,  512,  512,  512,  512,
      295,  205,  206,  684,  684,  297,  766,  766,  207,  514,
      515,  516,  517,  518,  518,  519,  520,  521,  523,  524,
      525,  526,  527,  527,  528,  529,  530,  296,  296,  296,
      296,  296,  532,  532,  532,  532,  532,  534,  534,  534,
      534,  534,  535,  535,  535,  535,  536,  536,  536,  536,
      536,  307,  307,  307,  307,  307,  306,  787,  787,  307,
      307,  298,  299,  300,  301,  302,  302,  303,  304,  305,

      307,  541,  541,  541,  541,  541,  543,  543,  543,  543,
      543,  307,  544,  544,  544,  544,  545,  545,  545,  545,
      545,  316,  316,  316,  316,  316,  548,  548,  548,  548,
      548,  550,  550,  550,  550,  550,  551,  551,  551,  551,
      552,  552,  552,  552,  552,  307,  307,  317,  318,  319,
      320,  321,  321,  322,  323,  324,  307,  307,  307,  307,
      307,  941,  307,  307,  307,  307,  941,  307,  307,  941,
      307,  554,  555,  307,  941,  307,  307,  307,  941,  307,
      941,  307,  307,  307,  307,  556,  557,  307,  307,  307,
      941,  307,  307,  307,  558,  307,  307,  941,  307,  307,

      560,  941,  307,  941,  307,  941,  307,  307,  307,  559,
      307,  307,  307,  307,  941,  561,  941,  307,  307,  307,
      307,  941,  307,  307,  307,  562,  307,  307,  941,  307,
      307,  941,  563,  307,  307,  307,  307,  307,  587,  587,
      587,  307,  566,  941,  564,  565,  307,  941,  307,  567,
      307,  307,  307,  307,  307,  307,  941,  307,  307,  307,
      568,  307,  941,  307,  941,  307,  941,  460,  570,  307,
      818,  818,  307,  941,  307,  941,  307,  569,  842,  842,
      307,  344,  344,  344,  344,  344,  344,  344,  344,  344,
      344,  344,  344,  344,  344,  344,  344,  344,  344,  344,

      344,  344,  344,  344,  344,  571,  572,  572,  572,  572,
      572,  573,  573,  573,  573,  573,  574,  574,  574,  574,
      574,  375,  205,  206,  941,  941,  211,  211,  941,  376,
      377,  211,  211,  378,  941,  379,  380,  211,  941,  381,
      394,  394,  211,  394,  394,  394,  394,  394,  211,  941,
      941,  394,  941,  211,  581,  581,  581,  581,  581,  620,
      620,  620,  394,  583,  583,  583,  583,  583,  584,  584,
      584,  584,  585,  585,  585,  585,  585,  404,  405,  406,
      407,  408,  408,  409,  410,  411,  403,  403,  403,  403,
      403,  588,  588,  588,  588,  588,  590,  590,  590,  590,

      590,  591,  591,  591,  591,  592,  592,  592,  592,  592,
      394,  394,  394,  394,  394,  394,  941,  394,  394,  394,
      394,  394,  941,  394,  941,  394,  594,  595,  394,  941,
      394,  941,  394,  941,  394,  941,  394,  394,  394,  394,
      596,  597,  394,  394,  941,  394,  394,  941,  394,  394,
      394,  941,  941,  394,  941,  598,  394,  460,  600,  394,
      394,  394,  394,  941,  394,  941,  599,  394,  394,  394,
      941,  394,  394,  394,  394,  941,  394,  394,  941,  394,
      941,  601,  941,  394,  394,  460,  602,  394,  941,  603,
      394,  394,  394,  394,  394,  394,  394,  394,  394,  941,

      394,  394,  394,  941,  394,  941,  941,  394,  460,  606,
      607,  394,  604,  605,  941,  394,  394,  394,  394,  394,
      394,  941,  394,  394,  394,  609,  608,  394,  941,  941,
      394,  941,  941,  610,  394,  627,  627,  627,  394,  941,
      941,  394,  675,  675,  675,  394,  431,  431,  431,  431,
      431,  431,  431,  431,  431,  431,  431,  431,  431,  431,
      431,  431,  431,  431,  431,  431,  611,  611,  611,  611,
      611,  612,  612,  612,  612,  612,  613,  613,  613,  613,
      613,  211,  211,  211,  211,  211,  211,  211,  211,  211,
      211,  211,  211,  211,  211,  211,  211,  211,  211,  211,

      211,  614,  614,  614,  614,  614,  615,  615,  615,  615,
      615,  616,  616,  616,  616,  616,  220,  220,  220,  220,
      220,  220,  220,  220,  220,  220,  220,  220,  220,  220,
      220,  220,  220,  220,  220,  220,  617,  617,  617,  617,
      617,  618,  618,  618,  618,  618,  619,  619,  619,  619,
      619,  460,  460,  460,  460,  460,  621,  621,  621,  621,
      621,  623,  623,  623,  623,  623,  624,  624,  624,  624,
      625,  625,  625,  625,  625,  470,  471,  472,  473,  474,
      474,  475,  476,  477,  469,  469,  469,  469,  469,  628,
      628,  628,  628,  628,  630,  630,  630,  630,  630,  631,

      631,  631,  631,  632,  632,  632,  632,  632,  636,  244,
      244,  244,  244,  244,  244,  244,  244,  244,  244,  244,
      481,  244,  244,  244,  244,  244,  244,  244,  244,  244,
      244,  646,  646,  646,  646,  646,  647,  647,  647,  647,
      647,  648,  648,  648,  648,  648,  674,  674,  674,  674,
      674,  674,  674,  674,  674,  674,  674,  674,  674,  674,
      674,  682,  682,  682,  637,  638,  639,  640,  641,  641,
      642,  643,  644,  636,  244,  211,  211,  211,  211,  211,
      211,  875,  538,  650,  941,  483,  211,  941,  211,  651,
      211,  941,  211,  211,  211,  211,  941,  211,  649,  211,

      652,  211,  664,  211,  941,  211,  513,  513,  513,  513,
      513,  764,  764,  764,  211,  941,  653,  211,  211,  676,
      676,  676,  676,  676,  785,  785,  785,  654,  211,  637,
      638,  639,  640,  641,  641,  642,  643,  644,  941,  211,
      211,  211,  211,  211,  211,  211,  211,  211,  211,  211,
      941,  655,  656,  211,  941,  211,  657,  211,  941,  211,
      941,  941,  211,  941,  211,  941,  211,  941,  211,  941,
      211,  658,  211,  211,  211,  211,  211,  211,  941,  211,
      211,  211,  211,  211,  660,  211,  941,  211,  211,  211,
      211,  941,  211,  941,  211,  659,  211,  662,  661,  211,

      941,  211,  941,  211,  663,  678,  678,  678,  678,  678,
      211,  664,  664,  941,  664,  665,  664,  665,  664,  664,
      664,  664,  664,  664,  664,  664,  664,  664,  664,  665,
      664,  664,  664,  664,  664,  664,  665,  665,  665,  665,
      664,  664,  664,  664,  665,  665,  665,  665,  665,  665,
      665,  665,  665,  665,  665,  665,  665,  665,  665,  665,
      665,  665,  665,  665,  664,  664,  664,  664,  664,  664,
      664,  664,  664,  666,  667,  668,  669,  670,  670,  671,
      672,  673,  306,  679,  679,  679,  679,  680,  680,  680,
      680,  680,  306,  522,  522,  522,  522,  522,  683,  683,

      683,  683,  683,  685,  685,  685,  685,  685,  686,  686,
      686,  686,  687,  687,  687,  687,  687,  296,  296,  296,
      296,  296,  296,  296,  296,  296,  296,  296,  296,  296,
      296,  296,  296,  296,  296,  296,  296,  689,  689,  689,
      689,  689,  941,  514,  515,  516,  517,  518,  518,  519,
      520,  521,  941,  523,  524,  525,  526,  527,  527,  528,
      529,  530,  690,  690,  690,  690,  690,  691,  691,  691,
      691,  691,  692,  307,  307,  307,  307,  307,  816,  816,
      816,  538,  840,  840,  840,  538,  307,  307,  307,  307,
      307,  538,  538,  941,  538,  307,  307,  307,  307,  307,

      307,  307,  307,  307,  307,  693,  693,  693,  693,  693,
      694,  694,  694,  694,  694,  695,  695,  695,  695,  695,
      316,  316,  316,  316,  316,  316,  316,  316,  316,  316,
      316,  316,  316,  316,  316,  316,  316,  316,  316,  316,
      696,  696,  696,  696,  696,  697,  697,  697,  697,  697,
      698,  698,  698,  698,  698,  307,  307,  307,  307,  307,
      307,  941,  941,  700,  307,  307,  307,  941,  307,  701,
      307,  941,  702,  307,  307,  307,  941,  307,  699,  307,
      941,  307,  307,  307,  307,  941,  307,  307,  307,  307,
      307,  941,  704,  307,  941,  703,  307,  307,  705,  941,

      307,  941,  307,  307,  307,  941,  707,  307,  941,  307,
      706,  307,  941,  307,  307,  307,  307,  307,  307,  307,
      307,  307,  307,  941,  307,  307,  941,  307,  941,  710,
      307,  941,  307,  307,  307,  941,  307,  708,  307,  709,
      941,  307,  634,  711,  307,  307,  307,  307,  307,  244,
      244,  712,  941,  941,  941,  307,  307,  941,  307,  941,
      244,  244,  941,  713,  941,  941,  941,  307,  941,  307,
      664,  714,  941,  664,  715,  664,  715,  664,  664,  664,
      664,  664,  664,  664,  664,  664,  664,  664,  715,  664,
      664,  664,  664,  664,  664,  715,  715,  715,  715,  664,

      664,  664,  664,  715,  715,  715,  715,  715,  715,  715,
      715,  715,  715,  715,  715,  715,  715,  715,  715,  715,
      715,  715,  715,  664,  664,  664,  664,  664,  664,  664,
      664,  664,  716,  717,  718,  719,  720,  720,  721,  722,
      723,  724,  724,  724,  724,  724,  724,  724,  724,  724,
      724,  724,  724,  724,  724,  724,  394,  394,  394,  394,
      394,  394,  394,  394,  394,  394,  394,  394,  394,  394,
      394,  394,  394,  394,  394,  394,  725,  725,  725,  725,
      725,  726,  726,  726,  726,  726,  727,  727,  727,  727,
      727,  403,  403,  403,  403,  403,  403,  403,  403,  403,

      403,  403,  403,  403,  403,  403,  403,  403,  403,  403,
      403,  728,  728,  728,  728,  728,  729,  729,  729,  729,
      729,  730,  730,  730,  730,  730,  394,  394,  394,  394,
      394,  394,  941,  941,  732,  394,  394,  394,  941,  394,
      733,  394,  941,  734,  394,  394,  394,  941,  394,  731,
      394,  941,  394,  394,  394,  394,  941,  394,  394,  394,
      394,  394,  941,  736,  394,  941,  735,  394,  394,  737,
      941,  394,  941,  394,  394,  394,  941,  739,  394,  941,
      394,  738,  394,  941,  394,  394,  394,  394,  394,  394,
      394,  394,  394,  394,  941,  394,  394,  941,  394,  941,

      742,  394,  941,  394,  394,  394,  941,  394,  740,  394,
      741,  941,  394,  941,  743,  394,  394,  394,  394,  394,
      941,  941,  744,  941,  941,  941,  394,  394,  941,  394,
      768,  768,  768,  768,  745,  941,  941,  941,  394,  941,
      394,  746,  746,  746,  746,  746,  746,  746,  746,  746,
      746,  746,  746,  746,  746,  746,  747,  747,  747,  747,
      747,  747,  747,  747,  747,  747,  747,  747,  747,  747,
      747,  748,  748,  748,  748,  748,  748,  748,  748,  748,
      748,  748,  748,  748,  748,  748,  460,  460,  460,  460,
      460,  460,  460,  460,  460,  460,  460,  460,  460,  460,

      460,  460,  460,  460,  460,  460,  749,  749,  749,  749,
      749,  750,  750,  750,  750,  750,  751,  751,  751,  751,
      751,  469,  469,  469,  469,  469,  469,  469,  469,  469,
      469,  469,  469,  469,  469,  469,  469,  469,  469,  469,
      469,  752,  752,  752,  752,  752,  753,  753,  753,  753,
      753,  754,  754,  754,  754,  754,  756,  757,  758,  759,
      760,  760,  761,  762,  763,  635,  635,  635,  635,  635,
      765,  765,  765,  765,  765,  767,  767,  767,  767,  767,
      769,  769,  769,  769,  769,  941,  941,  645,  771,  771,
      771,  771,  771,  941,  244,  244,  771,  771,  771,  771,

      771,  211,  211,  941,  941,  244,  244,  771,  771,  771,
      771,  771,  211,  211,  211,  211,  211,  941,  772,  211,
      211,  941,  941,  211,  211,  941,  211,  941,  773,  941,
      211,  941,  774,  211,  211,  211,  941,  211,  211,  211,
      941,  211,  211,  211,  211,  211,  211,  775,  941,  211,
      211,  211,  776,  211,  941,  211,  211,  211,  211,  941,
      211,  211,  211,  211,  211,  777,  941,  778,  211,  941,
      779,  941,  211,  211,  780,  211,  211,  211,  211,  211,
      211,  211,  781,  782,  211,  783,  211,  941,  211,  941,
      941,  211,  941,  211,  211,  941,  941,  211,  941,  211,

      941,  941,  211,  784,  211,  665,  665,  665,  665,  665,
      786,  786,  786,  786,  786,  211,  788,  788,  788,  788,
      788,  789,  789,  789,  789,  790,  790,  790,  790,  790,
      211,  211,  513,  513,  513,  513,  513,  820,  820,  820,
      820,  211,  513,  513,  513,  513,  513,  513,  513,  513,
      513,  513,  211,  513,  513,  513,  513,  513,  792,  792,
      792,  792,  792,  793,  793,  793,  793,  793,  794,  794,
      794,  794,  794,  522,  522,  522,  522,  522,  522,  522,
      522,  522,  522,  522,  522,  522,  522,  522,  522,  522,
      522,  522,  522,  795,  795,  795,  795,  795,  796,  796,

      796,  796,  796,  797,  797,  797,  797,  797,  798,  798,
      798,  798,  798,  798,  798,  798,  798,  798,  798,  798,
      798,  798,  798,  692,  799,  799,  799,  799,  799,  941,
      941,  941,  538,  941,  941,  941,  538,  799,  799,  799,
      799,  799,  538,  538,  941,  538,  799,  799,  799,  799,
      799,  800,  800,  800,  800,  800,  800,  800,  800,  800,
      800,  800,  800,  800,  800,  800,  307,  307,  941,  307,
      307,  307,  307,  941,  307,  307,  941,  307,  307,  307,
      307,  941,  307,  801,  802,  307,  941,  803,  307,  307,
      941,  307,  804,  307,  307,  307,  307,  941,  307,  307,

      307,  307,  307,  941,  941,  307,  307,  307,  805,  307,
      941,  941,  307,  307,  307,  941,  307,  307,  307,  307,
      307,  806,  941,  807,  307,  941,  808,  941,  307,  307,
      809,  307,  307,  307,  307,  307,  307,  307,  810,  811,
      307,  812,  307,  941,  307,  875,  538,  307,  941,  307,
      307,  307,  307,  307,  941,  307,  714,  538,  307,  813,
      307,  941,  307,  941,  941,  664,  664,  941,  941,  664,
      941,  307,  941,  307,  941,  664,  664,  664,  664,  815,
      715,  715,  715,  715,  715,  817,  817,  817,  817,  817,
      819,  819,  819,  819,  819,  821,  821,  821,  821,  821,

      823,  823,  823,  823,  823,  823,  823,  823,  823,  823,
      941,  815,  823,  823,  823,  823,  823,  824,  824,  824,
      824,  824,  824,  824,  824,  824,  824,  824,  824,  824,
      824,  824,  394,  394,  941,  394,  394,  394,  394,  941,
      394,  394,  941,  394,  394,  394,  394,  941,  394,  825,
      826,  394,  941,  827,  394,  394,  941,  394,  828,  394,
      394,  394,  394,  941,  394,  394,  394,  394,  394,  941,
      941,  394,  394,  394,  829,  394,  941,  941,  394,  394,
      394,  941,  394,  394,  394,  394,  394,  830,  941,  831,
      394,  941,  832,  941,  394,  394,  833,  394,  394,  394,

      394,  394,  394,  394,  834,  835,  394,  836,  394,  941,
      394,  394,  394,  394,  941,  394,  394,  211,  211,  394,
      941,  394,  394,  941,  394,  837,  394,  941,  211,  844,
      844,  844,  844,  394,  941,  941,  941,  394,  941,  211,
      221,  222,  223,  224,  225,  225,  226,  227,  228,  838,
      838,  838,  838,  838,  838,  838,  838,  838,  838,  838,
      838,  838,  838,  838,  839,  839,  839,  839,  839,  839,
      839,  839,  839,  839,  839,  839,  839,  839,  839,  756,
      757,  758,  759,  760,  760,  761,  762,  763,  755,  755,
      755,  755,  755,  841,  841,  841,  841,  841,  843,  843,

      843,  843,  843,  845,  845,  845,  845,  845,  635,  635,
      635,  635,  635,  635,  635,  635,  635,  635,  635,  635,
      635,  635,  635,  635,  635,  635,  635,  635,  847,  847,
      847,  847,  847,  848,  848,  848,  848,  848,  849,  849,
      849,  849,  849,  211,  211,  211,  211,  211,  211,  941,
      211,  211,  941,  850,  211,  941,  211,  941,  211,  211,
      211,  211,  211,  211,  941,  211,  941,  211,  851,  211,
      852,  941,  211,  211,  211,  211,  211,  211,  941,  941,
      853,  211,  211,  211,  211,  211,  941,  211,  854,  941,
      211,  211,  856,  211,  211,  211,  211,  941,  211,  941,

      855,  211,  211,  211,  211,  211,  211,  211,  857,  941,
      941,  941,  211,  211,  941,  859,  858,  211,  665,  665,
      665,  665,  665,  941,  211,  941,  941,  941,  211,  665,
      665,  665,  665,  665,  665,  665,  665,  665,  665,  665,
      665,  665,  665,  665,  860,  860,  860,  860,  860,  861,
      861,  861,  861,  861,  862,  862,  862,  862,  862,  863,
      863,  863,  863,  863,  863,  863,  863,  863,  863,  863,
      863,  863,  863,  863,  864,  864,  864,  864,  864,  864,
      864,  864,  864,  864,  864,  864,  864,  864,  864,  307,
      307,  306,  307,  307,  307,  307,  307,  307,  941,  941,

      307,  941,  865,  307,  941,  307,  941,  307,  307,  307,
      941,  307,  307,  307,  307,  941,  307,  941,  307,  307,
      307,  307,  941,  867,  307,  307,  866,  941,  941,  941,
      307,  307,  941,  941,  307,  307,  941,  941,  868,  941,
      941,  941,  307,  941,  941,  941,  307,  941,  870,  941,
      307,  307,  317,  318,  319,  320,  321,  321,  322,  323,
      324,  307,  307,  307,  869,  307,  307,  307,  307,  941,
      307,  307,  307,  307,  941,  871,  307,  941,  307,  941,
      872,  307,  941,  874,  307,  307,  307,  307,  941,  873,
      941,  941,  307,  941,  941,  941,  307,  715,  715,  715,

      715,  715,  715,  715,  715,  715,  715,  307,  715,  715,
      715,  715,  715,  715,  715,  715,  715,  715,  876,  876,
      876,  876,  876,  877,  877,  877,  877,  877,  878,  878,
      878,  878,  878,  394,  394,  394,  394,  394,  394,  394,
      394,  941,  394,  394,  394,  879,  394,  941,  394,  941,
      394,  394,  394,  394,  941,  394,  941,  394,  941,  394,
      880,  394,  881,  941,  394,  394,  394,  394,  394,  394,
      394,  941,  941,  394,  394,  394,  394,  941,  394,  941,
      394,  883,  941,  882,  885,  394,  941,  394,  941,  394,
      941,  394,  941,  884,  394,  394,  394,  394,  394,  941,

      394,  394,  941,  394,  394,  394,  941,  941,  394,  941,
      941,  394,  886,  888,  394,  941,  394,  941,  941,  887,
      941,  941,  394,  941,  941,  394,  755,  755,  755,  755,
      755,  755,  755,  755,  755,  755,  755,  755,  755,  755,
      755,  755,  755,  755,  755,  755,  889,  889,  889,  889,
      889,  890,  890,  890,  890,  890,  891,  891,  891,  891,
      891,  892,  892,  892,  892,  892,  892,  892,  892,  892,
      892,  892,  892,  892,  892,  892,  211,  211,  211,  211,
      211,  211,  211,  211,  211,  211,  941,  211,  941,  211,
      895,  211,  941,  211,  893,  211,  211,  211,  211,  941,

      211,  894,  211,  896,  211,  941,  211,  211,  211,  211,
      897,  211,  211,  211,  211,  211,  211,  941,  211,  211,
      941,  941,  211,  941,  211,  941,  211,  941,  941,  941,
      211,  941,  941,  211,  941,  211,  941,  211,  898,  898,
      898,  898,  898,  898,  898,  898,  898,  898,  898,  898,
      898,  898,  898,  307,  307,  307,  307,  307,  307,  307,
      307,  307,  307,  941,  307,  941,  307,  901,  307,  941,
      307,  899,  307,  307,  307,  307,  941,  307,  900,  307,
      902,  307,  941,  307,  307,  307,  307,  903,  307,  307,
      307,  307,  307,  307,  941,  307,  307,  941,  941,  307,

      941,  307,  941,  307,  941,  941,  941,  307,  941,  941,
      307,  941,  307,  941,  307,  904,  904,  904,  904,  904,
      904,  904,  904,  904,  904,  904,  904,  904,  904,  904,
      394,  394,  394,  394,  394,  394,  394,  394,  394,  394,
      941,  394,  941,  394,  907,  394,  941,  394,  905,  394,
      394,  394,  394,  941,  394,  906,  394,  908,  394,  941,
      394,  394,  394,  394,  909,  394,  394,  394,  394,  394,
      394,  941,  394,  394,  941,  941,  394,  941,  394,  941,
      394,  941,  941,  941,  394,  941,  941,  394,  941,  394,
      941,  394,  910,  910,  910,  910,  910,  910,  910,  910,

      910,  910,  910,  910,  910,  910,  910,  211,  211,  211,
      211,  211,  211,  941,  211,  211,  211,  211,  211,  912,
      211,  941,  211,  307,  307,  211,  941,  211,  941,  911,
      941,  211,  914,  913,  307,  941,  211,  915,  211,  307,
      307,  307,  307,  941,  941,  916,  307,  307,  941,  917,
      307,  941,  307,  941,  307,  307,  941,  307,  394,  394,
      941,  307,  941,  918,  919,  307,  394,  394,  307,  394,
      941,  394,  394,  394,  394,  920,  307,  394,  394,  394,
      921,  922,  394,  941,  394,  211,  211,  941,  923,  394,
      941,  924,  941,  394,  941,  394,  211,  211,  211,  925,

      394,  211,  211,  211,  211,  941,  926,  211,  211,  941,
      211,  211,  211,  941,  211,  927,  307,  307,  941,  211,
      928,  211,  941,  211,  941,  211,  941,  307,  307,  307,
      307,  307,  211,  941,  307,  307,  941,  929,  307,  307,
      941,  307,  394,  394,  930,  307,  941,  307,  307,  941,
      307,  941,  307,  394,  394,  394,  307,  931,  307,  394,
      394,  394,  394,  932,  394,  394,  941,  394,  394,  307,
      394,  941,  394,  933,  211,  211,  394,  934,  394,  211,
      211,  394,  941,  394,  941,  211,  211,  211,  941,  394,
      211,  307,  307,  307,  307,  941,  211,  211,  935,  307,

      307,  211,  307,  941,  307,  394,  394,  941,  211,  941,
      307,  941,  936,  307,  941,  307,  394,  394,  394,  394,
      394,  307,  211,  211,  307,  307,  941,  394,  394,  941,
      394,  941,  941,  211,  941,  307,  937,  394,  394,  394,
      938,  394,  939,  941,  211,  941,  307,  941,  394,  211,
      211,  307,  307,  394,  394,  940,  941,  941,  941,  394,
      211,  941,  307,  941,  394,  941,  941,  941,  941,  941,
      941,  211,  941,  307,  941,  394,   99,   99,   99,   99,
       99,   99,   99,   99,   99,   99,   99,   99,   99,  105,
      105,  105,  105,  105,  105,  105,  105,  105,  105,  105,

      105,  105,  111,  111,  111,  111,  111,  111,  111,  111,
      111,  111,  111,  111,  111,  116,  116,  116,  116,  116,
      116,  116,  116,  116,  116,  116,  116,  116,  119,  119,
      119,  119,  119,  119,  119,  119,  119,  119,  119,  119,
      119,  165,  165,  165,  165,  165,  165,  165,  165,  165,
      165,  165,  165,  165,  211,  941,  941,  941,  941,  941,
      941,  941,  211,  220,  941,  941,  941,  941,  941,  941,
      941,  220,  296,  296,  296,  296,  941,  296,  296,  307,
      941,  941,  307,  941,  941,  941,  941,  941,  941,  941,
      307,  316,  941,  941,  941,  941,  941,  941,  941,  316,

      353,  353,  941,  941,  353,  941,  353,  941,  353,  353,
      353,  941,  353,  359,  359,  941,  941,  359,  941,  359,
      941,  359,  359,  359,  941,  359,  365,  365,  941,  941,
      365,  365,  365,  365,  365,  941,  365,  365,  365,  369,
      369,  941,  941,  369,  369,  369,  369,  369,  369,  369,
      369,  369,  389,  941,  941,  941,  389,  941,  389,  941,
      389,  389,  941,  389,  389,  394,  941,  941,  941,  941,
      941,  941,  941,  394,  403,  941,  941,  941,  941,  941,
      941,  941,  403,  455,  455,  455,  455,  455,  455,  455,
      455,  455,  455,  455,  455,  459,  459,  459,  459,  459,

      459,  459,  459,  459,  459,  459,  459,  460,  941,  941,
      941,  941,  941,  941,  941,  460,  469,  941,  941,  941,
      941,  941,  941,  941,  469,  491,  491,  491,  491,  491,
      491,  491,  491,  491,  491,  491,  491,  513,  941,  941,
      513,  941,  941,  941,  941,  941,  941,  941,  513,  522,
      941,  941,  941,  941,  941,  941,  941,  522,  538,  538,
      538,  538,  538,  538,  538,  538,  941,  538,  941,  538,
      538,  635,  941,  635,  941,  941,  941,  941,  941,  635,
      755,  941,  941,  941,  941,  941,  941,  941,  755,  664,
      664,  941,  664,  664,  664,  664,  664,  664,  664,  664,

      664,  664,  814,  814,  814,  814,  814,  814,  814,  814,
      814,  814,  814,  814,  814,  220,  941,  941,  941,  941,
      941,  941,  941,  220,  316,  941,  941,  316,  941,  941,
      941,  941,  941,  941,  941,  316,   19,  941,  941,  941,
      941,  941,  941,  941,  941,  941,  941,  941,  941,  941,
      941,  941,  941,  941,  941,  941,  941,  941,  941,  941,
      941,  941,  941,  941,  941,  941,  941,  941,  941,  941,
      941,  941,  941,  941,  941,  941,  941,  941,  941,  941,
      941,  941,  941,  941,  941,  941,  941,  941,  941,  941,
      941,  941,  941,  941,  941,  941,  941,  941,  941,  941,

      941,  941,  941,  941,  941,  941,  941,  941
    } ;

static const flex_int16_t yy_chk[5009] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    3,    3,   42,    3,   43,    4,    4,    3,
        4,  763,    5,    5,    4,    5,    3,    6,    6,    5,
        6,    4,    7,    7,    6,   42,    5,   43,    8,    8,
      723,    6,    7,    9,    9,   10,   10,    7,    8,   11,
       11,   11,  673,    8,   12,   12,   12,   32,   21,   21,
       21,   32,  644,   37,  123,   11,   21,   37,   37,  123,

       12,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   15,   15,   15,  579,   15,   22,  578,   41,
       15,   15,   44,   64,  173,   15,   23,   23,   15,  173,
       22,   15,   15,   15,   15,   15,   22,   68,   68,   23,

       41,   41,  577,   44,   64,   23,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   66,   66,   66,   15,   16,   16,
       16,   36,   16,  238,   36,  238,   16,   16,   36,   36,
       36,   16,   49,   49,   16,   50,   50,   16,   16,   16,
       16,   16,   36,   49,   36,  576,   50,   51,   51,   52,
       52,  146,   49,   51,   49,   50,  575,   50,   51,  166,
       52,   65,   65,   65,   65,   65,   51,  166,   52,   51,
      530,   52,  146,   16,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,

       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   27,   27,   53,   53,   54,
       54,   55,   55,   56,   56,  102,   27,  103,   53,  102,
       54,  103,   55,   53,   56,   53,  108,   27,   54,   53,
      108,   54,   54,   55,  521,   56,   71,   71,   71,   71,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   38,

      482,   38,   38,  480,   57,   57,   67,   67,   67,   67,
       67,   38,  378,   38,   57,   57,   91,   91,   91,  477,
       38,   38,   38,   38,   93,   93,   57,  378,   38,   38,
       38,   38,   38,   38,   38,   38,   38,   38,   38,   38,
       38,   38,   38,   38,   38,   38,   38,   38,   69,   69,
       69,   69,   69,   75,  479,  126,  479,   38,   38,   38,
       38,   38,   38,   38,   38,   38,   58,   58,  126,   59,
       59,  109,   60,   60,  126,  109,   58,   58,  160,  160,
       59,  183,   59,   60,  468,   60,  183,  440,   58,   59,
       58,   59,  199,  199,   60,   70,   70,   70,   70,   70,

       72,   72,   72,   72,   72,   74,   74,   74,  136,  411,
       74,  402,  136,   74,   75,   75,   75,   75,   75,   75,
       75,   75,   75,   76,   76,   76,   76,   76,   76,   76,
       76,   76,   78,   78,  210,   79,   79,   81,   81,   80,
       80,  215,  215,   78,  388,   80,   79,  210,   81,  387,
       80,  386,   78,  210,   78,   79,   81,   79,   80,   81,
      147,   80,   96,   96,   96,   96,   74,   74,   74,   74,
       74,   74,   74,   74,   74,   77,   82,   82,   84,   84,
      390,  147,   85,   85,   83,   83,  141,   82,  390,   84,
      141,  141,   82,   85,   82,   83,  148,  385,   82,  381,

       84,   77,   77,   83,   85,  380,   83,   83,   86,   86,
       87,   87,   77,   88,   88,  224,  224,  148,   86,   86,
       87,   87,  371,   77,   88,  324,   88,  158,  158,  158,
       86,  145,   87,   88,   87,   88,   77,   77,   77,   77,
       77,   77,   77,   77,   77,   89,   89,   90,   90,   90,
       90,   90,  145,  145,  253,  253,   89,  315,   89,   92,
       92,   92,   92,   92,  197,  197,  197,   89,   94,   94,
       94,   94,   94,   95,   95,   95,   95,   95,   97,   97,
       97,   97,   97,  125,  125,  125,  127,  127,  156,  128,
      128,  125,  125,  301,  301,  125,  305,  125,  125,  127,

      128,  125,  204,  204,  204,  127,  213,  213,  213,  156,
      204,  128,  130,  130,  130,  130,  130,  130,  130,  130,
      130,  131,  131,  222,  222,  222,  140,  235,  257,  140,
      239,  235,  131,  140,  140,  140,  157,  157,  157,  157,
      157,  311,  311,  131,  251,  251,  251,  140,  237,  140,
      159,  159,  159,  159,  159,  161,  161,  161,  161,  161,
      162,  162,  162,  162,  163,  163,  163,  163,  163,  180,
      180,  180,  180,  180,  180,  180,  180,  180,  181,  181,
      181,  181,  181,  181,  181,  181,  181,  182,  182,  236,
      184,  184,  382,  185,  185,  187,  187,  249,  182,  249,

      228,  184,  249,  219,  185,  382,  187,  320,  320,  182,
      184,  382,  184,  185,  187,  185,  206,  187,  201,  201,
      201,  201,  182,  182,  182,  182,  182,  182,  182,  182,
      182,  186,  186,  188,  188,  189,  189,  186,  217,  217,
      217,  217,  186,  203,  188,  168,  189,  398,  398,  188,
      186,  188,  164,  186,  189,  188,  379,  189,  189,  190,
      190,  191,  191,  192,  192,  193,  193,  208,  208,  208,
      190,  379,  191,  192,  192,  193,  193,  194,  194,  258,
      208,  190,  261,  191,  154,  192,  208,  193,  194,  193,
      194,  195,  195,  226,  226,  226,  226,  194,  150,  194,

      258,  258,  195,  261,  195,  196,  196,  196,  196,  196,
      299,  299,  299,  195,  198,  198,  198,  198,  198,  200,
      200,  200,  200,  200,  202,  202,  202,  202,  202,  209,
      209,  209,  211,  211,  212,  212,  212,  212,  212,  309,
      309,  309,  209,  211,  255,  255,  255,  255,  209,  214,
      214,  214,  214,  214,  211,  216,  216,  216,  216,  216,
      218,  218,  218,  218,  218,  221,  221,  221,  221,  221,
      223,  223,  223,  223,  223,  225,  225,  225,  225,  225,
      227,  227,  227,  227,  227,  229,  229,  230,  230,  250,
      250,  250,  250,  250,  407,  407,  229,  143,  230,  252,

      252,  252,  252,  252,  318,  318,  318,  229,  263,  230,
      244,  244,  244,  244,  244,  244,  244,  244,  244,  245,
      245,  245,  245,  245,  245,  245,  245,  245,  246,  263,
      139,  265,  246,  246,  246,  254,  254,  254,  254,  254,
      256,  256,  256,  256,  256,  460,  246,  460,  246,  248,
      460,  248,  265,  137,  248,  267,  267,  285,  268,  268,
      269,  269,  132,  271,  271,  306,  267,  267,  268,  268,
      122,  269,  270,  270,  271,  272,  272,  267,  285,  120,
      268,  269,  269,  270,  118,  271,  272,  115,  306,  114,
      270,  396,  396,  396,  270,  113,  272,  272,  248,  248,

      248,  248,  248,  248,  248,  248,  248,  273,  273,  107,
      274,  274,  101,  275,  275,   98,  273,   73,  273,   62,
      306,  274,  276,  276,  275,  277,  277,  464,  464,  273,
      274,  275,  274,  276,   46,  275,  277,   28,  277,  278,
      278,  279,  279,   19,  276,  280,  280,  277,  473,  473,
      278,    0,  279,    0,  281,  281,  280,  279,    0,  280,
      278,  278,    0,  279,  281,  281,    0,  280,  282,  282,
      283,  283,  286,  286,  517,  517,  281,    0,  296,  282,
        0,  283,    0,  286,  283,  287,  287,  287,  287,  287,
      282,    0,  283,  282,  286,  288,  288,  288,  288,  288,

      289,  289,  289,  289,  289,  290,  290,  290,  290,  290,
      291,  291,  291,  291,  291,  292,  292,  292,  292,  292,
      293,  293,  293,  293,  293,  294,  294,  294,  294,  294,
      295,  295,  295,  526,  526,  295,  640,  640,  295,  296,
      296,  296,  296,  296,  296,  296,  296,  296,  297,  297,
      297,  297,  297,  297,  297,  297,  297,  298,  298,  298,
      298,  298,  300,  300,  300,  300,  300,  302,  302,  302,
      302,  302,  303,  303,  303,  303,  304,  304,  304,  304,
      304,  308,  308,  308,  308,  308,  316,  669,  669,  307,
      307,  295,  295,  295,  295,  295,  295,  295,  295,  295,

      307,  310,  310,  310,  310,  310,  312,  312,  312,  312,
      312,  307,  313,  313,  313,  313,  314,  314,  314,  314,
      314,  317,  317,  317,  317,  317,  319,  319,  319,  319,
      319,  321,  321,  321,  321,  321,  322,  322,  322,  322,
      323,  323,  323,  323,  323,  325,  325,  316,  316,  316,
      316,  316,  316,  316,  316,  316,  325,  326,  326,  327,
      327,    0,  328,  328,  329,  329,    0,  325,  326,    0,
      327,  327,  328,  328,    0,  329,  330,  330,    0,  326,
        0,  327,  331,  331,  328,  329,  329,  330,  332,  332,
        0,  333,  333,  331,  330,  334,  334,    0,  330,  332,

      333,    0,  333,    0,  331,    0,  334,  335,  335,  332,
      332,  336,  336,  333,    0,  334,    0,  334,  335,  337,
      337,    0,  336,  338,  338,  335,  339,  339,    0,  335,
      337,    0,  337,  336,  338,  340,  340,  339,  405,  405,
      405,  337,  339,    0,  338,  338,  340,    0,  339,  340,
      341,  341,  342,  342,  343,  343,    0,  340,  344,  344,
      341,  341,  635,  342,  635,  343,    0,  635,  343,  344,
      719,  719,  341,    0,  342,    0,  343,  342,  759,  759,
      344,  345,  345,  345,  345,  345,  346,  346,  346,  346,
      346,  347,  347,  347,  347,  347,  348,  348,  348,  348,

      348,  349,  349,  349,  349,  349,  350,  350,  350,  350,
      350,  351,  351,  351,  351,  351,  352,  352,  352,  352,
      352,  375,  375,  375,    0,    0,  383,  383,    0,  375,
      375,  384,  384,  375,    0,  375,  375,  383,    0,  375,
      394,  394,  384,  395,  395,  395,  395,  395,  383,    0,
        0,  394,    0,  384,  397,  397,  397,  397,  397,  462,
      462,  462,  394,  399,  399,  399,  399,  399,  400,  400,
      400,  400,  401,  401,  401,  401,  401,  403,  403,  403,
      403,  403,  403,  403,  403,  403,  404,  404,  404,  404,
      404,  406,  406,  406,  406,  406,  408,  408,  408,  408,

      408,  409,  409,  409,  409,  410,  410,  410,  410,  410,
      412,  412,  413,  413,  414,  414,    0,  415,  415,  416,
      416,  412,    0,  413,    0,  414,  414,  415,  415,    0,
      416,    0,  412,    0,  413,    0,  414,  417,  417,  415,
      416,  416,  418,  418,    0,  419,  419,    0,  417,  420,
      420,    0,  771,  418,  771,  417,  419,  771,  420,  417,
      420,  421,  421,    0,  418,    0,  419,  419,  422,  422,
        0,  420,  421,  423,  423,    0,  424,  424,    0,  422,
      838,  421,  838,  421,  423,  838,  422,  424,    0,  424,
      422,  425,  425,  426,  426,  423,  427,  427,  424,    0,

      429,  429,  425,  892,  426,  892,    0,  427,  892,  426,
      427,  429,  425,  425,    0,  426,  428,  428,  427,  430,
      430,    0,  429,  431,  431,  429,  428,  428,    0,    0,
      430,    0,    0,  430,  431,  471,  471,  471,  428,    0,
        0,  430,  515,  515,  515,  431,  432,  432,  432,  432,
      432,  433,  433,  433,  433,  433,  434,  434,  434,  434,
      434,  435,  435,  435,  435,  435,  436,  436,  436,  436,
      436,  437,  437,  437,  437,  437,  438,  438,  438,  438,
      438,  441,  441,  441,  441,  441,  442,  442,  442,  442,
      442,  443,  443,  443,  443,  443,  444,  444,  444,  444,

      444,  445,  445,  445,  445,  445,  446,  446,  446,  446,
      446,  447,  447,  447,  447,  447,  448,  448,  448,  448,
      448,  449,  449,  449,  449,  449,  450,  450,  450,  450,
      450,  451,  451,  451,  451,  451,  452,  452,  452,  452,
      452,  453,  453,  453,  453,  453,  454,  454,  454,  454,
      454,  461,  461,  461,  461,  461,  463,  463,  463,  463,
      463,  465,  465,  465,  465,  465,  466,  466,  466,  466,
      467,  467,  467,  467,  467,  469,  469,  469,  469,  469,
      469,  469,  469,  469,  470,  470,  470,  470,  470,  472,
      472,  472,  472,  472,  474,  474,  474,  474,  474,  475,

      475,  475,  475,  476,  476,  476,  476,  476,  481,  481,
      484,  484,  484,  484,  484,  485,  485,  485,  485,  485,
      481,  486,  486,  486,  486,  486,  487,  487,  487,  487,
      487,  488,  488,  488,  488,  488,  489,  489,  489,  489,
      489,  490,  490,  490,  490,  490,  510,  510,  510,  510,
      510,  511,  511,  511,  511,  511,  512,  512,  512,  512,
      512,  524,  524,  524,  481,  481,  481,  481,  481,  481,
      481,  481,  481,  483,  483,  492,  492,  493,  493,  494,
      494,  815,  815,  493,    0,  483,  492,    0,  493,  494,
      494,    0,  495,  495,  496,  496,    0,  492,  492,  493,

      495,  494,  815,  495,    0,  496,  514,  514,  514,  514,
      514,  638,  638,  638,  495,    0,  496,  497,  497,  516,
      516,  516,  516,  516,  667,  667,  667,  497,  497,  483,
      483,  483,  483,  483,  483,  483,  483,  483,    0,  497,
      498,  498,  499,  499,  500,  500,  501,  501,  502,  502,
        0,  498,  500,  499,    0,  500,  501,  501,    0,  502,
        0,    0,  498,    0,  499,    0,  500,    0,  501,    0,
      502,  502,  503,  503,  504,  504,  505,  505,    0,  506,
      506,  507,  507,  503,  504,  504,    0,  505,  508,  508,
      506,    0,  507,    0,  503,  503,  504,  506,  505,  508,

        0,  506,    0,  507,  508,  518,  518,  518,  518,  518,
      508,  509,  509,    0,  509,  509,  509,  509,  509,  509,
      509,  509,  509,  509,  509,  509,  509,  509,  509,  509,
      509,  509,  509,  509,  509,  509,  509,  509,  509,  509,
      509,  509,  509,  509,  509,  509,  509,  509,  509,  509,
      509,  509,  509,  509,  509,  509,  509,  509,  509,  509,
      509,  509,  509,  509,  509,  509,  509,  509,  509,  509,
      509,  509,  509,  509,  509,  509,  509,  509,  509,  509,
      509,  509,  513,  519,  519,  519,  519,  520,  520,  520,
      520,  520,  522,  523,  523,  523,  523,  523,  525,  525,

      525,  525,  525,  527,  527,  527,  527,  527,  528,  528,
      528,  528,  529,  529,  529,  529,  529,  531,  531,  531,
      531,  531,  532,  532,  532,  532,  532,  533,  533,  533,
      533,  533,  534,  534,  534,  534,  534,  535,  535,  535,
      535,  535,    0,  513,  513,  513,  513,  513,  513,  513,
      513,  513,    0,  522,  522,  522,  522,  522,  522,  522,
      522,  522,  536,  536,  536,  536,  536,  537,  537,  537,
      537,  537,  539,  540,  540,  540,  540,  540,  717,  717,
      717,  539,  757,  757,  757,  539,  541,  541,  541,  541,
      541,  539,  539,    0,  539,  542,  542,  542,  542,  542,

      543,  543,  543,  543,  543,  544,  544,  544,  544,  544,
      545,  545,  545,  545,  545,  546,  546,  546,  546,  546,
      547,  547,  547,  547,  547,  548,  548,  548,  548,  548,
      549,  549,  549,  549,  549,  550,  550,  550,  550,  550,
      551,  551,  551,  551,  551,  552,  552,  552,  552,  552,
      553,  553,  553,  553,  553,  554,  554,  555,  555,  556,
      556,    0,    0,  555,  557,  557,  554,    0,  555,  556,
      556,    0,  557,  558,  558,  557,    0,  554,  554,  555,
        0,  556,  559,  559,  558,    0,  557,  560,  560,  561,
      561,    0,  559,  559,    0,  558,  563,  563,  560,    0,

      561,    0,  562,  562,  559,    0,  563,  563,    0,  560,
      562,  561,    0,  562,  564,  564,  565,  565,  563,  566,
      566,  567,  567,    0,  562,  564,    0,  565,    0,  566,
      566,    0,  567,  568,  568,    0,  564,  564,  565,  565,
      634,  566,  634,  567,  568,  569,  569,  570,  570,  634,
      634,  568,    0,    0,    0,  568,  569,    0,  570,    0,
      634,  634,    0,  570,    0,    0,    0,  569,    0,  570,
      571,  571,    0,  571,  571,  571,  571,  571,  571,  571,
      571,  571,  571,  571,  571,  571,  571,  571,  571,  571,
      571,  571,  571,  571,  571,  571,  571,  571,  571,  571,

      571,  571,  571,  571,  571,  571,  571,  571,  571,  571,
      571,  571,  571,  571,  571,  571,  571,  571,  571,  571,
      571,  571,  571,  571,  571,  571,  571,  571,  571,  571,
      571,  571,  571,  571,  571,  571,  571,  571,  571,  571,
      571,  572,  572,  572,  572,  572,  573,  573,  573,  573,
      573,  574,  574,  574,  574,  574,  580,  580,  580,  580,
      580,  581,  581,  581,  581,  581,  582,  582,  582,  582,
      582,  583,  583,  583,  583,  583,  584,  584,  584,  584,
      584,  585,  585,  585,  585,  585,  586,  586,  586,  586,
      586,  587,  587,  587,  587,  587,  588,  588,  588,  588,

      588,  589,  589,  589,  589,  589,  590,  590,  590,  590,
      590,  591,  591,  591,  591,  591,  592,  592,  592,  592,
      592,  593,  593,  593,  593,  593,  594,  594,  595,  595,
      596,  596,    0,    0,  595,  597,  597,  594,    0,  595,
      596,  596,    0,  597,  598,  598,  597,    0,  594,  594,
      595,    0,  596,  599,  599,  598,    0,  597,  600,  600,
      601,  601,    0,  599,  599,    0,  598,  603,  603,  600,
        0,  601,    0,  602,  602,  599,    0,  603,  603,    0,
      600,  602,  601,    0,  602,  604,  604,  605,  605,  603,
      606,  606,  607,  607,    0,  602,  604,    0,  605,    0,

      606,  606,    0,  607,  608,  608,    0,  604,  604,  605,
      605,    0,  606,    0,  607,  608,  609,  609,  610,  610,
        0,    0,  608,    0,    0,    0,  608,  609,    0,  610,
      642,  642,  642,  642,  610,    0,    0,    0,  609,    0,
      610,  611,  611,  611,  611,  611,  612,  612,  612,  612,
      612,  613,  613,  613,  613,  613,  614,  614,  614,  614,
      614,  615,  615,  615,  615,  615,  616,  616,  616,  616,
      616,  617,  617,  617,  617,  617,  618,  618,  618,  618,
      618,  619,  619,  619,  619,  619,  620,  620,  620,  620,
      620,  621,  621,  621,  621,  621,  622,  622,  622,  622,

      622,  623,  623,  623,  623,  623,  624,  624,  624,  624,
      624,  625,  625,  625,  625,  625,  626,  626,  626,  626,
      626,  627,  627,  627,  627,  627,  628,  628,  628,  628,
      628,  629,  629,  629,  629,  629,  630,  630,  630,  630,
      630,  631,  631,  631,  631,  631,  632,  632,  632,  632,
      632,  633,  633,  633,  633,  633,  636,  636,  636,  636,
      636,  636,  636,  636,  636,  637,  637,  637,  637,  637,
      639,  639,  639,  639,  639,  641,  641,  641,  641,  641,
      643,  643,  643,  643,  643,  645,    0,  645,  646,  646,
      646,  646,  646,    0,  645,  645,  647,  647,  647,  647,

      647,  649,  649,    0,    0,  645,  645,  648,  648,  648,
      648,  648,  649,  650,  650,  651,  651,    0,  649,  652,
      652,    0,    0,  649,  650,    0,  651,    0,  650,    0,
      652,    0,  652,  653,  653,  650,    0,  651,  654,  654,
        0,  652,  655,  655,  653,  656,  656,  653,    0,  654,
      657,  657,  654,  655,    0,  653,  656,  658,  658,    0,
      654,  657,  659,  659,  655,  655,    0,  656,  658,    0,
      657,    0,  657,  659,  658,  660,  660,  661,  661,  658,
      662,  662,  659,  660,  659,  661,  660,    0,  661,    0,
        0,  662,    0,  663,  663,    0,    0,  660,    0,  661,

        0,    0,  662,  663,  663,  666,  666,  666,  666,  666,
      668,  668,  668,  668,  668,  663,  670,  670,  670,  670,
      670,  671,  671,  671,  671,  672,  672,  672,  672,  672,
      674,  674,  675,  675,  675,  675,  675,  721,  721,  721,
      721,  674,  676,  676,  676,  676,  676,  677,  677,  677,
      677,  677,  674,  678,  678,  678,  678,  678,  679,  679,
      679,  679,  679,  680,  680,  680,  680,  680,  681,  681,
      681,  681,  681,  682,  682,  682,  682,  682,  683,  683,
      683,  683,  683,  684,  684,  684,  684,  684,  685,  685,
      685,  685,  685,  686,  686,  686,  686,  686,  687,  687,

      687,  687,  687,  688,  688,  688,  688,  688,  689,  689,
      689,  689,  689,  690,  690,  690,  690,  690,  691,  691,
      691,  691,  691,  692,  693,  693,  693,  693,  693,    0,
        0,    0,  692,    0,    0,    0,  692,  694,  694,  694,
      694,  694,  692,  692,    0,  692,  695,  695,  695,  695,
      695,  696,  696,  696,  696,  696,  697,  697,  697,  697,
      697,  698,  698,  698,  698,  698,  699,  699,    0,  700,
      700,  701,  701,    0,  702,  702,    0,  699,  703,  703,
      700,    0,  701,  699,  700,  702,    0,  702,  699,  703,
        0,  700,  703,  701,  704,  704,  702,    0,  705,  705,

      703,  706,  706,    0,    0,  704,  707,  707,  704,  705,
        0,    0,  706,  708,  708,    0,  704,  707,  709,  709,
      705,  705,    0,  706,  708,    0,  707,    0,  707,  709,
      708,  710,  710,  711,  711,  708,  712,  712,  709,  710,
      709,  711,  710,    0,  711,  875,  875,  712,    0,  713,
      713,  724,  724,  710,    0,  711,  714,  714,  712,  713,
      713,    0,  724,    0,    0,  714,  875,    0,    0,  714,
        0,  713,    0,  724,    0,  714,  714,  714,  714,  714,
      716,  716,  716,  716,  716,  718,  718,  718,  718,  718,
      720,  720,  720,  720,  720,  722,  722,  722,  722,  722,

      725,  725,  725,  725,  725,  726,  726,  726,  726,  726,
        0,  714,  727,  727,  727,  727,  727,  728,  728,  728,
      728,  728,  729,  729,  729,  729,  729,  730,  730,  730,
      730,  730,  731,  731,    0,  732,  732,  733,  733,    0,
      734,  734,    0,  731,  735,  735,  732,    0,  733,  731,
      732,  734,    0,  734,  731,  735,    0,  732,  735,  733,
      736,  736,  734,    0,  737,  737,  735,  738,  738,    0,
        0,  736,  739,  739,  736,  737,    0,    0,  738,  740,
      740,    0,  736,  739,  741,  741,  737,  737,    0,  738,
      740,    0,  739,    0,  739,  741,  740,  742,  742,  743,

      743,  740,  744,  744,  741,  742,  741,  743,  742,    0,
      743,  746,  746,  744,    0,  745,  745,  747,  747,  742,
        0,  743,  746,    0,  744,  745,  745,    0,  747,  761,
      761,  761,  761,  746,    0,    0,    0,  745,    0,  747,
      748,  748,  748,  748,  748,  748,  748,  748,  748,  749,
      749,  749,  749,  749,  750,  750,  750,  750,  750,  751,
      751,  751,  751,  751,  752,  752,  752,  752,  752,  753,
      753,  753,  753,  753,  754,  754,  754,  754,  754,  755,
      755,  755,  755,  755,  755,  755,  755,  755,  756,  756,
      756,  756,  756,  758,  758,  758,  758,  758,  760,  760,

      760,  760,  760,  762,  762,  762,  762,  762,  764,  764,
      764,  764,  764,  765,  765,  765,  765,  765,  766,  766,
      766,  766,  766,  767,  767,  767,  767,  767,  768,  768,
      768,  768,  768,  769,  769,  769,  769,  769,  770,  770,
      770,  770,  770,  772,  772,  773,  773,  774,  774,    0,
      775,  775,    0,  772,  772,    0,  773,    0,  774,  776,
      776,  775,  777,  777,    0,  772,    0,  773,  775,  774,
      776,    0,  775,  777,  778,  778,  779,  779,    0,    0,
      777,  776,  780,  780,  777,  778,    0,  779,  778,    0,
      781,  781,  780,  780,  782,  782,  778,    0,  779,    0,

      779,  781,  783,  783,  780,  782,  784,  784,  781,    0,
        0,    0,  781,  783,    0,  783,  782,  784,  785,  785,
      785,  785,  785,    0,  783,    0,    0,    0,  784,  786,
      786,  786,  786,  786,  787,  787,  787,  787,  787,  788,
      788,  788,  788,  788,  789,  789,  789,  789,  789,  790,
      790,  790,  790,  790,  791,  791,  791,  791,  791,  792,
      792,  792,  792,  792,  793,  793,  793,  793,  793,  794,
      794,  794,  794,  794,  795,  795,  795,  795,  795,  796,
      796,  796,  796,  796,  797,  797,  797,  797,  797,  799,
      799,  800,  801,  801,  802,  802,  803,  803,    0,    0,

      799,    0,  801,  801,    0,  802,    0,  803,  804,  804,
        0,  799,  805,  805,  801,    0,  802,    0,  803,  804,
      806,  806,    0,  805,  808,  808,  804,    0,    0,    0,
      804,  806,    0,    0,  805,  808,    0,    0,  806,    0,
        0,    0,  806,    0,    0,    0,  808,    0,  808,    0,
      807,  807,  800,  800,  800,  800,  800,  800,  800,  800,
      800,  807,  810,  810,  807,  809,  809,  811,  811,    0,
      812,  812,  807,  810,    0,  809,  809,    0,  811,    0,
      810,  812,    0,  812,  810,  813,  813,  809,    0,  811,
        0,    0,  812,    0,    0,    0,  813,  816,  816,  816,

      816,  816,  817,  817,  817,  817,  817,  813,  818,  818,
      818,  818,  818,  819,  819,  819,  819,  819,  820,  820,
      820,  820,  820,  821,  821,  821,  821,  821,  822,  822,
      822,  822,  822,  823,  823,  825,  825,  826,  826,  827,
      827,    0,  828,  828,  823,  825,  825,    0,  826,    0,
      827,  829,  829,  828,    0,  823,    0,  825,    0,  826,
      828,  827,  829,    0,  828,  830,  830,  831,  831,  832,
      832,    0,    0,  829,  833,  833,  830,    0,  831,    0,
      832,  831,    0,  830,  833,  833,    0,  830,    0,  831,
        0,  832,    0,  832,  834,  834,  833,  835,  835,    0,

      836,  836,    0,  837,  837,  834,    0,    0,  835,    0,
        0,  836,  834,  836,  837,    0,  834,    0,    0,  835,
        0,    0,  836,    0,    0,  837,  840,  840,  840,  840,
      840,  841,  841,  841,  841,  841,  842,  842,  842,  842,
      842,  843,  843,  843,  843,  843,  844,  844,  844,  844,
      844,  845,  845,  845,  845,  845,  846,  846,  846,  846,
      846,  847,  847,  847,  847,  847,  848,  848,  848,  848,
      848,  849,  849,  849,  849,  849,  850,  850,  851,  851,
      852,  852,  853,  853,  854,  854,    0,  850,    0,  851,
      853,  852,    0,  853,  850,  854,  855,  855,  850,    0,

      851,  851,  852,  854,  853,    0,  854,  855,  856,  856,
      855,  857,  857,  858,  858,  859,  859,    0,  855,  856,
        0,    0,  857,    0,  858,    0,  859,    0,    0,    0,
      856,    0,    0,  857,    0,  858,    0,  859,  860,  860,
      860,  860,  860,  861,  861,  861,  861,  861,  862,  862,
      862,  862,  862,  865,  865,  866,  866,  867,  867,  868,
      868,  869,  869,    0,  865,    0,  866,  868,  867,    0,
      868,  865,  869,  870,  870,  865,    0,  866,  866,  867,
      869,  868,    0,  869,  870,  871,  871,  870,  872,  872,
      873,  873,  874,  874,    0,  870,  871,    0,    0,  872,

        0,  873,    0,  874,    0,    0,    0,  871,    0,    0,
      872,    0,  873,    0,  874,  876,  876,  876,  876,  876,
      877,  877,  877,  877,  877,  878,  878,  878,  878,  878,
      879,  879,  880,  880,  881,  881,  882,  882,  883,  883,
        0,  879,    0,  880,  882,  881,    0,  882,  879,  883,
      884,  884,  879,    0,  880,  880,  881,  883,  882,    0,
      883,  884,  885,  885,  884,  886,  886,  887,  887,  888,
      888,    0,  884,  885,    0,    0,  886,    0,  887,    0,
      888,    0,    0,    0,  885,    0,    0,  886,    0,  887,
        0,  888,  889,  889,  889,  889,  889,  890,  890,  890,

      890,  890,  891,  891,  891,  891,  891,  893,  893,  894,
      894,  895,  895,    0,  896,  896,  897,  897,  893,  894,
      894,    0,  895,  899,  899,  896,    0,  897,    0,  893,
        0,  894,  896,  895,  899,    0,  896,  897,  897,  900,
      900,  901,  901,    0,    0,  899,  902,  902,    0,  900,
      900,    0,  901,    0,  903,  903,    0,  902,  905,  905,
        0,  900,    0,  901,  902,  903,  907,  907,  902,  905,
        0,  906,  906,  908,  908,  903,  903,  907,  909,  909,
      905,  906,  906,    0,  908,  911,  911,    0,  907,  909,
        0,  908,    0,  906,    0,  908,  911,  912,  912,  909,

      909,  913,  913,  914,  914,    0,  911,  911,  912,    0,
      915,  915,  913,    0,  914,  913,  916,  916,    0,  912,
      915,  915,    0,  913,    0,  914,    0,  916,  917,  917,
      918,  918,  915,    0,  919,  919,    0,  916,  916,  917,
        0,  918,  921,  921,  918,  919,    0,  920,  920,    0,
      917,    0,  918,  921,  922,  922,  919,  920,  920,  923,
      923,  924,  924,  921,  921,  922,    0,  925,  925,  920,
      923,    0,  924,  923,  926,  926,  922,  925,  925,  927,
      927,  923,    0,  924,    0,  926,  928,  928,    0,  925,
      927,  929,  929,  930,  930,    0,  926,  928,  927,  931,

      931,  927,  929,    0,  930,  932,  932,    0,  928,    0,
      931,    0,  930,  929,    0,  930,  932,  933,  933,  934,
      934,  931,  935,  935,  936,  936,    0,  932,  933,    0,
      934,    0,    0,  935,    0,  936,  933,  937,  937,  933,
      935,  934,  936,    0,  935,    0,  936,    0,  937,  938,
      938,  939,  939,  940,  940,  937,    0,    0,    0,  937,
      938,    0,  939,    0,  940,    0,    0,    0,    0,    0,
        0,  938,    0,  939,    0,  940,  942,  942,  942,  942,
      942,  942,  942,  942,  942,  942,  942,  942,  942,  943,
      943,  943,  943,  943,  943,  943,  943,  943,  943,  943,

      943,  943,  944,  944,  944,  944,  944,  944,  944,  944,
      944,  944,  944,  944,  944,  945,  945,  945,  945,  945,
      945,  945,  945,  945,  945,  945,  945,  945,  946,  946,
      946,  946,  946,  946,  946,  946,  946,  946,  946,  946,
      946,  947,  947,  947,  947,  947,  947,  947,  947,  947,
      947,  947,  947,  947,  948,    0,    0,    0,    0,    0,
        0,    0,  948,  949,    0,    0,    0,    0,    0,    0,
        0,  949,  950,  950,  950,  950,    0,  950,  950,  951,
        0,    0,  951,    0,    0,    0,    0,    0,    0,    0,
      951,  952,    0,    0,    0,    0,    0,    0,    0,  952,

      953,  953,    0,    0,  953,    0,  953,    0,  953,  953,
      953,    0,  953,  954,  954,    0,    0,  954,    0,  954,
        0,  954,  954,  954,    0,  954,  955,  955,    0,    0,
      955,  955,  955,  955,  955,    0,  955,  955,  955,  956,
      956,    0,    0,  956,  956,  956,  956,  956,  956,  956,
      956,  956,  957,    0,    0,    0,  957,    0,  957,    0,
      957,  957,    0,  957,  957,  958,    0,    0,    0,    0,
        0,    0,    0,  958,  959,    0,    0,    0,    0,    0,
        0,    0,  959,  960,  960,  960,  960,  960,  960,  960,
      960,  960,  960,  960,  960,  961,  961,  961,  961,  961,

      961,  961,  961,  961,  961,  961,  961,  962,    0,    0,
        0,    0,    0,    0,    0,  962,  963,    0,    0,    0,
        0,    0,    0,    0,  963,  964,  964,  964,  964,  964,
      964,  964,  964,  964,  964,  964,  964,  965,    0,    0,
      965,    0,    0,    0,    0,    0,    0,    0,  965,  966,
        0,    0,    0,    0,    0,    0,    0,  966,  967,  967,
      967,  967,  967,  967,  967,  967,    0,  967,    0,  967,
      967,  968,    0,  968,    0,    0,    0,    0,    0,  968,
      969,    0,    0,    0,    0,    0,    0,    0,  969,  970,
      970,    0,  970,  970,  970,  970,  970,  970,  970,  970,

      970,  970,  971,  971,  971,  971,  971,  971,  971,  971,
      971,  971,  971,  971,  971,  972,    0,    0,    0,    0,
        0,    0,    0,  972,  973,    0,    0,  973,    0,    0,
        0,    0,    0,    0,    0,  973,  941,  941,  941,  941,
      941,  941,  941,  941,  941,  941,  941,  941,  941,  941,
      941,  941,  941,  941,  941,  941,  941,  941,  941,  941,
      941,  941,  941,  941,  941,  941,  941,  941,  941,  941,
      941,  941,  941,  941,  941,  941,  941,  941,  941,  941,
      941,  941,  941,  941,  941,  941,  941,  941,  941,  941,
      941,  941,  941,  941,  941,  941,  941,  941,  941,  941,

      941,  941,  941,  941,  941,  941,  941,  941
    } ;

extern int yy_flex_debug;
int yy_flex_debug = 0;

static yy_state_type *yy_state_buf=0, *yy_state_ptr=0;
static char *yy_full_match;
static int yy_lp;
static int yy_looking_for_trail_begin = 0;
static int yy_full_lp;
static int *yy_full_state;
#define YY_TRAILING_MASK 0x2000
#define YY_TRAILING_HEAD_MASK 0x4000
#define REJECT \
{ \
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */ \
yy_cp = (yy_full_match); /* restore poss. backed-over text */ \
(yy_lp) = (yy_full_lp); /* restore orig. accepting pos. */ \
(yy_state_ptr) = (yy_full_state); /* restore orig. state */ \
yy_current_state = *(yy_state_ptr); /* restore curr. state */ \
++(yy_lp); \
goto find_rule; \
}

#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
/* -*- C++ -*- */
/*
 * Scilab ( https://www.scilab.org/ ) - This file is part of Scilab
 * Copyright (C) 2008-2012 - Scilab Enterprises - Bruno JOFRET
 * Copyright (C) 2012 - 2016 - Scilab Enterprises
 * Copyright (C) 2018 - Dirk Reusch, Kybernetik Dr. Reusch
 * Copyright (C) 2023 - Dassault Systemes - Bruno JOFRET
 *
 * This file is hereby licensed under the terms of the GNU GPL v2.0,
 * pursuant to article 5.3.4 of the CeCILL v.2.1.
 * This file was originally licensed under the terms of the CeCILL v2.1,
 * and continues to be available under such terms.
 * For more information, see the COPYING file which you should have received
 * along with this program.
 *
 */

#include <stack>

#include "isatty.hxx"
#include "parse.hxx"
#include "parser_private.hxx"

#include "context.hxx"

extern "C"
{
#include "charEncoding.h"
#include "sci_malloc.h"
}

static std::stack<int> paren_levels;

static int comment_level = 0;
static int last_token = 0;
static int linebreak_stored_token = 0;
static bool linebreak_stored_space = FALSE;
static int exit_status = PARSE_ERROR;
static int str_opener_column = 0;
static std::string current_file;
static std::string program_name;

static std::string pstBuffer;

extern void yyerror(std::string);

#define YY_USER_ACTION                          \
    yylloc.first_column = yylloc.last_column; yylloc.last_column += yyleng;
//yylloc.last_column += yyleng;

/* -*- Verbose Special Debug -*- */
//#define DEV
//#define TOKENDEV

#ifdef DEV
#define DEBUG(x) std::cout << "[DEBUG] " << x << std::endl;
#else
#define DEBUG(x) /* Nothing */
#endif

#ifdef DEV
std::string token_to_string(int);
#endif

#define INITIAL 0
#define SIMPLESTRING 1
#define DOUBLESTRING 2
#define REGIONCOMMENT 3
#define LINECOMMENT 4
#define LINEBREAK 5
#define MATRIX 6
#define SHELLMODE 7
#define BEGINID 8

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals ( void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy ( void );

int yyget_debug ( void );

void yyset_debug ( int debug_flag  );

YY_EXTRA_TYPE yyget_extra ( void );

void yyset_extra ( YY_EXTRA_TYPE user_defined  );

FILE *yyget_in ( void );

void yyset_in  ( FILE * _in_str  );

FILE *yyget_out ( void );

void yyset_out  ( FILE * _out_str  );

			int yyget_leng ( void );

char *yyget_text ( void );

int yyget_lineno ( void );

void yyset_lineno ( int _line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap ( void );
#else
extern int yywrap ( void );
#endif
#endif

#ifndef YY_NO_UNPUT
    
    static void yyunput ( int c, char *buf_ptr  );
    
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * );
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput ( void );
#else
static int input ( void );
#endif

#endif

        static int yy_start_stack_ptr = 0;
        static int yy_start_stack_depth = 0;
        static int *yy_start_stack = NULL;
    
    static void yy_push_state ( int _new_state );
    
    static void yy_pop_state ( void );
    
    static int yy_top_state ( void );
    
/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = (int) fread(buf, 1, (yy_size_t) max_size, yyin)) == 0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex (void);

#define YY_DECL int yylex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	if ( yyleng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
				(yytext[yyleng - 1] == '\n'); \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

        /* Create the reject buffer large enough to save one state per allowed character. */
        if ( ! (yy_state_buf) )
            (yy_state_buf) = (yy_state_type *)yyalloc(YY_STATE_BUF_SIZE  );
            if ( ! (yy_state_buf) )
                YY_FATAL_ERROR( "out of dynamic memory in yylex()" );

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	{

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
		yy_current_state += YY_AT_BOL();

		(yy_state_ptr) = (yy_state_buf);
		*(yy_state_ptr)++ = yy_current_state;

yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 942 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			*(yy_state_ptr)++ = yy_current_state;
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 4937 );

yy_find_action:
		yy_current_state = *--(yy_state_ptr);
		(yy_lp) = yy_accept[yy_current_state];
find_rule: /* we branch to this label when backing up */
		for ( ; ; ) /* until we find what rule we matched */
			{
			if ( (yy_lp) && (yy_lp) < yy_accept[yy_current_state + 1] )
				{
				yy_act = yy_acclist[(yy_lp)];
				if ( yy_act & YY_TRAILING_HEAD_MASK ||
				     (yy_looking_for_trail_begin) )
					{
					if ( yy_act == (yy_looking_for_trail_begin) )
						{
						(yy_looking_for_trail_begin) = 0;
						yy_act &= ~YY_TRAILING_HEAD_MASK;
						break;
						}
					}
				else if ( yy_act & YY_TRAILING_MASK )
					{
					(yy_looking_for_trail_begin) = yy_act & ~YY_TRAILING_MASK;
					(yy_looking_for_trail_begin) |= YY_TRAILING_HEAD_MASK;
					}
				else
					{
					(yy_full_match) = yy_cp;
					(yy_full_state) = (yy_state_ptr);
					(yy_full_lp) = (yy_lp);
					break;
					}
				++(yy_lp);
				goto find_rule;
				}
			--yy_cp;
			yy_current_state = *--(yy_state_ptr);
			(yy_lp) = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
case 1:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 3;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{
// BOM found ==> ignored
}
	YY_BREAK
case 2:
YY_RULE_SETUP
{
  BEGIN(INITIAL);
  return scan_throw(BOOLTRUE);
}
	YY_BREAK
case 3:
YY_RULE_SETUP
{
  BEGIN(INITIAL);
  return scan_throw(BOOLFALSE);
}
	YY_BREAK
case 4:
YY_RULE_SETUP
{
  if (last_token != DOT)
  {
    ParserSingleInstance::pushControlStatus(Parser::WithinArguments);
  }
  DEBUG("BEGIN(INITIAL)");
  BEGIN(INITIAL);
  return scan_throw(ARGUMENTS);
}
	YY_BREAK
case 5:
YY_RULE_SETUP
{
  if (last_token != DOT)
  {
    ParserSingleInstance::pushControlStatus(Parser::WithinIf);
  }
  DEBUG("BEGIN(INITIAL)");
  BEGIN(INITIAL);
  return scan_throw(IF);
}
	YY_BREAK
case 6:
YY_RULE_SETUP
{
  DEBUG("BEGIN(INITIAL)");
  BEGIN(INITIAL);
  return scan_throw(THEN);
}
	YY_BREAK
case 7:
YY_RULE_SETUP
{
  if (last_token != DOT)
  {
    // Pop to step out IF
    ParserSingleInstance::popControlStatus();
    ParserSingleInstance::pushControlStatus(Parser::WithinElse);
  }
  DEBUG("BEGIN(INITIAL)");
  BEGIN(INITIAL);
  return scan_throw(ELSE);
}
	YY_BREAK
case 8:
YY_RULE_SETUP
{
  if (last_token != DOT)
  {
    ParserSingleInstance::popControlStatus();
    ParserSingleInstance::pushControlStatus(Parser::WithinElseIf);
  }
  DEBUG("BEGIN(INITIAL)");
  BEGIN(INITIAL);
  return scan_throw(ELSEIF);
}
	YY_BREAK
case 9:
YY_RULE_SETUP
{
  if (last_token != DOT)
  {
    ParserSingleInstance::popControlStatus();
  }
  DEBUG("BEGIN(INITIAL)");
  BEGIN(INITIAL);
  return scan_throw(END);
}
	YY_BREAK
case 10:
YY_RULE_SETUP
{
  if (last_token != DOT)
  {
    ParserSingleInstance::pushControlStatus(Parser::WithinSelect);
  }
  DEBUG("BEGIN(INITIAL)");
  BEGIN(INITIAL);
  return scan_throw(SELECT);
}
	YY_BREAK
case 11:
YY_RULE_SETUP
{
  if (last_token != DOT)
  {
    ParserSingleInstance::pushControlStatus(Parser::WithinSwitch);
  }
  DEBUG("BEGIN(INITIAL)");
  BEGIN(INITIAL);
  return scan_throw(SWITCH);
}
	YY_BREAK
case 12:
YY_RULE_SETUP
{
  if (last_token != DOT)
  {
    ParserSingleInstance::popControlStatus();
    ParserSingleInstance::pushControlStatus(Parser::WithinOtherwise);
  }
  DEBUG("BEGIN(INITIAL)");
  BEGIN(INITIAL);
  return scan_throw(OTHERWISE);
}
	YY_BREAK
case 13:
YY_RULE_SETUP
{
  if (last_token != DOT)
  {
    ParserSingleInstance::popControlStatus();
    ParserSingleInstance::pushControlStatus(Parser::WithinCase);
  }
  DEBUG("BEGIN(INITIAL)");
  BEGIN(INITIAL);
  return scan_throw(CASE);
}
	YY_BREAK
case 14:
YY_RULE_SETUP
{
  if (last_token != DOT)
  {
    ParserSingleInstance::pushControlStatus(Parser::WithinFunction);
  }
  DEBUG("BEGIN(INITIAL)");
  BEGIN(INITIAL);
  return scan_throw(FUNCTION);
}
	YY_BREAK
case 15:
YY_RULE_SETUP
{
  if (last_token != DOT)
  {
    ParserSingleInstance::popControlStatus();
  }
  DEBUG("BEGIN(INITIAL)");
  BEGIN(INITIAL);
  return scan_throw(ENDFUNCTION);
}
	YY_BREAK
case 16:
YY_RULE_SETUP
{
  if (last_token != DOT)
  {
    ParserSingleInstance::pushControlStatus(Parser::WithinFor);
  }
  BEGIN(INITIAL);
  return scan_throw(FOR);
}
	YY_BREAK
case 17:
YY_RULE_SETUP
{
  if (last_token != DOT)
  {
    ParserSingleInstance::pushControlStatus(Parser::WithinWhile);
  }
  BEGIN(INITIAL);
  return scan_throw(WHILE);
}
	YY_BREAK
case 18:
YY_RULE_SETUP
{
  BEGIN(INITIAL);
  return scan_throw(DO);
}
	YY_BREAK
case 19:
YY_RULE_SETUP
{
  BEGIN(INITIAL);
  return scan_throw(BREAK);
}
	YY_BREAK
case 20:
YY_RULE_SETUP
{
  BEGIN(INITIAL);
  return scan_throw(CONTINUE);
}
	YY_BREAK
case 21:
YY_RULE_SETUP
{
  ParserSingleInstance::pushControlStatus(Parser::WithinTry);
  BEGIN(INITIAL);
  return scan_throw(TRY);
}
	YY_BREAK
case 22:
YY_RULE_SETUP
{
  // Pop to step out TRY
  ParserSingleInstance::popControlStatus();
  ParserSingleInstance::pushControlStatus(Parser::WithinCatch);
  BEGIN(INITIAL);
  return scan_throw(CATCH);
}
	YY_BREAK
case 23:
YY_RULE_SETUP
{
  BEGIN(INITIAL);
  return scan_throw(RETURN);
}
	YY_BREAK
case 24:
YY_RULE_SETUP
{
  BEGIN(INITIAL);
  return scan_throw(RETURN);
}
	YY_BREAK
case 25:
/* rule 25 can match eol */
YY_RULE_SETUP
{
  DEBUG("BEGIN(BEGINID)");
  BEGIN(BEGINID);
}
	YY_BREAK
case 26:
YY_RULE_SETUP
{
  wchar_t *pwText = to_wide_string(yytext);
  if (yytext != NULL && pwText == NULL)
  {
    std::string str = "Can\'t convert \'";
    str += yytext;
    str += "\' to UTF-8";
    BEGIN(INITIAL);
    yyerror(str);
    return scan_throw(FLEX_ERROR);
  }
  yylval.str = new std::wstring(pwText);
  FREE(pwText);
  types::InternalType * pIT = symbol::Context::getInstance()->get(symbol::Symbol(*yylval.str));
  if (pIT && pIT->isCallable() && ParserSingleInstance::getControlStatus() != Parser::WithinArguments)
  {
    DEBUG("BEGIN(SHELLMODE)");
    BEGIN(SHELLMODE);
  }
  else
  {
    DEBUG("BEGIN(INITIAL)");
    BEGIN(INITIAL);
  }
  #ifdef TOKENDEV
  std::cout << "--> [DEBUG] ID : " << yytext << std::endl;
  #endif
  return scan_throw(ID);
}
	YY_BREAK
case 27:
YY_RULE_SETUP
return scan_throw(NOT);
	YY_BREAK
case 28:
YY_RULE_SETUP
return scan_throw(DOLLAR);
	YY_BREAK
case 29:
YY_RULE_SETUP
return scan_throw(BOOLTRUE);
	YY_BREAK
case 30:
YY_RULE_SETUP
return scan_throw(BOOLFALSE);
	YY_BREAK
case 31:
YY_RULE_SETUP
return scan_throw(AND);
	YY_BREAK
case 32:
YY_RULE_SETUP
return scan_throw(ANDAND);
	YY_BREAK
case 33:
YY_RULE_SETUP
return scan_throw(OR);
	YY_BREAK
case 34:
YY_RULE_SETUP
return scan_throw(OROR);
	YY_BREAK
case 35:
YY_RULE_SETUP
return scan_throw(LPAREN);
	YY_BREAK
case 36:
YY_RULE_SETUP
return scan_throw(RPAREN);
	YY_BREAK
case 37:
YY_RULE_SETUP
{
  scan_step();
  return scan_throw(SEMI);
}
	YY_BREAK
case 38:
YY_RULE_SETUP
{
  scan_step();
  return scan_throw(COMMA);
}
	YY_BREAK
case 39:
YY_RULE_SETUP
return scan_throw(COLON);
	YY_BREAK
case 40:
YY_RULE_SETUP
{
  yy_push_state(MATRIX);
  paren_levels.push(0);
  ParserSingleInstance::pushControlStatus(Parser::WithinCell);
  return scan_throw(LBRACE);
}
	YY_BREAK
case 41:
YY_RULE_SETUP
return scan_throw(RBRACE);
	YY_BREAK
case 42:
YY_RULE_SETUP
return scan_throw(DOTQUOTE);
	YY_BREAK
case 43:
YY_RULE_SETUP
return scan_throw(DOTTIMES);
	YY_BREAK
case 44:
YY_RULE_SETUP
return scan_throw(DOTRDIVIDE);
	YY_BREAK
case 45:
YY_RULE_SETUP
return scan_throw(DOTLDIVIDE);
	YY_BREAK
case 46:
YY_RULE_SETUP
return scan_throw(DOTPOWER);
	YY_BREAK
case 47:
YY_RULE_SETUP
return scan_throw(MINUS);
	YY_BREAK
case 48:
YY_RULE_SETUP
return scan_throw(PLUS);
	YY_BREAK
case 49:
YY_RULE_SETUP
return scan_throw(TIMES);
	YY_BREAK
case 50:
YY_RULE_SETUP
return scan_throw(RDIVIDE);
	YY_BREAK
case 51:
YY_RULE_SETUP
return scan_throw(LDIVIDE);
	YY_BREAK
case 52:
YY_RULE_SETUP
return scan_throw(POWER);
	YY_BREAK
case 53:
YY_RULE_SETUP
return scan_throw(KRONTIMES);
	YY_BREAK
case 54:
YY_RULE_SETUP
return scan_throw(KRONRDIVIDE);
	YY_BREAK
case 55:
YY_RULE_SETUP
return scan_throw(KRONLDIVIDE);
	YY_BREAK
case 56:
/* rule 56 can match eol */
YY_RULE_SETUP
{
  unput(yytext[yyleng - 1]);
  return scan_throw(CONTROLTIMES);
}
	YY_BREAK
case 57:
/* rule 57 can match eol */
YY_RULE_SETUP
{
  unput(yytext[yyleng - 1]);
  return scan_throw(CONTROLRDIVIDE);
}
	YY_BREAK
case 58:
/* rule 58 can match eol */
YY_RULE_SETUP
{
  unput(yytext[yyleng - 1]);
  return scan_throw(CONTROLLDIVIDE);
}
	YY_BREAK
case 59:
YY_RULE_SETUP
return scan_throw(EQ);
	YY_BREAK
case 60:
YY_RULE_SETUP
return scan_throw(NE);
	YY_BREAK
case 61:
YY_RULE_SETUP
return scan_throw(LT);
	YY_BREAK
case 62:
YY_RULE_SETUP
return scan_throw(GT);
	YY_BREAK
case 63:
YY_RULE_SETUP
return scan_throw(LE);
	YY_BREAK
case 64:
YY_RULE_SETUP
return scan_throw(GE);
	YY_BREAK
case 65:
YY_RULE_SETUP
return scan_throw(ASSIGN);
	YY_BREAK
case 66:
YY_RULE_SETUP
{
  DEBUG("yy_push_state(MATRIX)");
  yy_push_state(MATRIX);
  paren_levels.push(0);
  ParserSingleInstance::pushControlStatus(Parser::WithinMatrix);
  return scan_throw(LBRACK);
}
	YY_BREAK
case 67:
YY_RULE_SETUP
return scan_throw(RBRACK);
	YY_BREAK
case 68:
YY_RULE_SETUP
return scan_throw(DOT);
	YY_BREAK
case 69:
YY_RULE_SETUP
{
  ParserSingleInstance::pushControlStatus(Parser::WithinDots);
  yy_push_state(LINEBREAK);
}
	YY_BREAK
case 70:
YY_RULE_SETUP
{
  yylval.number = atof(yytext);
#ifdef TOKENDEV
  std::cout << "--> [DEBUG] INTEGER : " << yytext << std::endl;
#endif
//  scan_step();
  return scan_throw(VARINT);
}
	YY_BREAK
case 71:
YY_RULE_SETUP
{
  scan_exponent_convert(yytext);
  yylval.number = atof(yytext);
#ifdef TOKENDEV
  std::cout << "--> [DEBUG] FLOATING : " << yytext << std::endl;
#endif
  //scan_step();
  return scan_throw(VARFLOAT);
}
	YY_BREAK
case 72:
YY_RULE_SETUP
{
  yylval.number = atof(yytext);
#ifdef TOKENDEV
  std::cout << "--> [DEBUG] FLOATING : " << yytext << std::endl;
#endif
  //scan_step();
  return scan_throw(VARFLOAT);
}
	YY_BREAK
case 73:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{
  yylval.number = atof(yytext);
#ifdef TOKENDEV
  std::cout << "--> [DEBUG] NUMBER WITH DOT AS LAST CHARACTER : " << yytext << std::endl;
#endif
//  scan_step();
  unput('.');
  yylloc.last_column--;
  return scan_throw(NUM);
}
	YY_BREAK
case 74:
YY_RULE_SETUP
{
  yylval.number = atof(yytext);
#ifdef TOKENDEV
  std::cout << "--> [DEBUG] NUMBER : " << yytext << std::endl;
#endif
//  scan_step();
  return scan_throw(NUM);
}
	YY_BREAK
case 75:
YY_RULE_SETUP
{
  yylval.number = atof(yytext);
#ifdef TOKENDEV
  std::cout << "--> [DEBUG] LITTLE : " << yytext << std::endl;
#endif
//  scan_step();
  return scan_throw(NUM);
}
	YY_BREAK
case 76:
YY_RULE_SETUP
{
  wchar_t *pwText = to_wide_string(yytext);
  if (yytext != NULL && pwText == NULL)
  {
    std::string str = "Can\'t convert \'";
    str += yytext;
    str += "\' to UTF-8";
    BEGIN(INITIAL);
    yyerror(str);
    return scan_throw(FLEX_ERROR);
  }
  yylval.str = new std::wstring(pwText);
  FREE(pwText);
#ifdef TOKENDEV
  std::cout << "--> [DEBUG] ID : " << yytext << std::endl;
#endif
//  scan_step();
  return scan_throw(ID);
}
	YY_BREAK
case 77:
YY_RULE_SETUP
{
  std::string str = "Can\'t convert \'";
  str += yytext;
  str += "\' to a valid number nor identifier";
  yyerror(str);
  return scan_throw(FLEX_ERROR);
}
	YY_BREAK
case 78:
YY_RULE_SETUP
{
  yylval.comment = new std::wstring();
  comment_level = 1;
  ParserSingleInstance::pushControlStatus(Parser::WithinBlockComment);
  yy_push_state(REGIONCOMMENT);
}
	YY_BREAK
case 79:
YY_RULE_SETUP
{
  pstBuffer.clear();
  yy_push_state(LINECOMMENT);
}
	YY_BREAK
case 80:
YY_RULE_SETUP
{
  pstBuffer.clear();
  str_opener_column = yylloc.first_column;
  #ifdef TOKENDEV
    std::cout << "--> Push State DOUBLESTRING" << std::endl;
  #endif
  yy_push_state(DOUBLESTRING);
}
	YY_BREAK
case 81:
YY_RULE_SETUP
{
  /*
  ** Can not be Matrix Transposition
  ** Pushing SIMPLESTRING
  */
  pstBuffer.clear();
  str_opener_column = yylloc.first_column;
  #ifdef TOKENDEV
  std::cout << "--> Push State SIMPLESTRING" << std::endl;
  #endif
  yy_push_state(SIMPLESTRING);
}
	YY_BREAK
case 82:
YY_RULE_SETUP
{
  /*
  ** Matrix Transposition special behaviour
  ** ID' []' toto()' are transposition call
  */
  if (last_token == ID
      || last_token == RBRACK
      || last_token == RPAREN
      || last_token == RBRACE
      || last_token == VARINT
      || last_token == VARFLOAT
      || last_token == NUM
      || last_token == BOOLTRUE
      || last_token == BOOLFALSE)
  {
    #ifdef TOKENDEV
    std::cout << "--> QUOTE" << std::endl;
    #endif
    return scan_throw(QUOTE);
  }
  else
  {
    pstBuffer.clear();
    str_opener_column = yylloc.first_column;
    #ifdef TOKENDEV
    std::cout << "--> Push State SIMPLESTRING" << std::endl;
    #endif
    yy_push_state(SIMPLESTRING);
  }
}
	YY_BREAK
case 83:
YY_RULE_SETUP
scan_step();
	YY_BREAK
case 84:
/* rule 84 can match eol */
YY_RULE_SETUP
{
  yylloc.last_line += 1;
  yylloc.last_column = 1;
  scan_step();
  if (last_token != EOL) {
    return scan_throw(EOL);
  }
}
	YY_BREAK
case 85:
/* rule 85 can match eol */
YY_RULE_SETUP
{
  yylloc.last_line += 1;
  yylloc.last_column = 1;
  scan_step();
  if (last_token != EOL)
  {
    return scan_throw(EOL);
  }
  scan_throw(EOL);
}
	YY_BREAK
case 86:
/* rule 86 can match eol */
YY_RULE_SETUP
{
  yylloc.last_line += 2;
  yylloc.last_column = 1;
  scan_step();
  if (last_token != EOL)
  {
    return scan_throw(EOL);
  }
  scan_throw(EOL);
}
	YY_BREAK
case 87:
YY_RULE_SETUP
{
    std::string str = "Unexpected token \'";
    str += yytext;
    str += "\'";
    BEGIN(INITIAL);
    yyerror(str);
    return scan_throw(FLEX_ERROR);
}
	YY_BREAK

case 88:
YY_RULE_SETUP
{
    ++paren_levels.top();
    return scan_throw(LPAREN);
  }
	YY_BREAK
case 89:
YY_RULE_SETUP
{
    --paren_levels.top();
    return scan_throw(RPAREN);
  }
	YY_BREAK
case 90:
YY_RULE_SETUP
{
    unput(yytext[yyleng - 1]);
    --yylloc.last_column;
    if (last_token == ID
        || last_token == RPAREN
        || last_token == QUOTE
        || last_token == VARINT
        || last_token == VARFLOAT
        || last_token == NUM)
    {
      return scan_throw(COMMA);
    }
  }
	YY_BREAK
case 91:
YY_RULE_SETUP
return scan_throw(COLON);
	YY_BREAK
case 92:
/* rule 92 can match eol */
YY_RULE_SETUP
{
    yylloc.last_line += 1;
    yylloc.last_column = 1;
    scan_step();
    if(last_token != DOTS && last_token != EOL)
    {
      return scan_throw(EOL);
    }
    scan_throw(EOL);
  }
	YY_BREAK
case 93:
YY_RULE_SETUP
{
    unput('\'');
    yylloc.last_column--;
    if (last_token == ID
        || last_token == RPAREN
        || last_token == QUOTE)
    {
      return scan_throw(COMMA);
    }
  }
	YY_BREAK
case 94:
YY_RULE_SETUP
{
    DEBUG("yy_pop_state()");
    yy_pop_state();
    paren_levels.pop();
    ParserSingleInstance::popControlStatus();
    return scan_throw(RBRACK);
  }
	YY_BREAK
case 95:
YY_RULE_SETUP
{
    yy_pop_state();
    paren_levels.pop();
    ParserSingleInstance::popControlStatus();
    return scan_throw(RBRACE);
  }
	YY_BREAK
case 96:
case 97:
YY_RULE_SETUP
{
    // _+_ is always meaning a PLUS token
    // + alone is a plus if and only if it does not
    // fall into the {spaces}{plus} rule (in matrices space is coding)
    // as Flex is greedy the {plus} rule is only applied
    // if no {spaces}{plus} is found
    // Examples:
    // ========
    // [1 + 2 3] must be understood as [(1+2), 3]
    // [1 +2 3] must be understood as [1, 2, 3]
    // [1 +...
    // 2] must be understood as [(1+2)]
    return scan_throw(PLUS);
  }
	YY_BREAK
case 98:
case 99:
YY_RULE_SETUP
{
    // _-_ is always meaning a MINUS token
    // - alone is a MINUS only if and only if it does not
    // fall into the {spaces}{minus} rule (in matrices space is coding)
    // as Flex is greedy the {minus} rule is only applied
    // if no {spaces}{minus} is found
    // Examples:
    // ========
    // [1 - 2 3] must be understood as [(1-2), 3]
    // [1 -2 3] must be understood as [1, -2, 3]
    // [1 -...
    // 2] must be understood as [(1-2)]
    return scan_throw(MINUS);
  }
	YY_BREAK
case 100:
YY_RULE_SETUP
{
    // This rule is made to take into account the coding spaces in matrices.
    // It is important to distinguish between a space coding a matrix column separator
    // and a simple non coding space around the PLUS operator
    // Examples
    // ========
    // [a + b] == [(a + b)]
    // but [a +b] == [a, +b] and plus here is unary and is not removed, as unary plus
    // is not necessary defined for all data types (https://gitlab.com/scilab/scilab/-/issues/15850)
    // A priori, the space *is* coding
    unput('+');
    yylloc.last_column--;
    if (last_token != LBRACK
       && last_token != EOL
       && last_token != SEMI
       && last_token != COMMA
       && last_token != DOTTIMES
       && last_token != DOTRDIVIDE
       && last_token != DOTLDIVIDE
       && last_token != DOTPOWER
       && last_token != MINUS
       && last_token != PLUS
       && last_token != TIMES
       && last_token != RDIVIDE
       && last_token != LDIVIDE
       && last_token != POWER
       && last_token != KRONTIMES
       && last_token != KRONRDIVIDE
       && last_token != KRONLDIVIDE
       && last_token != EQ
       && last_token != NE
       && last_token != LT
       && last_token != GT
       && last_token != LE
       && last_token != GE
      && paren_levels.top() == 0)
    {
      return scan_throw(COMMA);
    }
  }
	YY_BREAK
case 101:
YY_RULE_SETUP
{
    // See {spaces}{plus} rule for the rationale
    unput('-');
    yylloc.last_column--;
    if (last_token != LBRACK
       && last_token != EOL
       && last_token != SEMI
       && last_token != COMMA
       && last_token != DOTTIMES
       && last_token != DOTRDIVIDE
       && last_token != DOTLDIVIDE
       && last_token != DOTPOWER
       && last_token != MINUS
       && last_token != PLUS
       && last_token != TIMES
       && last_token != RDIVIDE
       && last_token != LDIVIDE
       && last_token != POWER
       && last_token != KRONTIMES
       && last_token != KRONRDIVIDE
       && last_token != KRONLDIVIDE
       && last_token != EQ
       && last_token != NE
       && last_token != LT
       && last_token != GT
       && last_token != LE
       && last_token != GE
       && paren_levels.top() == 0)
    {
       return scan_throw(COMMA);
    }
  }
	YY_BREAK
case 102:
YY_RULE_SETUP
{
    std::string str = "Unexpected token \'";
    str += yytext;
    str += "\' within a matrix.";
    BEGIN(INITIAL);
    yyerror(str);
    return scan_throw(FLEX_ERROR);
  }
	YY_BREAK
/* {next} rules
   * ============
   * Scilab can perform a line continuation with the ..
   * In matrices as space may be coding extra care must be taken when parsing {next}
   * Some states must be preserved to parse next line and to revert to a proper state
   * after the ... // comments or ... \/* comments *\/
   */
case 103:
YY_RULE_SETUP
{
    // This rule is made to take into account a +... without spaces after plus
    // if one simply ignores the next a situation like this could arise
    // Example
    // =======
    // A = [1 +...
    // 2] 
    //
    // what is meant by the user [1 +2] ? or [1 + 2]
    // simply ignoring the ... would yield the 1st situation [1, 2]
    // We consider this is NOT proper and instead that the user meant a binary plus
    // split is two lines
    // The same rationale applies to minus.

    linebreak_stored_space = FALSE; // no spaces before ...
    linebreak_stored_token = PLUS; // keep last token to restore
    ParserSingleInstance::pushControlStatus(Parser::WithinDots);
    yy_push_state(LINEBREAK);
    return scan_throw(PLUS);
  }
	YY_BREAK
case 104:
YY_RULE_SETUP
{
    // see {spaces}*{minus}{next} for the rationale

    linebreak_stored_space = FALSE; // no spaces before ...
    linebreak_stored_token = MINUS; // keep last token to restore
    ParserSingleInstance::pushControlStatus(Parser::WithinDots);
    yy_push_state(LINEBREAK);
    return scan_throw(MINUS);
  }
	YY_BREAK
case 105:
YY_RULE_SETUP
{
    // Store the state of the previously scanned token for next rule
    // Only considerations of coding spaces is important for the parser

    linebreak_stored_space = FALSE; // no spaces before ...
    linebreak_stored_token = last_token; // keep last token to restore state
    ParserSingleInstance::pushControlStatus(Parser::WithinDots);
    yy_push_state(LINEBREAK);
  }
	YY_BREAK
case 106:
YY_RULE_SETUP
{
    // Store the state of the previously scanned token for next rule
    // Only considerations of coding spaces is important for the parser

    linebreak_stored_space = TRUE; // no spaces before ...
    linebreak_stored_token = last_token; // keep last token to restore state
    ParserSingleInstance::pushControlStatus(Parser::WithinDots);
    yy_push_state(LINEBREAK);
  }
	YY_BREAK
case YY_STATE_EOF(MATRIX):
{
    yy_pop_state();
    paren_levels.pop();
  }
	YY_BREAK

case 107:
/* rule 107 can match eol */
YY_RULE_SETUP
{
    yylloc.last_line += 1;
    yylloc.last_column = 1;
    scan_step();
    last_token = linebreak_stored_token;
    if (linebreak_stored_space)
    {
      // This is important to restore coding spaces as if ... was not present
      unput(' ');
      linebreak_stored_space = FALSE;
    }
    yy_pop_state();
    ParserSingleInstance::popControlStatus();
  }
	YY_BREAK
case 108:
YY_RULE_SETUP
{
    yylval.comment = new std::wstring();
    comment_level = 1;
    ParserSingleInstance::pushControlStatus(Parser::WithinBlockComment);
    yy_push_state(REGIONCOMMENT);
  }
	YY_BREAK
case 109:
YY_RULE_SETUP
{
    scan_throw(DOTS);
    pstBuffer.clear();
    yy_push_state(LINECOMMENT);
  }
	YY_BREAK
case 110:
YY_RULE_SETUP
{
    /* Do nothing... */
  }
	YY_BREAK
case YY_STATE_EOF(LINEBREAK):
{
    yy_pop_state();
  }
	YY_BREAK
case 111:
YY_RULE_SETUP
{
    // The following case is not handled by the parser
    // a line of code ... /* some multiline
    // comments */ continued here;
    // without the special case telling we are after comments
    // will generate the error as follows:

    // Any characters after ... yields to an error
    std::string str = "Unexpected token \'";
    str += yytext;
    str += "\' after line break with .. or ...";
    yy_pop_state();
    ParserSingleInstance::popControlStatus();
    BEGIN(INITIAL);
    yyerror(str);
    return scan_throw(FLEX_ERROR);
  }
	YY_BREAK

case 112:
/* rule 112 can match eol */
YY_RULE_SETUP
{
    //yylloc.last_line += 1;
    //yylloc.last_column = 1;
    //scan_step();
    yy_pop_state();
    // loop to manage \n and \r\n
    for (int i = yyleng - 1 ; i >= 0 ; --i)
    {
      //std::cerr << "Unputting i = {" << i << "}" << std::endl;
      //std::cerr << "Unputting {" << yytext[i] << "}" << std::endl;
      unput(yytext[i]);
      yylloc.last_column--;
    }
    // yylloc.first_column is the location of the {newline}
    // remove the size of the comment to have proper location 
    // as for <<EOF>> '//' is not part of the comment location
    yylloc.first_column -= pstBuffer.length();
    
    /*
    ** To forgot comments after lines break
    */
    if (last_token != DOTS)
    {
      //std::cerr << "pstBuffer = {" << *pstBuffer << "}" << std::endl;
      //std::cerr << "pstBuffer->c_str() = {" << pstBuffer->c_str() << "}" << std::endl;
      wchar_t *pwstBuffer = to_wide_string(pstBuffer.c_str());
      //std::wcerr << L"pwstBuffer = W{" << pwstBuffer << L"}" << std::endl;
      if (pstBuffer.c_str() != NULL && pwstBuffer == NULL)
      {
        pstBuffer.clear();
        std::string str = "Can\'t convert \'";
        str += pstBuffer.c_str();
        str += "\' to UTF-8";
        BEGIN(INITIAL);
        yyerror(str);
        return scan_throw(FLEX_ERROR);
      }
      yylval.comment = new std::wstring(pwstBuffer);
      pstBuffer.clear();
      FREE (pwstBuffer);
      return scan_throw(COMMENT);
    }
    else
    {
      pstBuffer.clear();
    }
  }
	YY_BREAK
case YY_STATE_EOF(LINECOMMENT):
{
    yy_pop_state();
    wchar_t *pwstBuffer = to_wide_string(pstBuffer.c_str());
    if (pstBuffer.c_str() != NULL && pwstBuffer == NULL)
    {
      pstBuffer.clear();
      std::string str = "Can\'t convert \'";
      str += pstBuffer.c_str();
      str += "\' to UTF-8";
      BEGIN(INITIAL);
      yyerror(str);
      return scan_throw(FLEX_ERROR);
    }
    yylval.comment = new std::wstring(pwstBuffer);
    pstBuffer.clear();
    FREE (pwstBuffer);
    return scan_throw(COMMENT);
  }
	YY_BREAK
case 113:
YY_RULE_SETUP
{
      // Put the char in a temporary CHAR buffer to go through UTF-8 trouble
      // only translate to WCHAR_T when popping state.
      pstBuffer += yytext;
  }
	YY_BREAK

case 114:
YY_RULE_SETUP
{
    --comment_level;
    if (comment_level == 0)
    {
      ParserSingleInstance::popControlStatus();
      yy_pop_state();
      //return scan_throw(BLOCKCOMMENT);
    }
  }
	YY_BREAK
case 115:
YY_RULE_SETUP
{
    ++comment_level;
    yy_push_state(REGIONCOMMENT);
  }
	YY_BREAK
case 116:
/* rule 116 can match eol */
YY_RULE_SETUP
{
    yylloc.last_line += 1;
    yylloc.last_column = 1;
    scan_step();
    *yylval.comment += L"\n";
  }
	YY_BREAK
case 117:
case 118:
YY_RULE_SETUP
{
      wchar_t *pwText = to_wide_string(yytext);
      *yylval.comment += std::wstring(pwText);
      FREE(pwText);
  }
	YY_BREAK
case YY_STATE_EOF(REGIONCOMMENT):
{
      yy_pop_state();
//    std::string str = "unexpected end of file in a comment";
//    scan_error(str);
  }
	YY_BREAK

case 119:
YY_RULE_SETUP
pstBuffer += "\"";
	YY_BREAK
case 120:
YY_RULE_SETUP
pstBuffer += "'";
	YY_BREAK
case 121:
YY_RULE_SETUP
pstBuffer += "\"";
	YY_BREAK
case 122:
YY_RULE_SETUP
pstBuffer += "'";
	YY_BREAK
case 123:
YY_RULE_SETUP
{
    yy_pop_state();
    //scan_step();
    wchar_t *pwstBuffer = to_wide_string(pstBuffer.c_str());
    if (pstBuffer.c_str() != NULL && pwstBuffer == NULL)
    {
      pstBuffer.clear();
      std::string str = "Can\'t convert \'";
      str += pstBuffer.c_str();
      str += "\' to UTF-8";
      BEGIN(INITIAL);
      yyerror(str);
      return scan_throw(FLEX_ERROR);
    }
    yylval.str = new std::wstring(pwstBuffer);
    pstBuffer.clear();
    FREE(pwstBuffer);
    yylloc.first_column = str_opener_column;
    return scan_throw(STR);
  }
	YY_BREAK
case 124:
YY_RULE_SETUP
{
    pstBuffer.clear();
    BEGIN(INITIAL);
    yyerror("Heterogeneous string detected, starting with \' and ending with \".");
    return scan_throw(FLEX_ERROR);
  }
	YY_BREAK
case 125:
/* rule 125 can match eol */
YY_RULE_SETUP
{
    pstBuffer.clear();
    yylloc.last_line += 1;
    yylloc.last_column = 1;
    BEGIN(INITIAL);
    ParserSingleInstance::popControlStatus();
    yyerror("Unexpected end of line in a string.");
    return scan_throw(FLEX_ERROR);
  }
	YY_BREAK
case YY_STATE_EOF(SIMPLESTRING):
{
    pstBuffer.clear();
    BEGIN(INITIAL);
    yyerror("Unexpected end of file in a string.");
    return scan_throw(FLEX_ERROR);
  }
	YY_BREAK
case 126:
case 127:
YY_RULE_SETUP
{
    //scan_step();
    pstBuffer += yytext;
  }
	YY_BREAK

case 128:
YY_RULE_SETUP
pstBuffer += "\"";
	YY_BREAK
case 129:
YY_RULE_SETUP
pstBuffer += "'";
	YY_BREAK
case 130:
YY_RULE_SETUP
pstBuffer += "\"";
	YY_BREAK
case 131:
YY_RULE_SETUP
pstBuffer += "'";
	YY_BREAK
case 132:
YY_RULE_SETUP
{
    yy_pop_state();
    //scan_step();
    wchar_t *pwstBuffer = to_wide_string(pstBuffer.c_str());
    if (pstBuffer.c_str() != NULL && pwstBuffer == NULL)
    {
      pstBuffer.clear();
      std::string str = "Can\'t convert \'";
      str += pstBuffer.c_str();
      str += "\' to UTF-8";
      BEGIN(INITIAL);
      yyerror(str);
      return scan_throw(FLEX_ERROR);
    }
    yylval.str = new std::wstring(pwstBuffer);
    pstBuffer.clear();
    FREE(pwstBuffer);
    yylloc.first_column = str_opener_column;
    return scan_throw(STR);
  }
	YY_BREAK
case 133:
YY_RULE_SETUP
{
    pstBuffer.clear();
    BEGIN(INITIAL);
    yyerror("Heterogeneous string detected, starting with \" and ending with \'.");
    return scan_throw(FLEX_ERROR);
  }
	YY_BREAK
case 134:
/* rule 134 can match eol */
YY_RULE_SETUP
{
    pstBuffer.clear();
    yylloc.last_line += 1;
    yylloc.last_column = 1;
    ParserSingleInstance::popControlStatus();
    BEGIN(INITIAL);
    yyerror("Unexpected end of line in a string.");
    return scan_throw(FLEX_ERROR);
  }
	YY_BREAK
case YY_STATE_EOF(DOUBLESTRING):
{
    pstBuffer.clear();
    BEGIN(INITIAL);
    yyerror("Unexpected end of file in a string.");
    return scan_throw(FLEX_ERROR);
  }
	YY_BREAK
case 135:
case 136:
YY_RULE_SETUP
{
    //scan_step();
    pstBuffer += yytext;
  }
	YY_BREAK

case 137:
YY_RULE_SETUP
{
        if (last_token == ID)
        {
          scan_throw(SPACES);
          //return ID;
        }
    }
	YY_BREAK
case 138:
YY_RULE_SETUP
{
      BEGIN(INITIAL);
      scan_step();
      return scan_throw(SEMI);
    }
	YY_BREAK
case 139:
YY_RULE_SETUP
{
      BEGIN(INITIAL);
      scan_step();
      return scan_throw(COMMA);
    }
	YY_BREAK
case 140:
/* rule 140 can match eol */
YY_RULE_SETUP
{
      BEGIN(INITIAL);
      yylloc.last_line += 1;
      yylloc.last_column = 1;
      scan_step();
      return scan_throw(EOL);
    }
	YY_BREAK
case 141:
YY_RULE_SETUP
{
      if (last_token == STR || last_token == SPACES)
      {
        wchar_t *pwText = to_wide_string(yytext);
        yylval.str = new std::wstring(pwText);
        FREE(pwText);
        return scan_throw(STR);
      }
      else
      {
        BEGIN(INITIAL);
        return scan_throw(ASSIGN);
      }
    }
	YY_BREAK
case 142:
YY_RULE_SETUP
{
      if (last_token == STR || last_token == SPACES)
      {
        wchar_t *pwText = to_wide_string(yytext);
        yylval.str = new std::wstring(pwText);
        FREE(pwText);
        return scan_throw(STR);
      }
      else
      {
        BEGIN(INITIAL);
        return scan_throw(LPAREN);
      }
    }
	YY_BREAK
case 143:
YY_RULE_SETUP
{
        if (last_token == STR || last_token == SPACES)
        {
          wchar_t *pwText = to_wide_string(yytext);
          yylval.str = new std::wstring(pwText);
          FREE(pwText);
          return scan_throw(STR);
        }
        else
        {
          BEGIN(INITIAL);
          return scan_throw(LT);
        }
    }
	YY_BREAK
case 144:
YY_RULE_SETUP
{
        if (last_token == STR || last_token == SPACES)
        {
          wchar_t *pwText = to_wide_string(yytext);
          yylval.str = new std::wstring(pwText);
          FREE(pwText);
          return scan_throw(STR);
        }
        else
        {
          BEGIN(INITIAL);
          return scan_throw(GT);
        }
    }
	YY_BREAK
case 145:
YY_RULE_SETUP
{
        if (last_token == STR || last_token == SPACES)
        {
          wchar_t *pwText = to_wide_string(yytext);
          yylval.str = new std::wstring(pwText);
          FREE(pwText);
          return scan_throw(STR);
        }
        else
        {
          BEGIN(INITIAL);
          return scan_throw(NOT);
        }
    }
	YY_BREAK
case 146:
YY_RULE_SETUP
{
      wchar_t *pwText = to_wide_string(yytext);
      yylval.str = new std::wstring(pwText);
      FREE(pwText);
      return scan_throw(STR);
    }
	YY_BREAK
case YY_STATE_EOF(SHELLMODE):
{
      BEGIN(INITIAL);
    }
	YY_BREAK

case 147:
YY_RULE_SETUP
ECHO;
	YY_BREAK
			case YY_STATE_EOF(INITIAL):
			case YY_STATE_EOF(BEGINID):
				yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = (yytext_ptr);
	int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr) - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if (((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    
	yy_current_state = (yy_start);
	yy_current_state += YY_AT_BOL();

	(yy_state_ptr) = (yy_state_buf);
	*(yy_state_ptr)++ = yy_current_state;

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 942 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		*(yy_state_ptr)++ = yy_current_state;
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	int yy_is_jam;
    
	YY_CHAR yy_c = 1;
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 942 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 941);
	if ( ! yy_is_jam )
		*(yy_state_ptr)++ = yy_current_state;

		return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT

    static void yyunput (int c, char * yy_bp )
{
	char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		int number_to_move = (yy_n_chars) + 2;
		char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = (int) YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (int) ((yy_c_buf_p) - (yytext_ptr));
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return 0;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void yy_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2)  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf  );

	yyfree( (void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return NULL;

	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = (int) (size - 2);	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = NULL;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (const char * yystr )
{
    
	return yy_scan_bytes( yystr, (int) strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (const char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = (yy_size_t) (_yybytes_len + 2);
	buf = (char *) yyalloc( n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

    static void yy_push_state (int  _new_state )
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_size_t) (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) yyalloc( new_size  );

		else
			(yy_start_stack) = (int *) yyrealloc(
					(void *) (yy_start_stack), new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(_new_state);
}

    static void yy_pop_state  (void)
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

    static int yy_top_state  (void)
{
    	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yynoreturn yy_fatal_error (const char* msg )
{
			fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int yyget_lineno  (void)
{
    
    return yylineno;
}

/** Get the input stream.
 * 
 */
FILE *yyget_in  (void)
{
        return yyin;
}

/** Get the output stream.
 * 
 */
FILE *yyget_out  (void)
{
        return yyout;
}

/** Get the length of the current token.
 * 
 */
int yyget_leng  (void)
{
        return yyleng;
}

/** Get the current token.
 * 
 */

char *yyget_text  (void)
{
        return yytext;
}

/** Set the current line number.
 * @param _line_number line number
 * 
 */
void yyset_lineno (int  _line_number )
{
    
    yylineno = _line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * 
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  _in_str )
{
        yyin = _in_str ;
}

void yyset_out (FILE *  _out_str )
{
        yyout = _out_str ;
}

int yyget_debug  (void)
{
        return yy_flex_debug;
}

void yyset_debug (int  _bdebug )
{
        yy_flex_debug = _bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = NULL;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = NULL;
    (yy_init) = 0;
    (yy_start) = 0;

    (yy_start_stack_ptr) = 0;
    (yy_start_stack_depth) = 0;
    (yy_start_stack) =  NULL;

    (yy_state_buf) = 0;
    (yy_state_ptr) = 0;
    (yy_full_match) = 0;
    (yy_lp) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = NULL;
    yyout = NULL;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer( YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Destroy the start condition stack. */
        yyfree( (yy_start_stack)  );
        (yy_start_stack) = NULL;

    yyfree ( (yy_state_buf) );
    (yy_state_buf)  = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n )
{
		
	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s )
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
			return malloc(size);
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
		
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void yyfree (void * ptr )
{
			free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

int scan_throw(int token) {
  last_token = token;
#ifdef DEV
  std::cout << "--> [DEBUG] TOKEN : " << token << " - " << token_to_string(token) << std::endl;
#endif
  return token;
}

int get_last_token() {
  return last_token;
}

void scan_step() {
  yylloc.first_line = yylloc.last_line;
  yylloc.first_column = yylloc.last_column;
}

/*
** convert floating numbers to C standard
** 1.2d-3 -> 1.2e-3
** 1.2D-3 -> 1.2e-3
*/
void scan_exponent_convert(char *in)
{
  for (; *in != 'd' && *in != 'D'; ++in);
  *in = 'e';
}

#ifdef _MSC_VER
int isatty (int desc)
{
  return 0;
}
#endif

#ifdef DEV
std::string token_to_string(int token)
{
  std::string str;
  switch(token)
  {
    case AND :                   str = "AND"; break;
    case ASSIGN :                str = "ASSIGN"; break;
    case BOOLFALSE :             str = "BOOLFALSE"; break;
    case BOOLTRUE :              str = "BOOLTRUE"; break;
    case BREAK :                 str = "BREAK"; break;
    case CASE :                  str = "CASE"; break;
    case CATCH :                 str = "CATCH"; break;
    case COLON :                 str = "COLON"; break;
    case COMMA :                 str = "COMMA"; break;
    case COMMENT :               str = "COMMENT"; break;
    case CONTINUE :              str = "CONTINUE"; break;
    case CONTROLLDIVIDE :        str = "CONTROLLDIVIDE"; break;
    case CONTROLRDIVIDE :        str = "CONTROLRDIVIDE"; break;
    case CONTROLTIMES :          str = "CONTROLTIMES"; break;
    case DO :                    str = "DO"; break;
    case DOLLAR :                str = "DOLLAR"; break;
    case DOT :                   str = "DOT"; break;
    case DOTLDIVIDE :            str = "DOTLDIVIDE"; break;
    case DOTPOWER :              str = "DOTPOWER"; break;
    case DOTQUOTE :              str = "DOTQUOTE"; break;
    case DOTRDIVIDE :            str = "DOTRDIVIDE"; break;
    case DOTS :                  str = "DOTS"; break;
    case DOTTIMES :              str = "DOTTIMES"; break;
    case ELSE :                  str = "ELSE"; break;
    case ELSEIF :                str = "ELSEIF"; break;
    case END :                   str = "END"; break;
    case ENDFUNCTION :           str = "ENDFUNCTION"; break;
    case EOL :                   str = "EOL"; break;
    case EQ :                    str = "EQ"; break;
    case FLEX_ERROR :            str = "FLEX_ERROR"; break;
    case FOR :                   str = "FOR"; break;
    case FUNCTION :              str = "FUNCTION"; break;
    case GE :                    str = "GE"; break;
    case GT :                    str = "GT"; break;
    case ID :                    str = "ID"; break;
    case IF :                    str = "IF"; break;
    case KRONLDIVIDE :           str = "KRONLDIVIDE"; break;
    case KRONRDIVIDE :           str = "KRONRDIVIDE"; break;
    case KRONTIMES :             str = "KRONTIMES"; break;
    case LBRACE :                str = "LBRACE"; break;
    case LBRACK :                str = "LBRACK"; break;
    case LDIVIDE :               str = "LDIVIDE"; break;
    case LE :                    str = "LE"; break;
    case LPAREN :                str = "LPAREN"; break;
    case LT :                    str = "LT"; break;
    case MINUS :                 str = "MINUS"; break;
    case NE :                    str = "NE"; break;
    case NOT :                   str = "NOT"; break;
    case NUM :                   str = "NUM"; break;
    case OR :                    str = "OR"; break;
    case OROR :                  str = "OROR"; break;
    case OTHERWISE :             str = "OTHERWISE"; break;
    case PLUS :                  str = "PLUS"; break;
    case POWER :                 str = "POWER"; break;
    case QUOTE :                 str = "QUOTE"; break;
    case RBRACE :                str = "RBRACE"; break;
    case RBRACK :                str = "RBRACK"; break;
    case RDIVIDE :               str = "RDIVIDE"; break;
    case RETURN :                str = "RETURN"; break;
    case RPAREN :                str = "RPAREN"; break;
    case SELECT :                str = "SELECT"; break;
    case SEMI :                  str = "SEMI"; break;
    case SPACES :                str = "SPACES"; break;
    case STR :                   str = "STR"; break;
    case SWITCH :                str = "SWITCH"; break;
    case THEN :                  str = "THEN"; break;
    case TIMES :                 str = "TIMES"; break;
    case TRY :                   str = "TRY"; break;
    case VARFLOAT :              str = "VARFLOAT"; break;
    case VARINT :                str = "VARINT"; break;
    case WHILE :                 str = "WHILE"; break;
    default :                    str = "UNKNOWN"; break;
  }
  return str;

}
#endif

