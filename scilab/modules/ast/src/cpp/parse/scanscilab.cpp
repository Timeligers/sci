
#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern int yyleng;

extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = NULL; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = NULL;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart ( FILE *input_file  );
void yy_switch_to_buffer ( YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer ( FILE *file, int size  );
void yy_delete_buffer ( YY_BUFFER_STATE b  );
void yy_flush_buffer ( YY_BUFFER_STATE b  );
void yypush_buffer_state ( YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state ( void );

static void yyensure_buffer_stack ( void );
static void yy_load_buffer_state ( void );
static void yy_init_buffer ( YY_BUFFER_STATE b, FILE *file  );
#define YY_FLUSH_BUFFER yy_flush_buffer( YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer ( char *base, yy_size_t size  );
YY_BUFFER_STATE yy_scan_string ( const char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes ( const char *bytes, int len  );

void *yyalloc ( yy_size_t  );
void *yyrealloc ( void *, yy_size_t  );
void yyfree ( void *  );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define yywrap() (/*CONSTCOND*/1)
#define YY_SKIP_YYWRAP
typedef flex_uint8_t YY_CHAR;

FILE *yyin = NULL, *yyout = NULL;

typedef int yy_state_type;

extern int yylineno;
int yylineno = 1;

extern char *yytext;
#ifdef yytext_ptr
#undef yytext_ptr
#endif
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state ( void );
static yy_state_type yy_try_NUL_trans ( yy_state_type current_state  );
static int yy_get_next_buffer ( void );
static void yynoreturn yy_fatal_error ( const char* msg  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;
#define YY_NUM_RULES 147
#define YY_END_OF_BUFFER 148
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_acclist[1017] =
    {   0,
    16409,  126,  126,  135,  135,  117,  117,  113,  113,  148,
       87,  147,   83,   87,  147,   84,  147,   84,   87,  147,
       76,   87,  147,   80,   87,  147,   28,   87,  147,   79,
       87,  147,   31,   87,  147,   82,   87,  147,   35,   87,
      147,   36,   87,  147,   49,   87,  147,   48,   87,  147,
       38,   87,  147,   47,   87,  147,   68,   87,  147,   50,
       87,  147,   70,   87,  147,   39,   87,  147,   37,   87,
      147,   61,   87,  147,   65,   87,  147,   62,   87,  147,
       27,   87,  147,   66,   87,  147,   51,   87,  147,   67,
       87,  147,   52,   87,  147,   76,   87,  147,   76,   87,

      147,   76,   87,  147,   76,   87,  147,   76,   87,  147,
       76,   87,  147,   76,   87,  147,   76,   87,  147,   76,
       87,  147,   76,   87,  147,   76,   87,  147,   76,   87,
      147,   40,   87,  147,   33,   87,  147,   41,   87,  147,
       27,   87,  147,   87,  147,   87,  147,   87,  147,   87,
      147,   87,  147,   87,  147,   87,  147,   87,  147,   87,
      147,   83,   87,  147,16409,   76,   87,  147,   28,   87,
      147,   79,   87,  147,   76,   87,  147,   76,   87,  147,
       76,   87,  147,   76,   87,  147,   76,   87,  147,   76,
       87,  147,   76,   87,  147,   76,   87,  147,   76,   87,

      147,   76,   87,  147,   76,   87,  147,   76,   87,  147,
       87,  147,   87,  147,   87,  147,   87,  147,   87,  147,
       87,  147,   87,  147,   87,  147,   87,  147,  126,  127,
      147,  125,  147,  125,  127,  147,  124,  127,  147,  123,
      127,  147,  127,  147,  135,  136,  147,  134,  147,  134,
      136,  147,  132,  136,  147,  133,  136,  147,  136,  147,
      117,  118,  147,  116,  147,  116,  118,  147,  117,  118,
      147,  118,  147,  118,  147,  113,  147,  112,  147,  112,
      147,  111,  147,  110,  111,  147,  107,  147,  107,  111,
      147,  109,  111,  147,  111,  147,  102,  147,   83,  102,

      147,   92,  147,   92,  102,  147,   76,  102,  147,   80,
      102,  147,   28,  102,  147,   79,  102,  147,   31,  102,
      147,   82,  102,  147,   88,  102,  147,   89,  102,  147,
       49,  102,  147,   96,  102,  147,   38,  102,  147,   98,
      102,  147,   68,  102,  147,   50,  102,  147,   70,  102,
      147,   39,   91,  102,  147,   37,  102,  147,   61,  102,
      147,   65,  102,  147,   62,  102,  147,   27,  102,  147,
       66,  102,  147,   51,  102,  147,   94,  102,  147,   52,
      102,  147,   40,  102,  147,   33,  102,  147,   95,  102,
      147,   27,  102,  147,  102,  147,  102,  147,  102,  147,

      102,  147,  102,  147,  102,  147,  102,  147,  102,  147,
      146,  147,  137,  147,  140,  147,  140,  147,   80,  147,
       79,  146,  147,   82,  147,  142,  146,  147,  139,  147,
      146,  147,  138,  147,  143,  146,  147,  141,  146,  147,
      144,  146,  147,  145,  146,  147,  147,   26,  147,  147,
       79,  147,  147,   26,  147,   26,  147,   26,  147,   26,
      147,   26,  147,   26,  147,   26,  147,   26,  147,   26,
      147,   26,  147,   26,  147,   26,  147,  147,  147,  147,
      147,  147,  147,  147,  147,   83,   85,   85,   81,   84,
       76,   76,   76,    3,   30,   76,    2,   29,   76,   78,

       32,   52,   42,   43,   69,   44,   75,   45,   46,   79,
       77,   74,   70,   77,   77,   63,   60,   59,   64,   76,
       76,   76,   76,   18,   76,   76,   76,   76,   76,    5,
       76,   76,   76,   76,   76,   76,   76,   76,   34,   76,
       83,16409,   76,   76,   76,    3,   30,   76,    2,   29,
       76,   76,   76,   76,   76,   18,   76,   76,   76,   76,
       76,    5,   76,   76,   76,   76,   76,   76,   76,   76,
       76,  126,  125,  119,  120,  121,  122,  135,  134,  128,
      129,  130,  131,  117,  116,  115,  117,  114,  117,  114,
      115,  113,  112,  110,  107,  108,  109,   83,   81,   93,

       90,  100,  101,   91,   92,   30,   76,   29,   76,  105,
       91,  146,  137,  140,   78,  146,   79,  146,   26,   26,
       26,    3,   26,    2,   26,   26,   26,   26,   26,   18,
       26,   26,   26,   26,   26,    5,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   86,   86,   56,   53,   54,
       55,   57,   77,   77,   77,   73,   74,   71,   77,   72,
       77,   58,   76,   76,   76,   76,   76,   76,    9,   76,
       16,   76,   76,   76,   76,   76,   76,   76,   76,   21,
       76,   76,    1,   76, 8217, 8217,   76,   76,   76,   76,
       76,   76,    9,   76,   16,   76,   76,   76,   76,   76,

       76,   76,   76,   21,   76,   76,    1,   76,   97,   99,
      106,  103,  104,   26,   26,   26,   26,   26,   26,    9,
       26,   16,   26,   26,   26,   26,   26,   26,   26,   26,
       21,   26,   26,   71,   72,   77,   77,   76,   76,   13,
       76,   76,   76,    7,   76,   76,   76,   76,   76,   76,
       76,   76,    6,   76,   76,    1,    1,   76,    1,    1,
        1,    1,    1,    1,    1,    1,   76, 8217,   76,   76,
       13,   76,   76,   76,    7,   76,   76,   76,   76,   76,
       76,   76,   76,    6,   76,   76,    1,    1,   76,    1,
        1,    1,    1,    1,    1,    1,    1,   76,   26,   26,

       13,   26,   26,   26,    7,   26,   26,   26,   26,   26,
       26,   26,   26,    6,   26,   26,   26,   76,   76,   76,
       77,   77,   76,   19,   76,   22,   76,   76,   76,   76,
       76,   76,   76,   76,   76,   76,   17,   76,    1,    1,
        1,    1,    1,    1,    1,   76,   76,   76,   76,   19,
       76,   22,   76,   76,   76,   76,   76,   76,   76,   76,
       76,   76,   17,   76,    1, 8217,    1, 8217,    1,    1,
        1,    1,    1,    1,    1,   26,   26,   26,   26,   19,
       26,   22,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   17,   26,   77,   77,   77,   76,   76,    8,

       76,   76,   76,   76,   24,   76,   23,   76,   10,   76,
       11,   76,    1,    1,    1,   76,   76,    8,   76,   76,
       76,   76,   24,   76,   23,   76,   10,   76,   11,   76,
        1, 8217,    1,    1,    1,   26,   26,    8,   26,   26,
       26,   26,   24,   26,   23,   26,   10,   26,   11,   26,
       77,   76,   76,   76,   76,   76,    1,   76,   76,   76,
       76,   76,   76,    1,   76,   26,   26,   26,   26,   26,
       77,   76,   20,   76,   76,   14,   76,   76,   76,   20,
       76,   76,   14,   76,   76,   26,   20,   26,   26,   14,
       26,   26,    4,   76,   76,   12,   76,    4,   76,   76,

       12,   76,    4,   26,   26,   12,   26,   76,   76,   26,
       15,   76,   15,   76,   15,   26
    } ;

static const flex_int16_t yy_accept[1052] =
    {   0,
        1,    1,    2,    3,    4,    5,    6,    7,    8,    9,
       10,   10,   10,   10,   10,   10,   10,   10,   10,   11,
       13,   16,   18,   21,   24,   27,   30,   33,   36,   39,
       42,   45,   48,   51,   54,   57,   60,   63,   66,   69,
       72,   75,   78,   81,   84,   87,   90,   93,   96,   99,
      102,  105,  108,  111,  114,  117,  120,  123,  126,  129,
      132,  135,  138,  141,  144,  146,  148,  150,  152,  154,
      156,  158,  160,  162,  166,  169,  172,  175,  178,  181,
      184,  187,  190,  193,  196,  199,  202,  205,  208,  211,
      213,  215,  217,  219,  221,  223,  225,  227,  229,  232,

      234,  237,  240,  243,  245,  248,  250,  253,  256,  259,
      261,  264,  266,  269,  272,  274,  276,  278,  280,  282,
      284,  287,  289,  292,  295,  297,  299,  302,  304,  307,
      310,  313,  316,  319,  322,  325,  328,  331,  334,  337,
      340,  343,  346,  349,  352,  356,  359,  362,  365,  368,
      371,  374,  377,  380,  383,  386,  389,  392,  395,  397,
      399,  401,  403,  405,  407,  409,  411,  413,  415,  417,
      419,  421,  424,  426,  429,  431,  433,  435,  438,  441,
      444,  447,  448,  450,  451,  453,  454,  456,  458,  460,
      462,  464,  466,  468,  470,  472,  474,  476,  478,  479,

      480,  481,  482,  483,  484,  485,  486,  487,  488,  489,
      490,  490,  490,  491,  492,  492,  492,  492,  492,  492,
      492,  492,  492,  493,  493,  493,  493,  493,  493,  493,
      493,  493,  494,  497,  500,  501,  501,  501,  501,  501,
      501,  501,  501,  501,  502,  503,  503,  504,  505,  506,
      507,  508,  509,  510,  510,  511,  512,  512,  512,  513,
      514,  515,  516,  516,  516,  516,  516,  516,  516,  516,
      516,  516,  517,  518,  518,  519,  519,  520,  520,  520,
      521,  522,  523,  524,  526,  527,  528,  529,  530,  532,
      533,  534,  535,  536,  537,  538,  539,  540,  540,  541,

      541,  541,  541,  541,  541,  541,  541,  541,  543,  543,
      543,  543,  543,  543,  543,  543,  543,  543,  543,  543,
      543,  544,  544,  544,  544,  544,  544,  544,  544,  544,
      545,  545,  545,  545,  545,  545,  545,  545,  545,  546,
      549,  552,  552,  552,  552,  552,  552,  552,  552,  552,
      553,  554,  555,  556,  558,  559,  560,  561,  562,  564,
      565,  566,  567,  568,  569,  570,  571,  572,  572,  572,
      572,  572,  572,  572,  572,  572,  573,  574,  575,  576,
      577,  578,  579,  580,  581,  582,  583,  584,  585,  586,
      588,  590,  591,  592,  593,  594,  595,  596,  597,  598,

      599,  601,  602,  603,  604,  604,  605,  606,  608,  610,
      610,  610,  611,  612,  613,  614,  615,  617,  619,  620,
      620,  620,  620,  620,  620,  620,  620,  620,  621,  621,
      621,  621,  621,  621,  621,  621,  621,  622,  624,  626,
      626,  626,  626,  626,  626,  626,  626,  626,  627,  628,
      629,  630,  632,  633,  634,  635,  636,  638,  639,  640,
      641,  642,  643,  644,  645,  646,  646,  646,  646,  646,
      646,  646,  646,  647,  648,  648,  648,  648,  648,  648,
      648,  648,  648,  648,  648,  648,  648,  648,  648,  648,
      648,  648,  648,  648,  648,  648,  649,  650,  651,  651,

      651,  652,  653,  654,  654,  654,  654,  654,  654,  654,
      654,  654,  655,  655,  655,  655,  655,  655,  655,  655,
      655,  656,  656,  656,  656,  656,  656,  656,  656,  656,
      657,  658,  658,  660,  660,  662,  662,  662,  662,  662,
      662,  662,  662,  663,  664,  665,  666,  667,  668,  669,
      671,  673,  674,  675,  676,  677,  678,  679,  680,  682,
      683,  685,  685,  685,  685,  685,  685,  685,  685,  685,
      685,  685,  685,  685,  685,  685,  685,  685,  685,  685,
      685,  685,  685,  685,  685,  685,  685,  685,  685,  685,
      685,  685,  685,  685,  685,  685,  685,  685,  685,  686,

      687,  687,  687,  687,  687,  687,  687,  687,  687,  687,
      687,  687,  687,  687,  687,  687,  687,  687,  687,  687,
      687,  687,  688,  689,  690,  691,  692,  693,  695,  697,
      698,  699,  700,  701,  702,  703,  704,  706,  707,  709,
      709,  709,  709,  710,  711,  712,  713,  714,  714,  714,
      714,  714,  714,  714,  714,  714,  714,  714,  714,  714,
      714,  714,  714,  714,  714,  714,  714,  714,  714,  715,
      716,  717,  718,  719,  720,  722,  724,  725,  726,  727,
      728,  729,  730,  731,  733,  734,  734,  734,  734,  734,
      734,  734,  734,  734,  734,  734,  734,  734,  735,  736,

      736,  736,  736,  736,  736,  736,  736,  736,  736,  736,
      736,  736,  736,  736,  736,  736,  736,  736,  736,  736,
      736,  737,  738,  738,  738,  738,  738,  738,  738,  738,
      738,  738,  738,  738,  739,  740,  742,  743,  744,  746,
      747,  748,  749,  750,  751,  752,  753,  755,  756,  757,
      759,  760,  761,  762,  763,  764,  765,  766,  767,  768,
      768,  768,  768,  768,  768,  768,  768,  768,  768,  768,
      768,  768,  768,  768,  768,  768,  768,  768,  768,  768,
      768,  768,  768,  768,  769,  769,  769,  769,  769,  769,
      769,  769,  769,  769,  770,  771,  773,  774,  775,  777,

      778,  779,  780,  781,  782,  783,  784,  786,  787,  788,
      790,  791,  792,  793,  794,  795,  796,  797,  798,  799,
      799,  799,  799,  799,  799,  799,  799,  799,  799,  800,
      801,  803,  804,  805,  807,  808,  809,  810,  811,  812,
      813,  814,  816,  817,  818,  819,  820,  821,  821,  821,
      821,  821,  821,  821,  821,  821,  821,  822,  822,  822,
      822,  822,  822,  822,  822,  822,  822,  822,  822,  822,
      822,  822,  822,  823,  824,  826,  828,  829,  830,  831,
      832,  833,  834,  835,  836,  837,  839,  840,  841,  842,
      843,  844,  845,  846,  846,  846,  846,  846,  846,  846,

      846,  846,  846,  846,  847,  848,  849,  850,  852,  854,
      855,  856,  857,  858,  859,  860,  861,  862,  863,  865,
      867,  869,  870,  871,  872,  873,  874,  875,  876,  877,
      878,  879,  880,  882,  884,  885,  886,  887,  888,  889,
      890,  891,  892,  893,  895,  896,  897,  898,  898,  898,
      898,  898,  898,  898,  898,  898,  898,  898,  899,  900,
      902,  903,  904,  905,  907,  909,  911,  913,  914,  915,
      916,  916,  916,  916,  917,  918,  920,  921,  922,  923,
      925,  927,  929,  931,  933,  934,  935,  936,  937,  938,
      940,  941,  942,  943,  945,  947,  949,  951,  951,  951,

      951,  952,  953,  954,  955,  956,  957,  959,  960,  961,
      962,  963,  964,  966,  967,  968,  969,  970,  971,  972,
      973,  975,  976,  978,  979,  980,  982,  983,  985,  986,
      987,  989,  990,  992,  993,  995,  996,  998, 1000, 1001,
     1003, 1005, 1006, 1008, 1009, 1010, 1011, 1013, 1015, 1017,
     1017
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        2,    2,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    5,    6,    5,    7,    8,    9,   10,   11,
       12,   13,   14,   15,   16,   17,   18,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   20,   21,   22,
       23,   24,    5,   25,    5,    5,    5,   26,   27,   28,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,   29,    5,    5,    5,    5,    5,    5,
       30,   31,   32,   33,    5,    1,   34,   35,   36,   37,

       38,   39,   40,   41,   42,    5,   43,   44,   45,   46,
       47,    5,    5,   48,   49,   50,   51,    5,   52,    5,
       53,    5,   54,   55,   56,   57,    1,   58,   58,   58,
       58,   58,   58,   58,   58,   58,   58,   58,   58,   58,
       58,   58,   58,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   60,
       60,   60,   60,   60,   60,   60,   60,   60,   60,   60,
       60,   60,   60,   60,   60,   60,   60,   60,   60,   60,
       60,   60,   60,   60,   60,   60,   61,   60,   60,   60,
       62,    1,    1,   63,   63,   63,   63,   63,   63,   63,

       63,   63,   63,   63,   63,   63,   63,   63,   63,   63,
       63,   63,   63,   63,   63,   63,   63,   63,   63,   63,
       63,   63,   63,   64,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   66,   67,   68,   69,
       70,   70,   70,   71,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const YY_CHAR yy_meta[72] =
    {   0,
        1,    2,    3,    4,    5,    6,    5,    7,    1,    8,
        9,    1,   10,    1,   11,    1,   12,   10,   13,    1,
       11,    9,    9,    9,    1,    5,    5,    5,    5,    1,
        1,    1,    1,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,   14,    1,    1,    1,    1,    1,    1,
        1,    1,    5,    5,    5,    5,    5,    5,    5,    5,
        5
    } ;

static const flex_int16_t yy_base[1099] =
    {   0,
        0,   71,  140,  145,  150,  155,  160,  166,  172,  177,
      183,  186,  204,    0,  274,  330,  387,    0, 4122, 4139,
      193,  279,  288,  247, 4139,  256,  431, 4112, 4139, 4139,
     4139,  185, 4139, 4139, 4139,  346,  270,  498, 4139, 4139,
      169,  143,  284,  306, 4139, 4103, 4139, 4139,  507, 4071,
      296,  135,  258,  299,  289,  310,  301,  319,  294,  320,
     4139, 4062, 4139,  360,  314,  320,  403,  141,  413,  418,
      407,  428, 4058,  577,  526,  535,  621,  691, 4041,  473,
      322,  464,  471,  443,  336,  445,  569,  337,  463,  498,
      469,  550,  455,  564,  569,  554,  574, 4027,    0, 4139,

     4081,  295,  576, 4139,    0, 4139, 4080,  645,  646, 4139,
        0, 4139, 4079,  498, 4063, 4066,    0, 4139, 4071, 4139,
     4069, 4139, 4066, 4013,  134, 4139,  662,  659,  692, 4018,
     4139,  633,  735, 4056, 4139, 4139, 4139,  640, 4036, 4139,
     4035,  698,  641,    0, 4043, 4139,  703,  616,  660,  707,
     4139, 4022, 4139, 4139, 4139, 3983, 4139,  710,  660,  607,
      676,  561,  682,  686,  691, 3975,    0,  482, 4139, 4026,
     4139, 3973, 4139,    0, 4139,  570, 4139,    0,    0,    0,
        0, 4139,  702,  712,  779,  710,  746, 3977,  787,  590,
      740,  744,  748,  772,  676,  788,  468,  622,  793,  763,

      798,  769,  803,  807,  812, 3966,  828, 4139, 4016, 4139,
      873,  876,  880, 3967,  825,  838,  844,  831,  849,  853,
      858, 3955,    0,  863,  866,  871,  834,  876,  880,  885,
     3953,  920,  922,  925, 4139,  907,  895,  922,  904,  927,
      931,  936, 3952, 4139, 4139,    0, 4139,  664, 3989, 3988,
      980, 3987, 4139,    0, 4139,  945,  956,  965, 1024,    0,
     1044,  986,  986,  978,  991,  919, 1006, 1010, 1015, 3945,
     1057, 4139, 4139,  950, 4139, 1059, 4139, 1060,    0, 1038,
     1041, 1042,  791, 3954,  955,  923, 3953, 1008, 3952,  684,
     1045,  662, 1054, 1049, 1050, 1057, 4139, 1083, 3950, 1058,

     1063, 1068, 1073, 1078, 1083, 1088, 1093, 1154, 1102, 1111,
     1120, 1134, 1137, 1142, 1042, 1147, 1151, 1168, 3939, 1212,
     1213, 1173, 1178, 1183, 1101, 1188, 1192, 1197, 3936, 1234,
     1202, 1205, 1212, 1227, 1229, 1233, 1248, 3935, 1266, 1294,
        0, 1253, 1256, 1261, 1266, 1280, 1284, 1289, 3934, 1364,
     1288, 1327, 1328, 3951, 1329,  753, 1331, 1335, 3950, 1312,
     1333, 1044, 1314, 1332, 1340, 1344, 3949, 1329, 1336, 1341,
     1347, 1352, 1357, 1362, 1378,    0, 4139, 4139, 4139, 4139,
     4139,    0, 4139, 4139, 4139, 4139, 4139,    0, 4139,    0,
        0, 4139, 4139,    0, 4139, 3986, 4139, 4139, 4139, 1439,

     4139, 4139,  879, 1443, 3969, 3983, 1442, 1419, 1433, 3965,
     3964, 3963, 3977,    0, 1444, 4139,    0,    0, 3930, 1406,
     1414, 1419, 1367, 1430, 1434, 1439, 3919, 1439, 1453, 1424,
     1458, 1393, 1463, 1467, 1472, 3918, 1472, 1481,    0, 1495,
     1498, 1503, 1412, 1508, 1512, 1517, 3916, 1540, 1543, 1534,
     1539, 3925, 1541, 1549, 3920, 1546, 3918, 1344, 1550, 1557,
     1554, 1555, 1556, 1564, 3908, 1555, 1560, 1565, 1570, 1575,
     1580, 1585, 4139, 3952, 1590, 1595, 1600, 1605, 1610, 1615,
     1620, 1625, 1630, 1635, 1640, 1645, 1650, 1655, 1660, 1665,
     1670, 1675, 1680, 1685, 1690, 4139, 4139, 4139, 1739, 1740,

     4139, 4139, 1746, 1708, 1711, 1716, 1549, 1721, 1725, 1730,
     3896, 1730, 1744, 1747, 1752, 1552, 1757, 1761, 1766, 3895,
     1766, 1780, 1783, 1788, 1705, 1793, 1797, 1802, 3894, 4139,
     1848, 3932, 1861, 3931, 1926, 1812, 1817, 1823, 1828, 1833,
     1838, 1843, 4139, 1858,  245, 1869, 1872, 1862, 1873, 1874,
     3900, 1887, 1898, 1867, 1868, 1899, 1890, 1893, 3899, 1713,
     1997, 1890, 1895, 1900, 1912, 1905, 1882, 1910, 1915, 1926,
     2010, 2015, 3886, 2076, 2021, 2024, 2029, 2034, 2036, 2040,
     2045, 3872, 2106, 2051, 2054, 2059, 2064, 2066, 2070, 2075,
     3858, 2090, 2095, 2100, 2105, 2120, 2125, 2130, 4139, 2191,

     2136, 2149, 2158, 2163, 2168, 2173, 2178, 2183, 2188, 2193,
     2198, 2203, 2208, 2213, 2218, 2223, 2228, 2233, 2238, 2243,
     2248, 2163, 2165, 2273, 2164, 2272, 2276, 2278, 3861, 2279,
     2283, 2280, 2284, 2287, 2286, 2288, 3860, 2289, 2336, 2350,
     2355, 2360, 3897, 3896, 3880, 3879, 3878, 2365, 2370, 2375,
     2380, 2385, 2390, 2395, 2400, 2405, 2410, 2415, 2420, 2425,
     2430, 2435, 2440, 2445, 2450, 2455, 2460, 2465, 2480, 2495,
     2492, 2496, 2282, 2497, 2494, 3842, 2498, 2499, 2488, 2490,
     2510, 2501, 2504, 3839, 2509, 2501, 2506, 2511, 2516, 2521,
     2526, 2531, 2536, 2541, 2546, 2551, 2556, 2602, 2605, 2575,

     2586, 2591, 2596, 2601, 2606, 2611, 2616, 2621, 2626, 2631,
     2636, 2641, 2646, 2651, 2656, 2661, 2666, 2671, 2676, 2681,
     2611, 2681, 2695, 2494, 2700, 2705, 2707, 2711, 2716, 3827,
     2721, 2726, 2731, 2575, 2751, 3835, 2754, 2755, 2756, 2590,
     2757, 3834, 2761, 3833, 2760, 2764, 3821, 2763,    0,    0,
     2755, 2758, 2763, 2768, 2770, 2774, 2779, 3810, 3813, 2784,
     2789, 2794, 2799, 2804, 2809, 2814, 2819, 2824, 2829, 2834,
     2839, 2844, 2849, 2854, 2859, 2864, 2869, 2874, 2879, 2884,
     2889, 2894, 2899, 2960, 2905, 2918, 2927, 2932, 2937, 2942,
     2947, 2952, 2957, 2928, 2929, 3815, 2980, 2982, 2983, 2986,

     2988, 2987, 2989, 2991, 2934, 2996, 3814, 3002, 3041,    0,
     2987, 2993, 2999, 2992, 3009, 3013, 3018, 3791, 3805, 3023,
     3028, 3033, 3041, 3046, 3051, 3056, 3061, 3066, 2985, 3086,
     3795, 3089, 3090, 3091, 3092, 3094, 3793, 3100, 3792, 3099,
     3105, 3787, 3098, 3783, 3781, 3091, 3135, 3107, 3117, 3122,
     3132, 3137, 3142, 3147, 3152, 3157, 3157, 3171, 3089, 3176,
     3038, 3181, 3111, 3186, 3769, 3191, 3196, 3201, 3206, 3211,
     3216, 3221, 3270, 3247, 3778, 3773, 3140, 3248, 3242, 3249,
     3246, 3254, 3253, 3255, 3252, 3772, 3248, 3253, 3258, 3263,
     3268, 3273, 3278, 3283, 3288, 3293, 3298, 3303, 3308, 3313,

     3318, 3323,    0, 3779, 3384, 3393, 3349, 3766, 3752, 3348,
     3351, 3352, 3357, 3353, 3362, 3361, 3356, 3363, 3737,    0,
     3406, 3352, 3357, 3362, 3372, 3377, 3382, 3407, 3639, 3407,
        0, 3441, 3603, 3544, 3379, 3442, 3380, 3438, 3435, 3444,
     3445, 3446, 3447, 3453, 3483,    0,    0, 3445, 3450, 3455,
     3460, 3465, 3470, 3475, 3480, 3485, 3490, 3452, 3505, 3256,
     3518, 3398, 3513, 3139, 3104, 3083, 2993, 3509, 3514, 3519,
        0,    0,    0, 3517, 3542, 2943, 3522, 3543, 3544, 2770,
     2586, 2299, 2161, 3562, 3536, 3541, 3546, 3541, 3540, 2120,
     3573, 3437, 3568, 2090, 1952, 1818, 1547, 3553, 3564, 3569,

     3618, 3569, 3595, 3570, 3590, 3511,    0, 3595, 3601, 3600,
     3602, 3604,    0, 3599, 3608, 3604, 3609, 3610,    0, 3612,
     1434, 3620, 1307, 3625, 3625, 1287, 3624, 1235, 3629, 3622,
     1168, 3630, 1115, 3637,  953, 3629,  910,  801, 3639,  779,
      749, 3633,  505, 3636, 3643, 3642,  475,  326,  129, 4139,
     3690, 3704, 3718, 3732, 3746, 3760, 3770, 3771, 3780, 3793,
     3800, 3773, 3809, 3823, 3837, 3851, 3865, 3879, 3774, 3775,
     3889, 3903, 3917, 3776, 3777, 3786, 3931, 3944, 3798, 3799,
     3957, 3970, 3982, 3994, 4007, 4021, 4035, 4049, 4063, 3802,
     3803, 4073, 3804, 4086, 4100, 3805, 4113, 4125

    } ;

static const flex_int16_t yy_def[1099] =
    {   0,
     1050, 1050, 1051, 1051, 1052, 1052, 1053, 1053, 1054, 1054,
     1055, 1055, 1050,   13, 1056, 1056, 1050,   17, 1050, 1050,
     1050, 1050, 1050, 1057, 1050, 1058, 1059, 1050, 1050, 1050,
     1050, 1050, 1050, 1050, 1050, 1050, 1050, 1050, 1050, 1050,
     1050, 1050, 1050, 1050, 1050, 1050, 1050, 1050, 1057,   49,
       49,   49,   49,   49,   49,   49,   49,   49,   49,   49,
     1050, 1050, 1050, 1050, 1050, 1050, 1050, 1050, 1050, 1050,
     1050, 1050, 1050, 1060, 1061, 1062, 1063, 1061,   78,   78,
       78,   78,   78,   78,   78,   78,   78,   78,   78, 1050,
     1050, 1050, 1050, 1050, 1050, 1050, 1050, 1050, 1064, 1050,

     1050, 1050, 1050, 1050, 1065, 1050, 1050, 1050, 1050, 1050,
     1066, 1050, 1050, 1066, 1050, 1050, 1067, 1050, 1050, 1050,
     1050, 1050, 1050, 1050, 1050, 1050, 1050, 1050, 1050,   49,
     1050, 1058, 1059, 1050, 1050, 1050, 1050, 1050, 1050, 1050,
     1050, 1050, 1050,   38, 1050, 1050, 1050, 1050, 1050, 1050,
     1050, 1050, 1050, 1050, 1050, 1050, 1050, 1050, 1050, 1050,
     1050, 1050, 1050, 1050, 1050, 1050, 1068, 1050, 1050, 1050,
     1050, 1068, 1050, 1068, 1050, 1068, 1050, 1068, 1068, 1068,
     1068, 1050, 1069, 1070, 1071, 1050, 1069,  187,  187,  187,
      187,  187,  187,  187,  187,  187,  187,  187, 1050, 1050,

     1050, 1050, 1050, 1050, 1050, 1050, 1050, 1050, 1050, 1050,
     1050, 1050, 1050,   49, 1050, 1050, 1050, 1050, 1050, 1050,
     1050, 1050,  132, 1050, 1050, 1050, 1050, 1050, 1050, 1050,
     1050,  133,  133,  133, 1050, 1050, 1050, 1050, 1050, 1050,
     1050, 1050, 1050, 1050, 1050, 1072, 1050, 1050, 1050, 1050,
     1050, 1050, 1050, 1073, 1050, 1074, 1075, 1076,   38,   38,
     1074,  261, 1050, 1050, 1050, 1050, 1050, 1050, 1050, 1050,
     1050, 1050, 1050, 1050, 1050, 1050, 1050, 1050, 1077,   49,
       49,   49,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49, 1050, 1050,   49, 1050,

     1050, 1050, 1050, 1050, 1050, 1050, 1050, 1060, 1078, 1079,
     1080, 1050, 1050, 1050, 1050, 1050, 1050, 1050, 1050, 1081,
     1082, 1050, 1050, 1050, 1050, 1050, 1050, 1050, 1050, 1083,
     1050, 1050, 1050, 1050, 1050, 1050, 1050, 1050, 1084, 1084,
      340, 1050, 1050, 1050, 1050, 1050, 1050, 1050, 1050, 1082,
      350,  350,  350,  350,  350,  350,  350,  350,  350,  350,
      350,  350,  350,  350,  350,  350,  350, 1050, 1050, 1050,
     1050, 1050, 1050, 1050, 1050, 1085, 1050, 1050, 1050, 1050,
     1050, 1086, 1050, 1050, 1050, 1050, 1050, 1087, 1050, 1087,
     1087, 1050, 1050, 1088, 1050, 1050, 1050, 1050, 1050, 1050,

     1050, 1050, 1050, 1050, 1050, 1050, 1050,  133,  133, 1050,
     1050, 1050, 1050, 1089, 1050, 1050, 1089, 1089,  187, 1050,
     1050, 1050, 1050, 1050, 1050, 1050, 1050, 1090, 1050, 1050,
     1050, 1050, 1050, 1050, 1050, 1050, 1091, 1091,  438, 1050,
     1050, 1050, 1050, 1050, 1050, 1050, 1050,  187,  187,  187,
      187,  187,  187,  187,  187,  187,  187,  187,  187,  187,
      187,  187,  187,  187,  187, 1050, 1050, 1050, 1050, 1050,
     1050, 1050, 1050, 1050, 1050, 1050, 1050, 1050, 1050, 1050,
     1050, 1050, 1050, 1050, 1050, 1050, 1050, 1050, 1050, 1050,
     1050, 1050, 1050, 1050, 1050, 1050, 1050, 1050, 1050, 1050,

     1050, 1050,  261, 1050, 1050, 1050, 1050, 1050, 1050, 1050,
     1050, 1075, 1050, 1050, 1050, 1050, 1050, 1050, 1050, 1050,
     1076, 1050, 1050, 1050, 1050, 1050, 1050, 1050, 1050, 1050,
       38, 1050, 1092, 1050, 1092, 1050, 1050, 1050, 1050, 1050,
     1050, 1050, 1050,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49,   49,   49,   49,   49,
     1050, 1050, 1050, 1050, 1078, 1050, 1050, 1050, 1050, 1050,
     1050, 1050, 1050, 1079, 1050, 1050, 1050, 1050, 1050, 1050,
     1050, 1050, 1080, 1050, 1050, 1050, 1050, 1050, 1050, 1050,
     1050, 1050, 1050, 1050, 1050, 1050, 1050, 1050, 1050, 1081,

     1050, 1050, 1050, 1050, 1050, 1050, 1050, 1050, 1050, 1050,
     1050, 1050, 1050, 1050, 1050, 1050, 1050, 1050, 1050, 1050,
     1050,  350,  350,  350,  350,  350,  350,  350,  350,  350,
      350,  350,  350,  350,  350,  350,  350,  350, 1050, 1050,
     1050, 1050, 1050, 1050, 1050, 1050, 1050, 1050, 1050, 1050,
     1050, 1050, 1050, 1050, 1050, 1050, 1050, 1050, 1050, 1050,
     1050, 1050, 1050, 1050, 1050, 1050, 1050, 1050,  187,  187,
      187,  187,  187,  187,  187,  187,  187,  187,  187,  187,
      187,  187,  187,  187,  187, 1050, 1050, 1050, 1050, 1050,
     1050, 1050, 1050, 1050, 1050, 1050, 1050,   38,   38, 1050,

     1050, 1050, 1050, 1050, 1050, 1050, 1050, 1050, 1050, 1050,
     1050, 1050, 1050, 1050, 1050, 1050, 1050, 1050, 1050, 1050,
      261, 1093, 1050, 1050, 1050, 1050, 1050, 1050, 1050, 1050,
     1050, 1050, 1050,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49,   49,   49, 1094,  561,
     1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094,   49, 1050,
     1050, 1050, 1050, 1050, 1050, 1050, 1050, 1050, 1050, 1050,
     1050, 1050, 1050, 1050, 1050, 1050, 1050, 1050, 1050, 1050,
     1050, 1050, 1050, 1081, 1050, 1050, 1050, 1050, 1050, 1050,
     1050, 1050, 1050,  350,  350,  350,  350,  350,  350,  350,

      350,  350,  350,  350,  350,  350,  350,  350, 1095,  639,
     1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094,  350, 1050,
     1050, 1050, 1050, 1050, 1050, 1050, 1050, 1050,  187,  187,
      187,  187,  187,  187,  187,  187,  187,  187,  187,  187,
      187,  187,  187,  187,   49, 1096,  133, 1050, 1050, 1050,
     1050, 1050, 1050, 1050, 1050, 1050, 1093, 1050, 1050, 1050,
     1050, 1050, 1050, 1050, 1050, 1050, 1050, 1050, 1050, 1050,
     1050, 1050,  261,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49, 1094, 1094, 1094, 1094,
     1094, 1094, 1094, 1050, 1050, 1050, 1050, 1050, 1050, 1050,

     1050, 1050,  565,  350, 1097, 1098,  350,  350,  350,  350,
      350,  350,  350,  350,  350,  350,  350,  350,  350, 1094,
     1095, 1094, 1094, 1094, 1094, 1094, 1094, 1094,  187, 1090,
      438,  187,  187,  187,  187,  187,  187,  187,  187,  187,
      187,  187,  187,  187,  261,  512,  521, 1050, 1050, 1050,
     1050, 1050, 1050, 1050, 1050, 1050, 1050,   49,   49,   49,
       49,   49,   49,   49,   49,   49,   49, 1094, 1094, 1094,
      565,  574,  583,  350,  350,  350,  350,  350,  350,  350,
      350,  350,  350, 1095, 1094, 1094, 1094,  187,  187,  187,
      187,  187,  187,  187,  187,  187,  187, 1050, 1050, 1050,

      261,   49,   49,   49,   49,   49,  561,  350,  350,  350,
      350,  350,  639,  187,  187,  187,  187,  187,  857,   49,
       49,   49,   49,   49,  350,  350,  350,  350,  350,  187,
      187,  187,  187,  187,   49,   49,   49,  350,  350,  350,
      187,  187,  187,   49,  350,  187,   49,  350,  187,    0,
     1050, 1050, 1050, 1050, 1050, 1050, 1050, 1050, 1050, 1050,
     1050, 1050, 1050, 1050, 1050, 1050, 1050, 1050, 1050, 1050,
     1050, 1050, 1050, 1050, 1050, 1050, 1050, 1050, 1050, 1050,
     1050, 1050, 1050, 1050, 1050, 1050, 1050, 1050, 1050, 1050,
     1050, 1050, 1050, 1050, 1050, 1050, 1050, 1050

    } ;

static const flex_int16_t yy_nxt[4211] =
    {   0,
       20,   21,   22,   23,   24,   25,   26,   27,   28,   29,
       30,   31,   32,   33,   34,   35,   36,   37,   38,   39,
       40,   41,   42,   43,   44,   24,   24,   24,   24,   45,
       46,   47,   48,   49,   50,   51,   52,   53,   54,   24,
       24,   55,   24,   24,   24,   24,   56,   57,   58,   59,
       24,   60,   24,   61,   62,   63,   64,   20,   20,   20,
       20,   20,   65,   66,   67,   68,   69,   70,   71,   72,
       73,   20,   74,   22,   23,   75,   25,   76,   77,   28,
       29,   30,   31,   32,   33,   34,   35,   36,   37,   38,
       39,   40,   41,   42,   43,   44,   75,   75,   75,   75,

       45,   46,   47,   48,   78,   79,   80,   81,   82,   83,
       75,   75,   84,   75,   75,   75,   75,   85,   86,   87,
       88,   75,   89,   75,   61,   62,   63,   64,   20,   20,
       20,   20,   20,   90,   91,   92,   93,   94,   95,   96,
       97,   98,  100,  101,  274,  102,  398,  100,  101,  103,
      102,  399,  106,  107,  103,  108,  104,  106,  107,  109,
      108,  104,  112,  113,  109,  275,  110,  114,  112,  113,
      271,  110,  115,  114,  118,  119,  419,  116,  115,  118,
      119,  284,  214,  116,  121,  122,  123,  121,  122,  123,
      124,  272,  273,  124,  207,  208,  209,  245,  302,  302,

      125,  246,  210,  125,  126,  127,  128,  129,  130,  131,
      132,  133,  134,  135,  136,  137,  138,  139,  140,  141,
      142,  143,  144,  145,  146,  147,  148,  149,  150,  130,
      130,  130,  130,  151,  152,  153,  154,  130,  130,  130,
      130,  130,  130,  130,  130,  130,  130,  130,  130,  130,
      130,  130,  130,  130,  130,  130,  130,  155,  156,  157,
      158,  126,  126,  126,  126,  126,  159,  160,  161,  162,
      163,  163,  164,  165,  166,  168,  169,  170,  735,  171,
      211,  172,  235,  173,  174,  276,  254,  255,  175,  211,
      213,  176,  214,  212,  177,  178,  179,  180,  181,  212,

      378,  285,  212,  286,  379,  214,  277,  278,  212,  215,
      216,  217,  218,  219,  219,  220,  221,  222,  224,  225,
      226,  227,  228,  228,  229,  230,  231,  289,  273,  282,
      181,  168,  169,  170,  294,  171,  214,  172,  291,  173,
      174,  295,  283,  214,  175,  287,  214,  176,  214,  288,
      177,  178,  179,  180,  181,  247,  292,  214,  248,  290,
      296,  298,  249,  250,  251,  321,  214,  214,  354,  321,
      293,  299,  299,  299,  299,  299,  252,  364,  253,  300,
      300,  300,  273,  321,  365,  360,  181,  182,  182,  182,
      182,  183,  182,  184,  185,  182,  182,  182,  182,  182,

      182,  182,  182,  182,  186,  182,  182,  182,  182,  182,
      182,  182,  183,  183,  183,  183,  182,  182,  182,  182,
      187,  188,  189,  190,  191,  192,  183,  183,  193,  183,
      183,  183,  183,  194,  195,  196,  197,  183,  198,  183,
      182,  182,  182,  182,  182,  182,  182,  182,  182,  199,
      200,  201,  202,  203,  203,  204,  205,  206,  233,  234,
      301,  301,  301,  301,  301,  305,  305,  305,  305,  233,
      303,  303,  303,  303,  303,  303,  303,  303,  304,  303,
      234,  359,  361,  415,  235,  306,  306,  306,  306,  306,
      321,  210,  321,  236,  237,  238,  239,  240,  240,  241,

      242,  243,  256,  366,  257,  258,  352,  355,  462,  356,
      321,  321,  370,  370,  259,  463,  260,  357,  321,  353,
      321,  358,  214,  261,  262,  256,  256,  320,  368,  368,
      368,  256,  256,  256,  261,  262,  256,  256,  256,  256,
      256,  256,  256,  256,  256,  256,  256,  256,  256,  256,
      256,  390,  419,  391,  280,  367,  367,  367,  367,  367,
      263,  264,  265,  266,  267,  267,  268,  269,  270,  215,
      216,  217,  218,  219,  219,  220,  221,  222,  308,  208,
      209,  380,  417,  310,  311,  381,  210,  418,  322,  323,
      324,  325,  326,  326,  327,  328,  329,  331,  332,  333,

      334,  335,  335,  336,  337,  338,  362,  369,  369,  369,
      369,  369,  373,  373,  373,  373,  321,  274,  302,  302,
      363,  371,  371,  371,  371,  371,  371,  371,  371,  372,
      371,  374,  374,  374,  374,  374,  452,  419,  275,  312,
      313,  314,  315,  316,  316,  317,  318,  319,  340,  341,
      384,  386,  245,  235,  385,  387,  246,  254,  255,  340,
      211,  276,  464,  400,  208,  209,  300,  300,  300,  419,
      341,  401,  402,  212,  235,  403,  253,  404,  405,  212,
      497,  406,  277,  342,  343,  344,  345,  346,  346,  347,
      348,  349,  320,  211,  407,  224,  225,  226,  227,  228,

      228,  229,  230,  231,  271,  556,  212,  247,  278,  214,
      248,  298,  212,  459,  412,  250,  251,  299,  299,  299,
      299,  299,  235,  419,  553,  272,  273,  255,  252,  273,
      253,  214,  273,  301,  301,  301,  301,  301,  350,  303,
      303,  303,  303,  303,  305,  305,  305,  305,  306,  306,
      306,  306,  306,  322,  323,  324,  325,  326,  326,  327,
      328,  329,  408,  409,  420,  421,  422,  423,  424,  424,
      425,  426,  427,  408,  429,  430,  431,  432,  433,  433,
      434,  435,  436,  453,  409,  454,  457,  419,  235,  628,
      455,  419,  321,  448,  456,  419,  419,  236,  237,  238,

      239,  240,  240,  241,  242,  243,  438,  439,  420,  421,
      422,  423,  424,  424,  425,  426,  427,  438,  321,  419,
      450,  458,  466,  466,  466,  460,  468,  468,  439,  207,
      208,  209,  235,  451,  419,  419,  548,  210,  214,  461,
      321,  440,  441,  442,  443,  444,  444,  445,  446,  447,
      465,  465,  465,  465,  465,  467,  467,  467,  467,  467,
      469,  469,  469,  469,  469,  470,  470,  470,  470,  471,
      471,  471,  471,  471,  211,  473,  474,  211,  473,  474,
      643,  211,  214,  214,  214,  214,  214,  212,  477,  477,
      212,  484,  484,  212,  212,  410,  212,  475,  475,  475,

      212,  476,  476,  476,  476,  476,  478,  478,  478,  478,
      478,  479,  479,  479,  479,  480,  480,  480,  480,  480,
      223,  223,  223,  223,  223,  482,  482,  482,  483,  483,
      483,  483,  483,  485,  485,  485,  485,  485,  486,  486,
      486,  486,  487,  487,  487,  487,  487,  232,  232,  232,
      232,  274,  232,  232,  489,  489,  489,  214,  232,  550,
      232,  491,  491,  232,  232,  232,  232,  232,  232,  232,
      214,  232,  275, 1050,  232, 1050,  538,  538, 1050,  490,
      490,  490,  490,  490,  492,  492,  492,  492,  492,  493,
      493,  493,  493,  494,  494,  494,  494,  494,  251,  534,

      214,  534,  214,  549,  535,  499,  500,  504,  505,  506,
      507,  508,  508,  509,  510,  511,  499,  500,  513,  514,
      515,  516,  517,  517,  518,  519,  520,  522,  523,  524,
      525,  526,  526,  527,  528,  529,  530,  536,  536,  536,
     1050,  530,  531,  256,  256,  256,  256,  256,  537,  537,
      537,  537,  537,  552,  530,  214,  530,  532,  271,  532,
      276,  278,  533,  539,  539,  539,  539,  539,  540,  540,
      540,  540,  541,  541,  541,  541,  541,  544,  545,  272,
      273,  277,  273,  321,  298,  214,  558,  634,  214,  214,
      546,  547,  214,  554,  555,  557,  214,  214,  560,  594,

      594,  214,  559,  320,  214,  273,  504,  505,  506,  507,
      508,  508,  509,  510,  511,  299,  299,  299,  299,  299,
      299,  299,  299,  299,  299,  299,  299,  299,  299,  299,
      299,  299,  299,  299,  299,  299,  299,  299,  299,  561,
      562,  562,  562,  562,  562,  563,  563,  563,  563,  563,
      564,  564,  564,  564,  564,  308,  208,  209,  603,  603,
      310,  311,  419,  210,  566,  567,  568,  569,  570,  570,
      571,  572,  573,  575,  576,  577,  578,  579,  579,  580,
      581,  582,  584,  585,  586,  587,  588,  588,  589,  590,
      591,  309,  309,  309,  309,  309,  592,  592,  592,  593,

      593,  593,  593,  593,  595,  595,  595,  595,  595,  596,
      596,  596,  596,  320,  320,  419,  312,  313,  314,  315,
      316,  316,  317,  318,  319,  597,  597,  597,  597,  597,
      321,  321,  321,  321,  321,  320,  600,  601,  601,  601,
      602,  602,  602,  602,  602,  604,  604,  604,  604,  604,
      605,  605,  605,  605,  606,  606,  606,  606,  606,  330,
      330,  330,  330,  330,  608,  608,  608,  320,  600,  609,
      609,  609,  609,  609,  321,  322,  323,  324,  325,  326,
      326,  327,  328,  329,  610,  610,  611,  611,  611,  611,
      611,  612,  612,  612,  612,  320,  331,  332,  333,  334,

      335,  335,  336,  337,  338,  613,  613,  613,  613,  613,
      339,  339,  339,  339,  339,  615,  615,  615,  616,  616,
      616,  616,  616,  617,  617,  623,  321,  321,  342,  343,
      344,  345,  346,  346,  347,  348,  349,  618,  618,  618,
      618,  618,  619,  619,  619,  619,  620,  620,  620,  620,
      620,  321,  631,  321,  214,  635,  342,  343,  344,  345,
      346,  346,  347,  348,  349,  320,  321,  321,  321,  636,
      321,  321,  321,  626,  321,  624,  625,  627,  629,  321,
      630,  632,  633,  321,  678,  638,  367,  367,  367,  367,
      367,  419,  637,  367,  367,  367,  367,  367,  367,  367,

      367,  367,  367,  622,  367,  367,  367,  367,  367,  367,
      367,  367,  367,  639,  640,  640,  640,  640,  640,  641,
      641,  641,  641,  641,  650,  650,  322,  323,  324,  325,
      326,  326,  327,  328,  329,  642,  642,  642,  642,  642,
      400,  208,  209,  211,  644,  415,  232,  232,  401,  402,
      657,  657,  403,  210,  404,  405,  212,  232,  406,  411,
      232,  232,  212,  419,  419,  419,  419,  419,  232,  664,
      664,  232, 1050,  648,  648,  648,  649,  649,  649,  649,
      649,  214,  232,  655,  655,  655, 1050,  651,  651,  651,
      651,  651,  652,  652,  652,  652,  653,  653,  653,  653,

      653,  429,  430,  431,  432,  433,  433,  434,  435,  436,
      428,  428,  428,  428,  428,  656,  656,  656,  656,  656,
      658,  658,  658,  658,  658,  659,  659,  659,  659,  660,
      660,  660,  660,  660,  440,  441,  442,  443,  444,  444,
      445,  446,  447,  440,  441,  442,  443,  444,  444,  445,
      446,  447,  437,  437,  437,  437,  437,  662,  662,  662,
      663,  663,  663,  663,  663,  665,  665,  665,  665,  665,
      666,  666,  666,  666,  667,  667,  667,  667,  667,  669,
      670,  419,  671,  672,  673,  675,  419,  419,  419,  674,
      419,  677,  683,  419,  419,  682,  419,  419,  679,  680,

      681,  419,  419,  419,  419,  685,  702,  702,  684,  709,
      709,  419,  465,  465,  465,  465,  465,  465,  465,  465,
      465,  465,  465,  465,  465,  465,  465,  465,  465,  465,
      465,  465,  686,  686,  686,  686,  686,  687,  687,  687,
      687,  687,  688,  688,  688,  688,  688,  214,  214,  214,
      214,  214,  214,  214,  214,  214,  214,  214,  214,  214,
      214,  214,  214,  214,  214,  214,  214,  689,  689,  689,
      689,  689,  690,  690,  690,  690,  690,  691,  691,  691,
      691,  691,  223,  223,  223,  223,  223,  223,  223,  223,
      223,  223,  223,  223,  223,  223,  223,  223,  223,  223,

      223,  223,  692,  692,  692,  692,  692,  693,  693,  693,
      693,  693,  694,  694,  694,  694,  694,  232,  232,  232,
      232,  232,  232,  232,  232,  232,  232,  232,  232,  232,
      232,  232,  232,  232,  232,  232,  232,  695,  695,  695,
      695,  695,  696,  696,  696,  696,  696,  697,  697,  697,
      697,  697,  532,  534,  532,  534,  748,  698,  699, 1050,
      214, 1050,  716,  716,  503,  503,  503,  503,  503,  503,
      700,  700,  700,  701,  701,  701,  701,  701,  703,  703,
      703,  703,  703,  704,  704,  704,  704,  705,  705,  705,
      705,  705,  513,  514,  515,  516,  517,  517,  518,  519,

      520,  512,  512,  512,  512,  512,  707,  707,  707,  708,
      708,  708,  708,  708,  710,  710,  710,  710,  710,  711,
      711,  711,  711,  712,  712,  712,  712,  712,  522,  523,
      524,  525,  526,  526,  527,  528,  529,  521,  521,  521,
      521,  521,  714,  714,  714,  715,  715,  715,  715,  715,
      717,  717,  717,  717,  717,  718,  718,  718,  718,  719,
      719,  719,  719,  719, 1050,  419,  531,  722,  258,  256,
      256,  256,  256,  256,  256,  256,  256,  256,  256,  533,
      256,  256,  256,  256,  256,  256,  256,  256,  256,  256,
      731,  731,  731,  731,  731,  732,  732,  732,  732,  732,

      733,  733,  733,  733,  733,  214,  736,  737,  734,  214,
      739,  738,  740,  320,  214,  214,  214,  743,  744,  214,
      214,  214,  741,  723,  724,  725,  726,  727,  727,  728,
      729,  730,  722,  258,  214,  742,  745,  214,  747,  746,
      214,  760,  760,  760,  535,  214,  214,  759,  759,  759,
      759,  759,  759,  759,  759,  759,  759,  759,  759,  759,
      759,  759,  565,  565,  565,  565,  565,  761,  761,  761,
      761,  761,  762,  762,  566,  567,  568,  569,  570,  570,
      571,  572,  573,  763,  763,  763,  763,  763,  723,  724,
      725,  726,  727,  727,  728,  729,  730,  749,  749,  419,

      749,  750,  749,  750,  749,  749,  749,  749,  749,  749,
      749,  749,  749,  749,  749,  750,  749,  749,  749,  749,
      749,  749,  750,  750,  750,  750,  749,  749,  749,  749,
      750,  750,  750,  750,  750,  750,  750,  750,  750,  750,
      750,  750,  750,  750,  750,  750,  750,  750,  750,  750,
      749,  749,  749,  749,  749,  749,  749,  749,  749,  751,
      752,  753,  754,  755,  755,  756,  757,  758,  764,  764,
      764,  764,  765,  765,  765,  765,  765,  320,  574,  574,
      574,  574,  574,  767,  767,  767,  768,  768,  768,  768,
      768,  769,  769,  770,  770,  770,  770,  770,  771,  771,

      771,  771,  772,  772,  772,  772,  772,  320,  583,  583,
      583,  583,  583,  774,  774,  774,  775,  775,  775,  775,
      775,  776,  776,  777,  777,  777,  777,  777,  778,  778,
      778,  778,  779,  779,  779,  779,  779,  419,  575,  576,
      577,  578,  579,  579,  580,  581,  582,  309,  309,  309,
      309,  309,  309,  309,  309,  309,  309,  309,  309,  309,
      309,  309,  309,  309,  309,  309,  309,  419,  584,  585,
      586,  587,  588,  588,  589,  590,  591,  781,  781,  781,
      781,  781,  782,  782,  782,  782,  782,  783,  783,  783,
      783,  783,  784,  321,  321,  321,  321,  321,  795,  797,

      321,  599,  321,  321,  321,  599,  321,  321,  321,  321,
      321,  599,  599,  794,  599,  321,  321,  321,  321,  321,
      321,  321,  321,  321,  321,  785,  785,  785,  785,  785,
      786,  786,  786,  786,  786,  787,  787,  787,  787,  787,
      330,  330,  330,  330,  330,  330,  330,  330,  330,  330,
      330,  330,  330,  330,  330,  330,  330,  330,  330,  330,
      788,  788,  788,  788,  788,  789,  789,  789,  789,  789,
      790,  790,  790,  790,  790,  339,  339,  339,  339,  339,
      339,  339,  339,  339,  339,  339,  339,  339,  339,  339,
      339,  339,  339,  339,  339,  791,  791,  791,  791,  791,

      792,  792,  792,  792,  792,  793,  793,  793,  793,  793,
      796,  321,  321,  799,  801,  321,  800,  321,  321,  321,
      802,  798,  321,  321,  805,  321,  321,  321,  321,  419,
      803,  833,  808,  807,  804,  806,  749,  809,  321,  749,
      810,  749,  810,  749,  749,  749,  749,  749,  749,  749,
      749,  749,  749,  749,  810,  749,  749,  749,  749,  749,
      749,  810,  810,  810,  810,  749,  749,  749,  749,  810,
      810,  810,  810,  810,  810,  810,  810,  810,  810,  810,
      810,  810,  810,  810,  810,  810,  810,  810,  810,  749,
      749,  749,  749,  749,  749,  749,  749,  749,  811,  812,

      813,  814,  815,  815,  816,  817,  818,  819,  819,  819,
      819,  819,  819,  819,  819,  819,  819,  819,  819,  819,
      819,  819,  419,  419,  419,  419,  419,  419,  419,  419,
      419,  419,  419,  419,  419,  419,  419,  419,  419,  419,
      419,  419,  820,  820,  820,  820,  820,  821,  821,  821,
      821,  821,  822,  822,  822,  822,  822,  428,  428,  428,
      428,  428,  428,  428,  428,  428,  428,  428,  428,  428,
      428,  428,  428,  428,  428,  428,  428,  823,  823,  823,
      823,  823,  824,  824,  824,  824,  824,  825,  825,  825,
      825,  825,  437,  437,  437,  437,  437,  437,  437,  437,

      437,  437,  437,  437,  437,  437,  437,  437,  437,  437,
      437,  437,  826,  826,  826,  826,  826,  827,  827,  827,
      827,  827,  828,  828,  828,  828,  828,  419,  830,  831,
      829,  832,  835,  836,  834,  419,  837,  419,  838,  419,
      839,  419,  419,  419,  419,  419,  419,  840,  419,  842,
      841,  419,  843,  866,  866,  866,  419,  419,  844,  844,
      844,  844,  844,  844,  844,  844,  844,  844,  844,  844,
      844,  844,  844,  845,  845,  845,  845,  845,  845,  845,
      845,  845,  845,  845,  845,  845,  845,  845,  846,  846,
      846,  846,  846,  846,  846,  846,  846,  846,  846,  846,

      846,  846,  846,  847,  847,  847,  847,  847,  847,  847,
      847,  847,  847,  847,  847,  847,  847,  847, 1050,  874,
      698, 1050,  214,  699, 1050,  321, 1050,  256,  256,  503,
      256,  256,  503,  503,  503,  503,  503,  214,  256,  256,
      879,  256,  256,  503,  503,  503,  503,  503,  503,  503,
      503,  503,  503,  503,  503,  503,  503,  503,  848,  848,
      848,  848,  848,  849,  849,  849,  849,  849,  850,  850,
      850,  850,  850,  512,  512,  512,  512,  512,  512,  512,
      512,  512,  512,  512,  512,  512,  512,  512,  512,  512,
      512,  512,  512,  851,  851,  851,  851,  851,  852,  852,

      852,  852,  852,  853,  853,  853,  853,  853,  521,  521,
      521,  521,  521,  521,  521,  521,  521,  521,  521,  521,
      521,  521,  521,  521,  521,  521,  521,  521,  854,  854,
      854,  854,  854,  855,  855,  855,  855,  855,  856,  856,
      856,  856,  856,  858,  859,  860,  861,  862,  862,  863,
      864,  865,  721,  721,  721,  721,  721,  867,  867,  867,
      867,  867,  868,  868,  869,  869,  869,  869,  869,  870,
      870,  870,  870,  871,  871,  871,  871,  871,  873,  873,
      873,  873,  873,  873,  873,  873,  873,  873,  873,  873,
      873,  873,  873,  875,  876,  884,  877,  878,  214,  885,

      886,  214,  214,  214,  214,  882,  880,  214,  214,  321,
      214,  214,  750,  750,  750,  750,  750,  887,  887,  887,
      888,  888,  888,  888,  888,  889,  889,  890,  890,  890,
      890,  890,  891,  891,  891,  891,  892,  892,  892,  892,
      892,  565,  565,  565,  565,  565,  565,  565,  565,  565,
      565,  565,  565,  565,  565,  565,  565,  565,  565,  565,
      565,  894,  894,  894,  894,  894,  895,  895,  895,  895,
      895,  896,  896,  896,  896,  896,  574,  574,  574,  574,
      574,  574,  574,  574,  574,  574,  574,  574,  574,  574,
      574,  574,  574,  574,  574,  574,  897,  897,  897,  897,

      897,  898,  898,  898,  898,  898,  899,  899,  899,  899,
      899,  583,  583,  583,  583,  583,  583,  583,  583,  583,
      583,  583,  583,  583,  583,  583,  583,  583,  583,  583,
      583,  900,  900,  900,  900,  900,  901,  901,  901,  901,
      901,  902,  902,  902,  902,  902,  903,  903,  903,  903,
      903,  903,  903,  903,  903,  903,  903,  903,  903,  903,
      903,  784,  904,  904,  904,  904,  904,  321,  321,  917,
      599,  908,  907,  321,  599,  904,  904,  904,  904,  904,
      599,  599,  321,  599,  904,  904,  904,  904,  904,  905,
      905,  905,  905,  905,  905,  905,  905,  905,  905,  905,

      905,  905,  905,  905,  906,  906,  906,  906,  906,  906,
      906,  906,  906,  906,  906,  906,  906,  906,  906,  321,
      909,  321,  321,  910,  911,  321,  321,  321,  321,  932,
      321,  918,  419,  915,  914,  321,  912,  913,  916,  919,
      214,  321,  809,  599,  810,  810,  810,  810,  810,  924,
      924,  749,  922,  922,  922,  749,  923,  923,  923,  923,
      923,  749,  749,  749,  749,  921,  925,  925,  925,  925,
      925,  926,  926,  926,  926,  927,  927,  927,  927,  927,
      929,  929,  929,  929,  929,  929,  929,  929,  929,  929,
      929,  929,  929,  929,  929,  950,  950,  921,  930,  930,

      930,  930,  930,  930,  930,  930,  930,  930,  930,  930,
      930,  930,  930,  931,  931,  931,  931,  931,  931,  931,
      931,  931,  931,  931,  931,  931,  931,  931,  933,  934,
      214,  935,  936,  419,  942,  944,  419,  419,  419,  419,
      943,  419,  937,  938,  940,  419,  419,  419,  948,  948,
      948,  214,  419,  224,  225,  226,  227,  228,  228,  229,
      230,  231,  232,  232,  945,  945,  945,  945,  945,  952,
      952,  952,  952,  232,  945,  945,  945,  945,  945,  945,
      945,  945,  945,  945,  232,  959,  214,  214, 1050,  946,
      946,  946,  946,  946,  946,  946,  946,  946,  946,  946,

      946,  946,  946,  946,  947,  947,  947,  947,  947,  947,
      947,  947,  947,  947,  947,  947,  947,  947,  947,  858,
      859,  860,  861,  862,  862,  863,  864,  865,  857,  857,
      857,  857,  857,  949,  949,  949,  949,  949,  951,  951,
      951,  951,  951,  953,  953,  953,  953,  953,  721,  721,
      721,  721,  721,  721,  721,  721,  721,  721,  721,  721,
      721,  721,  721,  721,  721,  721,  721,  721,  955,  955,
      955,  955,  955,  956,  956,  956,  956,  956,  957,  957,
      957,  957,  957, 1050,  958, 1050,  960,  961,  503,  214,
      962,  964,  967,  214,  214,  214,  214,  963,  965,  214,

      214,  214,  214,  214,  966,  750,  750,  750,  750,  750,
      750,  750,  750,  750,  750,  750,  750,  750,  750,  750,
      750,  750,  750,  750,  750,  968,  968,  968,  968,  968,
      969,  969,  969,  969,  969,  970,  970,  970,  970,  970,
      971,  971,  971,  971,  971,  971,  971,  971,  971,  971,
      971,  971,  971,  971,  971,  972,  972,  972,  972,  972,
      972,  972,  972,  972,  972,  972,  972,  972,  972,  972,
      973,  973,  973,  973,  973,  973,  973,  973,  973,  973,
      973,  973,  973,  973,  973,  320,  974,  321,  321,  976,
      321,  321,  321,  975,  320,  321,  321,  977,  978,  980,

      321,  321,  321,  983,  979,  982,  981,  984,  599,  810,
      810,  810,  810,  810,  810,  810,  810,  810,  810,  810,
      810,  810,  810,  810,  989,  991,  419,  419,  749,  810,
      810,  810,  810,  810,  985,  985,  985,  985,  985,  986,
      986,  986,  986,  986, 1005,  214,  331,  332,  333,  334,
      335,  335,  336,  337,  338,  342,  343,  344,  345,  346,
      346,  347,  348,  349,  987,  987,  987,  987,  987,  429,
      430,  431,  432,  433,  433,  434,  435,  436,  988,  992,
      990,  994,  419, 1017,  419,  419,  993,  997,  419,  419,
      995,  419,  419,  419,  419,  996, 1050, 1002, 1050,  214,

      419,  503,  857,  857,  857,  857,  857,  857,  857,  857,
      857,  857,  857,  857,  857,  857,  857,  857,  857,  857,
      857,  857,  998,  998,  998,  998,  998,  999,  999,  999,
      999,  999, 1000, 1000, 1000, 1000, 1000, 1001, 1001, 1001,
     1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001,
     1001, 1001,  214, 1004, 1006, 1003,  321, 1010,  214, 1024,
      214,  321, 1008,  984,  599,  214, 1007, 1007, 1007, 1007,
     1007, 1007, 1007, 1007, 1007, 1007, 1007, 1007, 1007, 1007,
     1007,  321,  321,  321,  749, 1012, 1014,  419,  419, 1011,
     1015,  419, 1009, 1013, 1013, 1013, 1013, 1013, 1013, 1013,

     1013, 1013, 1013, 1013, 1013, 1013, 1013, 1013, 1016, 1018,
     1019, 1019, 1019, 1019, 1019,  419,  214,  214, 1020, 1022,
      419, 1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019,
     1019, 1050, 1021, 1050,  321, 1023,  503,  214, 1026,  321,
      321,  321,  214,  321, 1025, 1031,  419, 1028, 1030, 1027,
      419,  419, 1029, 1032, 1033,  419,  419,  419, 1034,  214,
     1035, 1036, 1037,  321,  321, 1039, 1040,  214,  321,  419,
     1041, 1042,  214, 1038, 1043, 1044,  214,  419,  321, 1046,
      419, 1047,  321,  214,  419, 1045,  419, 1049, 1048,  419,
       99,   99,   99,   99,   99,   99,   99,   99,   99,   99,

       99,   99,   99,   99,  105,  105,  105,  105,  105,  105,
      105,  105,  105,  105,  105,  105,  105,  105,  111,  111,
      111,  111,  111,  111,  111,  111,  111,  111,  111,  111,
      111,  111,  117,  117,  117,  117,  117,  117,  117,  117,
      117,  117,  117,  117,  117,  117,  120,  120,  120,  120,
      120,  120,  120,  120,  120,  120,  120,  120,  120,  120,
      167,  167,  167,  167,  167,  167,  167,  167,  167,  167,
      167,  167,  167,  167,  214,  223,  321,  330,  419,  428,
      503,  512,  214,  223,  232,  330,  419,  428,  503,  512,
      521,  321,  232,  232,  309,  309,  309,  309,  521,  309,

      309,  321,  574,  583,  321,  321,  428,  437,  857,  223,
      574,  583,  321,  339,  428,  437,  857,  223,  321,  214,
      214,  339,  339,  376,  376,  214,  954,  376,  214,  376,
      419,  376,  376,  376,  419,  376,  376,  382,  382,  941,
      939,  382,  419,  382,  321,  382,  382,  382,  928,  382,
      382,  388,  388,  321,  321,  388,  388,  388,  388,  388,
      214,  388,  388,  388,  388,  394,  394,  893,  214,  394,
      394,  394,  394,  394,  394,  394,  394,  394,  394,  414,
      883,  881,  214,  414,  872,  414,  419,  414,  414,  419,
      414,  414,  414,  437,  647,  646,  645,  644,  643,  321,

      321,  437,  437,  496,  496,  496,  496,  496,  496,  496,
      496,  496,  496,  496,  496,  780,  496,  502,  502,  502,
      502,  502,  502,  502,  502,  502,  502,  502,  502,  773,
      502,  543,  543,  543,  543,  543,  543,  543,  543,  543,
      543,  543,  543,  766,  543,  565,  214,  214,  565,  699,
      698,  720,  713,  706,  473,  419,  565,  599,  599,  599,
      599,  599,  599,  599,  599,  419,  599,  676,  599,  599,
      599,  321,  419,  668,  321,  661,  654,  419,  413,  412,
      647,  646,  321,  330,  413,  645,  330,  396,  321,  321,
      321,  621,  614,  607,  330,  339,  598,  214,  339,  214,

      551,  214,  542,  501,  498,  249,  339,  376,  376,  495,
      488,  376,  481,  376,  214,  376,  376,  376,  208,  376,
      376,  382,  382,  472,  449,  382,  417,  382,  416,  382,
      382,  382,  307,  382,  382,  388,  388,  297,  279,  388,
      388,  388,  388,  388,  413,  388,  388,  388,  388,  394,
      394,  411,  410,  394,  394,  394,  394,  394,  394,  394,
      394,  394,  394,  414,  244,  214,  398,  414,  397,  414,
      396,  414,  414,  395,  414,  414,  414,  721,  393,  721,
      392,  389,  383,  377,  375,  721,  749,  749,  351,  749,
      749,  749,  749,  749,  749,  749,  749,  749,  749,  749,

      920,  920,  920,  920,  920,  920,  920,  920,  920,  920,
      920,  920,  920,  920,  330,  307,  297,  330,  281,  279,
      244, 1050, 1050, 1050, 1050,  330,  339, 1050, 1050,  339,
     1050, 1050, 1050, 1050, 1050, 1050, 1050,  339,   19, 1050,
     1050, 1050, 1050, 1050, 1050, 1050, 1050, 1050, 1050, 1050,
     1050, 1050, 1050, 1050, 1050, 1050, 1050, 1050, 1050, 1050,
     1050, 1050, 1050, 1050, 1050, 1050, 1050, 1050, 1050, 1050,
     1050, 1050, 1050, 1050, 1050, 1050, 1050, 1050, 1050, 1050,
     1050, 1050, 1050, 1050, 1050, 1050, 1050, 1050, 1050, 1050,
     1050, 1050, 1050, 1050, 1050, 1050, 1050, 1050, 1050, 1050,

     1050, 1050, 1050, 1050, 1050, 1050, 1050, 1050, 1050, 1050
    } ;

static const flex_int16_t yy_chk[4211] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    3,    3,   42,    3,  125,    4,    4,    3,
        4,  125,    5,    5,    4,    5,    3,    6,    6,    5,
        6,    4,    7,    7,    6,   42,    5,    7,    8,    8,
       41,    6,    7,    8,    9,    9, 1049,    7,    8,   10,
       10,   52,   52,    8,   11,   11,   11,   12,   12,   12,
       11,   41,   41,   12,   21,   21,   21,   32,   68,   68,

       11,   32,   21,   12,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   15,   15,   15,  545,   15,
       22,   15,   37,   15,   15,   43,   37,   37,   15,   23,
       23,   15,  545,   22,   15,   15,   15,   15,   15,   22,

      102,   53,   23,   53,  102,   53,   43,   44,   23,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   55,   44,   51,
       15,   16,   16,   16,   59,   16,   55,   16,   57,   16,
       16,   59,   51,   51,   16,   54,   54,   16,   57,   54,
       16,   16,   16,   16,   16,   36,   58,   56,   36,   56,
       60,   64,   36,   36,   36, 1048,   58,   60,   81,   81,
       58,   65,   65,   65,   65,   65,   36,   88,   36,   66,
       66,   66,   64,   85,   88,   85,   16,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,

       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   27,   27,
       67,   67,   67,   67,   67,   71,   71,   71,   71,   27,
       69,   69,   69,   69,   69,   70,   70,   70,   70,   70,
       27,   84,   86,  168,   27,   72,   72,   72,   72,   72,
       84,  168,   86,   27,   27,   27,   27,   27,   27,   27,

       27,   27,   38,   89,   38,   38,   80,   82,  197,   82,
       89,   82,   93,   93,   38,  197,   38,   83,   83,   80,
       80,   83, 1047,   38,   38,   38,   38,   75,   91,   91,
       91,   38,   38,   38,   38,   38,   38,   38,   38,   38,
       38,   38,   38,   38,   38,   38,   38,   38,   38,   38,
       38,  114, 1043,  114,   49,   90,   90,   90,   90,   90,
       38,   38,   38,   38,   38,   38,   38,   38,   38,   49,
       49,   49,   49,   49,   49,   49,   49,   49,   74,   74,
       74,  103,  176,   74,   74,  103,   74,  176,   75,   75,
       75,   75,   75,   75,   75,   75,   75,   76,   76,   76,

       76,   76,   76,   76,   76,   76,   87,   92,   92,   92,
       92,   92,   96,   96,   96,   96,   87,  148,  162,  162,
       87,   94,   94,   94,   94,   94,   95,   95,   95,   95,
       95,   97,   97,   97,   97,   97,  190,  190,  148,   74,
       74,   74,   74,   74,   74,   74,   74,   74,   77,   77,
      108,  109,  138,  143,  108,  109,  138,  143,  143,   77,
      128,  149,  198,  127,  127,  127,  160,  160,  160,  198,
       77,  127,  127,  128,   77,  127,  248,  127,  127,  128,
      248,  127,  149,   77,   77,   77,   77,   77,   77,   77,
       77,   77,   78,  129,  129,  132,  132,  132,  132,  132,

      132,  132,  132,  132,  147,  292,  129,  142,  150,  292,
      142,  158,  129,  195,  142,  142,  142,  159,  159,  159,
      159,  159,  186,  195,  290,  147,  147,  186,  142,  150,
      142,  290,  158,  161,  161,  161,  161,  161,   78,  163,
      163,  163,  163,  163,  164,  164,  164,  164,  165,  165,
      165,  165,  165,   78,   78,   78,   78,   78,   78,   78,
       78,   78,  133,  133,  183,  183,  183,  183,  183,  183,
      183,  183,  183,  133,  184,  184,  184,  184,  184,  184,
      184,  184,  184,  191,  133,  191,  193,  191,  133,  356,
      192,  192,  356,  187,  192,  193, 1041,  133,  133,  133,

      133,  133,  133,  133,  133,  133,  185,  185,  187,  187,
      187,  187,  187,  187,  187,  187,  187,  185, 1040,  194,
      189,  194,  200,  200,  200,  196,  202,  202,  185,  207,
      207,  207,  185,  189,  189,  196,  283,  207,  283,  196,
     1038,  185,  185,  185,  185,  185,  185,  185,  185,  185,
      199,  199,  199,  199,  199,  201,  201,  201,  201,  201,
      203,  203,  203,  203,  203,  204,  204,  204,  204,  205,
      205,  205,  205,  205,  211,  211,  211,  212,  212,  212,
      403,  213,  215,  215,  215,  215,  215,  211,  218,  218,
      212,  227,  227,  211,  213,  403,  212,  216,  216,  216,

      213,  217,  217,  217,  217,  217,  219,  219,  219,  219,
      219,  220,  220,  220,  220,  221,  221,  221,  221,  221,
      224,  224,  224,  224,  224,  225,  225,  225,  226,  226,
      226,  226,  226,  228,  228,  228,  228,  228,  229,  229,
      229,  229,  230,  230,  230,  230,  230,  232,  232,  233,
      233,  274,  234,  234,  237,  237,  237, 1037,  232,  286,
      233,  239,  239,  234,  236,  236,  236,  236,  236,  232,
      286,  233,  274,  232,  234,  233,  266,  266,  234,  238,
      238,  238,  238,  238,  240,  240,  240,  240,  240,  241,
      241,  241,  241,  242,  242,  242,  242,  242,  251,  262,

     1035,  262,  285,  285,  262,  251,  251,  256,  256,  256,
      256,  256,  256,  256,  256,  256,  251,  251,  257,  257,
      257,  257,  257,  257,  257,  257,  257,  258,  258,  258,
      258,  258,  258,  258,  258,  258,  259,  264,  264,  264,
      259,  259,  259,  263,  263,  263,  263,  263,  265,  265,
      265,  265,  265,  288,  259,  288,  259,  261,  271,  261,
      276,  278,  261,  267,  267,  267,  267,  267,  268,  268,
      268,  268,  269,  269,  269,  269,  269,  280,  281,  271,
      271,  276,  278,  362,  298,  280,  294,  362,  281,  282,
      282,  282,  291,  291,  291,  293,  294,  295,  296,  315,

      315,  293,  295,  309,  296,  298,  261,  261,  261,  261,
      261,  261,  261,  261,  261,  300,  300,  300,  300,  300,
      301,  301,  301,  301,  301,  302,  302,  302,  302,  302,
      303,  303,  303,  303,  303,  304,  304,  304,  304,  304,
      305,  305,  305,  305,  305,  306,  306,  306,  306,  306,
      307,  307,  307,  307,  307,  308,  308,  308,  325,  325,
      308,  308, 1033,  308,  309,  309,  309,  309,  309,  309,
      309,  309,  309,  310,  310,  310,  310,  310,  310,  310,
      310,  310,  311,  311,  311,  311,  311,  311,  311,  311,
      311,  312,  312,  312,  312,  312,  313,  313,  313,  314,

      314,  314,  314,  314,  316,  316,  316,  316,  316,  317,
      317,  317,  317,  320,  321, 1031,  308,  308,  308,  308,
      308,  308,  308,  308,  308,  318,  318,  318,  318,  318,
      322,  322,  322,  322,  322,  330,  320,  323,  323,  323,
      324,  324,  324,  324,  324,  326,  326,  326,  326,  326,
      327,  327,  327,  327,  328,  328,  328,  328,  328,  331,
      331,  331,  331,  331,  332,  332,  332,  339,  320,  333,
      333,  333,  333,  333, 1028,  321,  321,  321,  321,  321,
      321,  321,  321,  321,  334,  334,  335,  335,  335,  335,
      335,  336,  336,  336,  336,  340,  330,  330,  330,  330,

      330,  330,  330,  330,  330,  337,  337,  337,  337,  337,
      342,  342,  342,  342,  342,  343,  343,  343,  344,  344,
      344,  344,  344,  345,  345,  351, 1026,  351,  339,  339,
      339,  339,  339,  339,  339,  339,  339,  346,  346,  346,
      346,  346,  347,  347,  347,  347,  348,  348,  348,  348,
      348,  360,  360,  363, 1023,  363,  340,  340,  340,  340,
      340,  340,  340,  340,  340,  350,  352,  353,  355,  364,
      357,  364,  361,  353,  358,  352,  352,  355,  357,  365,
      358,  361,  361,  366,  458,  366,  368,  368,  368,  368,
      368,  458,  365,  369,  369,  369,  369,  369,  370,  370,

      370,  370,  370,  350,  371,  371,  371,  371,  371,  372,
      372,  372,  372,  372,  373,  373,  373,  373,  373,  374,
      374,  374,  374,  374,  423,  423,  350,  350,  350,  350,
      350,  350,  350,  350,  350,  375,  375,  375,  375,  375,
      400,  400,  400,  407,  404,  415,  408,  408,  400,  400,
      432,  432,  400,  415,  400,  400,  407,  408,  400,  404,
      409,  409,  407,  420,  420,  420,  420,  420,  408,  443,
      443,  409,  408,  421,  421,  421,  422,  422,  422,  422,
      422, 1021,  409,  430,  430,  430,  409,  424,  424,  424,
      424,  424,  425,  425,  425,  425,  426,  426,  426,  426,

      426,  428,  428,  428,  428,  428,  428,  428,  428,  428,
      429,  429,  429,  429,  429,  431,  431,  431,  431,  431,
      433,  433,  433,  433,  433,  434,  434,  434,  434,  435,
      435,  435,  435,  435,  437,  437,  437,  437,  437,  437,
      437,  437,  437,  438,  438,  438,  438,  438,  438,  438,
      438,  438,  440,  440,  440,  440,  440,  441,  441,  441,
      442,  442,  442,  442,  442,  444,  444,  444,  444,  444,
      445,  445,  445,  445,  446,  446,  446,  446,  446,  448,
      449,  450,  450,  450,  451,  454,  451,  448,  453,  453,
      449,  456,  462,  456,  997,  461,  454,  459,  459,  459,

      460,  461,  462,  463,  460,  464,  507,  507,  463,  516,
      516,  464,  466,  466,  466,  466,  466,  467,  467,  467,
      467,  467,  468,  468,  468,  468,  468,  469,  469,  469,
      469,  469,  470,  470,  470,  470,  470,  471,  471,  471,
      471,  471,  472,  472,  472,  472,  472,  475,  475,  475,
      475,  475,  476,  476,  476,  476,  476,  477,  477,  477,
      477,  477,  478,  478,  478,  478,  478,  479,  479,  479,
      479,  479,  480,  480,  480,  480,  480,  481,  481,  481,
      481,  481,  482,  482,  482,  482,  482,  483,  483,  483,
      483,  483,  484,  484,  484,  484,  484,  485,  485,  485,

      485,  485,  486,  486,  486,  486,  486,  487,  487,  487,
      487,  487,  488,  488,  488,  488,  488,  489,  489,  489,
      489,  489,  490,  490,  490,  490,  490,  491,  491,  491,
      491,  491,  492,  492,  492,  492,  492,  493,  493,  493,
      493,  493,  494,  494,  494,  494,  494,  495,  495,  495,
      495,  495,  499,  500,  499,  500,  560,  499,  500,  503,
      560,  503,  525,  525,  503,  504,  504,  504,  504,  504,
      505,  505,  505,  506,  506,  506,  506,  506,  508,  508,
      508,  508,  508,  509,  509,  509,  509,  510,  510,  510,
      510,  510,  512,  512,  512,  512,  512,  512,  512,  512,

      512,  513,  513,  513,  513,  513,  514,  514,  514,  515,
      515,  515,  515,  515,  517,  517,  517,  517,  517,  518,
      518,  518,  518,  519,  519,  519,  519,  519,  521,  521,
      521,  521,  521,  521,  521,  521,  521,  522,  522,  522,
      522,  522,  523,  523,  523,  524,  524,  524,  524,  524,
      526,  526,  526,  526,  526,  527,  527,  527,  527,  528,
      528,  528,  528,  528,  531,  996,  531,  533,  533,  536,
      536,  536,  536,  536,  537,  537,  537,  537,  537,  533,
      538,  538,  538,  538,  538,  539,  539,  539,  539,  539,
      540,  540,  540,  540,  540,  541,  541,  541,  541,  541,

      542,  542,  542,  542,  542,  544,  546,  547,  544,  548,
      549,  548,  550,  565,  554,  555,  546,  554,  555,  547,
      549,  550,  552,  533,  533,  533,  533,  533,  533,  533,
      533,  533,  535,  535,  552,  553,  556,  557,  558,  557,
      558,  567,  567,  567,  535,  553,  556,  562,  562,  562,
      562,  562,  563,  563,  563,  563,  563,  564,  564,  564,
      564,  564,  566,  566,  566,  566,  566,  568,  568,  568,
      568,  568,  569,  569,  565,  565,  565,  565,  565,  565,
      565,  565,  565,  570,  570,  570,  570,  570,  535,  535,
      535,  535,  535,  535,  535,  535,  535,  561,  561,  995,

      561,  561,  561,  561,  561,  561,  561,  561,  561,  561,
      561,  561,  561,  561,  561,  561,  561,  561,  561,  561,
      561,  561,  561,  561,  561,  561,  561,  561,  561,  561,
      561,  561,  561,  561,  561,  561,  561,  561,  561,  561,
      561,  561,  561,  561,  561,  561,  561,  561,  561,  561,
      561,  561,  561,  561,  561,  561,  561,  561,  561,  561,
      561,  561,  561,  561,  561,  561,  561,  561,  571,  571,
      571,  571,  572,  572,  572,  572,  572,  574,  575,  575,
      575,  575,  575,  576,  576,  576,  577,  577,  577,  577,
      577,  578,  578,  579,  579,  579,  579,  579,  580,  580,

      580,  580,  581,  581,  581,  581,  581,  583,  584,  584,
      584,  584,  584,  585,  585,  585,  586,  586,  586,  586,
      586,  587,  587,  588,  588,  588,  588,  588,  589,  589,
      589,  589,  590,  590,  590,  590,  590,  994,  574,  574,
      574,  574,  574,  574,  574,  574,  574,  592,  592,  592,
      592,  592,  593,  593,  593,  593,  593,  594,  594,  594,
      594,  594,  595,  595,  595,  595,  595,  990,  583,  583,
      583,  583,  583,  583,  583,  583,  583,  596,  596,  596,
      596,  596,  597,  597,  597,  597,  597,  598,  598,  598,
      598,  598,  600,  601,  601,  601,  601,  601,  623,  625,

      983,  600,  622,  625,  623,  600,  602,  602,  602,  602,
      602,  600,  600,  622,  600,  603,  603,  603,  603,  603,
      604,  604,  604,  604,  604,  605,  605,  605,  605,  605,
      606,  606,  606,  606,  606,  607,  607,  607,  607,  607,
      608,  608,  608,  608,  608,  609,  609,  609,  609,  609,
      610,  610,  610,  610,  610,  611,  611,  611,  611,  611,
      612,  612,  612,  612,  612,  613,  613,  613,  613,  613,
      614,  614,  614,  614,  614,  615,  615,  615,  615,  615,
      616,  616,  616,  616,  616,  617,  617,  617,  617,  617,
      618,  618,  618,  618,  618,  619,  619,  619,  619,  619,

      620,  620,  620,  620,  620,  621,  621,  621,  621,  621,
      624,  626,  624,  627,  630,  627,  628,  628,  630,  632,
      631,  626,  631,  633,  634,  635,  634,  636,  638,  673,
      632,  673,  638,  636,  633,  635,  639,  639,  982,  639,
      639,  639,  639,  639,  639,  639,  639,  639,  639,  639,
      639,  639,  639,  639,  639,  639,  639,  639,  639,  639,
      639,  639,  639,  639,  639,  639,  639,  639,  639,  639,
      639,  639,  639,  639,  639,  639,  639,  639,  639,  639,
      639,  639,  639,  639,  639,  639,  639,  639,  639,  639,
      639,  639,  639,  639,  639,  639,  639,  639,  639,  639,

      639,  639,  639,  639,  639,  639,  639,  640,  640,  640,
      640,  640,  641,  641,  641,  641,  641,  642,  642,  642,
      642,  642,  648,  648,  648,  648,  648,  649,  649,  649,
      649,  649,  650,  650,  650,  650,  650,  651,  651,  651,
      651,  651,  652,  652,  652,  652,  652,  653,  653,  653,
      653,  653,  654,  654,  654,  654,  654,  655,  655,  655,
      655,  655,  656,  656,  656,  656,  656,  657,  657,  657,
      657,  657,  658,  658,  658,  658,  658,  659,  659,  659,
      659,  659,  660,  660,  660,  660,  660,  661,  661,  661,
      661,  661,  662,  662,  662,  662,  662,  663,  663,  663,

      663,  663,  664,  664,  664,  664,  664,  665,  665,  665,
      665,  665,  666,  666,  666,  666,  666,  667,  667,  667,
      667,  667,  668,  668,  668,  668,  668,  669,  670,  671,
      669,  672,  675,  677,  674,  679,  678,  680,  679,  671,
      680,  675,  670,  672,  674,  677,  678,  681,  682,  683,
      682,  683,  685,  724,  724,  724,  685,  681,  686,  686,
      686,  686,  686,  687,  687,  687,  687,  687,  688,  688,
      688,  688,  688,  689,  689,  689,  689,  689,  690,  690,
      690,  690,  690,  691,  691,  691,  691,  691,  692,  692,
      692,  692,  692,  693,  693,  693,  693,  693,  694,  694,

      694,  694,  694,  695,  695,  695,  695,  695,  696,  696,
      696,  696,  696,  697,  697,  697,  697,  697,  698,  734,
      698,  699,  734,  699,  721,  981,  721,  698,  698,  721,
      699,  699,  700,  700,  700,  700,  700,  740,  698,  698,
      740,  699,  699,  701,  701,  701,  701,  701,  702,  702,
      702,  702,  702,  703,  703,  703,  703,  703,  704,  704,
      704,  704,  704,  705,  705,  705,  705,  705,  706,  706,
      706,  706,  706,  707,  707,  707,  707,  707,  708,  708,
      708,  708,  708,  709,  709,  709,  709,  709,  710,  710,
      710,  710,  710,  711,  711,  711,  711,  711,  712,  712,

      712,  712,  712,  713,  713,  713,  713,  713,  714,  714,
      714,  714,  714,  715,  715,  715,  715,  715,  716,  716,
      716,  716,  716,  717,  717,  717,  717,  717,  718,  718,
      718,  718,  718,  719,  719,  719,  719,  719,  720,  720,
      720,  720,  720,  722,  722,  722,  722,  722,  722,  722,
      722,  722,  723,  723,  723,  723,  723,  725,  725,  725,
      725,  725,  726,  726,  727,  727,  727,  727,  727,  728,
      728,  728,  728,  729,  729,  729,  729,  729,  731,  731,
      731,  731,  731,  732,  732,  732,  732,  732,  733,  733,
      733,  733,  733,  735,  737,  745,  738,  739,  735,  746,

      748,  737,  738,  739,  741,  743,  741,  745,  743,  980,
      748,  746,  751,  751,  751,  751,  751,  752,  752,  752,
      753,  753,  753,  753,  753,  754,  754,  755,  755,  755,
      755,  755,  756,  756,  756,  756,  757,  757,  757,  757,
      757,  760,  760,  760,  760,  760,  761,  761,  761,  761,
      761,  762,  762,  762,  762,  762,  763,  763,  763,  763,
      763,  764,  764,  764,  764,  764,  765,  765,  765,  765,
      765,  766,  766,  766,  766,  766,  767,  767,  767,  767,
      767,  768,  768,  768,  768,  768,  769,  769,  769,  769,
      769,  770,  770,  770,  770,  770,  771,  771,  771,  771,

      771,  772,  772,  772,  772,  772,  773,  773,  773,  773,
      773,  774,  774,  774,  774,  774,  775,  775,  775,  775,
      775,  776,  776,  776,  776,  776,  777,  777,  777,  777,
      777,  778,  778,  778,  778,  778,  779,  779,  779,  779,
      779,  780,  780,  780,  780,  780,  781,  781,  781,  781,
      781,  782,  782,  782,  782,  782,  783,  783,  783,  783,
      783,  784,  785,  785,  785,  785,  785,  794,  795,  805,
      784,  795,  794,  805,  784,  786,  786,  786,  786,  786,
      784,  784,  976,  784,  787,  787,  787,  787,  787,  788,
      788,  788,  788,  788,  789,  789,  789,  789,  789,  790,

      790,  790,  790,  790,  791,  791,  791,  791,  791,  792,
      792,  792,  792,  792,  793,  793,  793,  793,  793,  797,
      797,  798,  799,  798,  799,  800,  802,  801,  803,  829,
      804,  806,  829,  803,  802,  806,  800,  801,  804,  808,
      967,  808,  809,  809,  811,  811,  811,  811,  811,  814,
      814,  809,  812,  812,  812,  809,  813,  813,  813,  813,
      813,  809,  809,  809,  809,  809,  815,  815,  815,  815,
      815,  816,  816,  816,  816,  817,  817,  817,  817,  817,
      820,  820,  820,  820,  820,  821,  821,  821,  821,  821,
      822,  822,  822,  822,  822,  861,  861,  809,  823,  823,

      823,  823,  823,  824,  824,  824,  824,  824,  825,  825,
      825,  825,  825,  826,  826,  826,  826,  826,  827,  827,
      827,  827,  827,  828,  828,  828,  828,  828,  830,  832,
      966,  833,  834,  830,  840,  843,  832,  833,  834,  835,
      841,  836,  835,  836,  838,  843,  840,  838,  859,  859,
      859,  965,  841,  846,  846,  846,  846,  846,  846,  846,
      846,  846,  847,  847,  848,  848,  848,  848,  848,  863,
      863,  863,  863,  847,  849,  849,  849,  849,  849,  850,
      850,  850,  850,  850,  847,  877,  964,  877,  847,  851,
      851,  851,  851,  851,  852,  852,  852,  852,  852,  853,

      853,  853,  853,  853,  854,  854,  854,  854,  854,  855,
      855,  855,  855,  855,  856,  856,  856,  856,  856,  857,
      857,  857,  857,  857,  857,  857,  857,  857,  858,  858,
      858,  858,  858,  860,  860,  860,  860,  860,  862,  862,
      862,  862,  862,  864,  864,  864,  864,  864,  866,  866,
      866,  866,  866,  867,  867,  867,  867,  867,  868,  868,
      868,  868,  868,  869,  869,  869,  869,  869,  870,  870,
      870,  870,  870,  871,  871,  871,  871,  871,  872,  872,
      872,  872,  872,  873,  874,  873,  878,  879,  873,  879,
      880,  882,  885,  881,  874,  878,  880,  881,  883,  885,

      883,  882,  884,  960,  884,  887,  887,  887,  887,  887,
      888,  888,  888,  888,  888,  889,  889,  889,  889,  889,
      890,  890,  890,  890,  890,  891,  891,  891,  891,  891,
      892,  892,  892,  892,  892,  893,  893,  893,  893,  893,
      894,  894,  894,  894,  894,  895,  895,  895,  895,  895,
      896,  896,  896,  896,  896,  897,  897,  897,  897,  897,
      898,  898,  898,  898,  898,  899,  899,  899,  899,  899,
      900,  900,  900,  900,  900,  901,  901,  901,  901,  901,
      902,  902,  902,  902,  902,  905,  907,  910,  907,  911,
      911,  912,  914,  910,  906,  917,  913,  912,  913,  915,

      916,  915,  918,  918,  914,  917,  916,  921,  921,  922,
      922,  922,  922,  922,  923,  923,  923,  923,  923,  924,
      924,  924,  924,  924,  935,  937,  935,  937,  921,  925,
      925,  925,  925,  925,  926,  926,  926,  926,  926,  927,
      927,  927,  927,  927,  962,  962,  905,  905,  905,  905,
      905,  905,  905,  905,  905,  906,  906,  906,  906,  906,
      906,  906,  906,  906,  928,  928,  928,  928,  928,  930,
      930,  930,  930,  930,  930,  930,  930,  930,  932,  938,
      936,  940,  939,  992,  992,  938,  939,  943,  932,  936,
      941,  940,  941,  942,  943,  942,  945,  958,  945,  958,

      944,  945,  948,  948,  948,  948,  948,  949,  949,  949,
      949,  949,  950,  950,  950,  950,  950,  951,  951,  951,
      951,  951,  952,  952,  952,  952,  952,  953,  953,  953,
      953,  953,  954,  954,  954,  954,  954,  955,  955,  955,
      955,  955,  956,  956,  956,  956,  956,  957,  957,  957,
      957,  957,  959,  961,  963,  959,  974,  977, 1006, 1006,
      963,  977,  974,  984,  984,  961,  968,  968,  968,  968,
      968,  969,  969,  969,  969,  969,  970,  970,  970,  970,
      970,  975,  978,  979,  984,  979,  988,  989,  988,  978,
      989,  934,  975,  985,  985,  985,  985,  985,  986,  986,

      986,  986,  986,  987,  987,  987,  987,  987,  991,  993,
      998,  998,  998,  998,  998,  993, 1002, 1004, 1002, 1004,
      991,  999,  999,  999,  999,  999, 1000, 1000, 1000, 1000,
     1000, 1001, 1003, 1001, 1008, 1005, 1001, 1005, 1009, 1010,
     1009, 1011, 1003, 1012, 1008, 1015, 1014, 1011, 1014, 1010,
      933, 1016, 1012, 1016, 1017, 1015, 1017, 1018, 1018, 1020,
     1020, 1022, 1024, 1027, 1025, 1027, 1029, 1022, 1029, 1030,
     1030, 1032, 1024, 1025, 1034, 1036, 1036, 1032, 1039, 1042,
     1042, 1044, 1045, 1044, 1034, 1039,  929, 1046, 1045, 1046,
     1051, 1051, 1051, 1051, 1051, 1051, 1051, 1051, 1051, 1051,

     1051, 1051, 1051, 1051, 1052, 1052, 1052, 1052, 1052, 1052,
     1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 1053, 1053,
     1053, 1053, 1053, 1053, 1053, 1053, 1053, 1053, 1053, 1053,
     1053, 1053, 1054, 1054, 1054, 1054, 1054, 1054, 1054, 1054,
     1054, 1054, 1054, 1054, 1054, 1054, 1055, 1055, 1055, 1055,
     1055, 1055, 1055, 1055, 1055, 1055, 1055, 1055, 1055, 1055,
     1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056,
     1056, 1056, 1056, 1056, 1057, 1058,  919, 1062, 1069, 1070,
     1074, 1075, 1057, 1058, 1059, 1062, 1069, 1070, 1074, 1075,
     1076,  909, 1059, 1059, 1060, 1060, 1060, 1060, 1076, 1060,

     1060, 1061, 1079, 1080, 1061,  908, 1090, 1091, 1093, 1096,
     1079, 1080, 1061, 1063, 1090, 1091, 1093, 1096,  904,  886,
      876, 1063, 1063, 1064, 1064,  875,  865, 1064,  845, 1064,
      844, 1064, 1064, 1064,  842, 1064, 1064, 1065, 1065,  839,
      837, 1065,  831, 1065,  819, 1065, 1065, 1065,  818, 1065,
     1065, 1066, 1066,  807,  796, 1066, 1066, 1066, 1066, 1066,
      759, 1066, 1066, 1066, 1066, 1067, 1067,  758,  747, 1067,
     1067, 1067, 1067, 1067, 1067, 1067, 1067, 1067, 1067, 1068,
      744,  742,  736, 1068,  730, 1068,  684, 1068, 1068,  676,
     1068, 1068, 1068, 1071,  647,  646,  645,  644,  643,  637,

      629, 1071, 1071, 1072, 1072, 1072, 1072, 1072, 1072, 1072,
     1072, 1072, 1072, 1072, 1072,  591, 1072, 1073, 1073, 1073,
     1073, 1073, 1073, 1073, 1073, 1073, 1073, 1073, 1073,  582,
     1073, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077,
     1077, 1077, 1077,  573, 1077, 1078,  559,  551, 1078,  534,
      532,  529,  520,  511,  474,  465, 1078, 1081, 1081, 1081,
     1081, 1081, 1081, 1081, 1081,  457, 1081,  455, 1081, 1081,
     1081, 1082,  452,  447, 1082,  436,  427,  419,  413,  412,
      411,  410, 1082, 1083,  406,  405, 1083,  396,  367,  359,
      354,  349,  338,  329, 1083, 1084,  319,  299, 1084,  289,

      287,  284,  270,  252,  250,  249, 1084, 1085, 1085,  243,
      231, 1085,  222, 1085,  214, 1085, 1085, 1085,  209, 1085,
     1085, 1086, 1086,  206,  188, 1086,  172, 1086,  170, 1086,
     1086, 1086,  166, 1086, 1086, 1087, 1087,  156,  152, 1087,
     1087, 1087, 1087, 1087,  145, 1087, 1087, 1087, 1087, 1088,
     1088,  141,  139, 1088, 1088, 1088, 1088, 1088, 1088, 1088,
     1088, 1088, 1088, 1089,  134,  130,  124, 1089,  123, 1089,
      121, 1089, 1089,  119, 1089, 1089, 1089, 1092,  116, 1092,
      115,  113,  107,  101,   98, 1092, 1094, 1094,   79, 1094,
     1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094,

     1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095,
     1095, 1095, 1095, 1095, 1097,   73,   62, 1097,   50,   46,
       28,   19,    0,    0,    0, 1097, 1098,    0,    0, 1098,
        0,    0,    0,    0,    0,    0,    0, 1098, 1050, 1050,
     1050, 1050, 1050, 1050, 1050, 1050, 1050, 1050, 1050, 1050,
     1050, 1050, 1050, 1050, 1050, 1050, 1050, 1050, 1050, 1050,
     1050, 1050, 1050, 1050, 1050, 1050, 1050, 1050, 1050, 1050,
     1050, 1050, 1050, 1050, 1050, 1050, 1050, 1050, 1050, 1050,
     1050, 1050, 1050, 1050, 1050, 1050, 1050, 1050, 1050, 1050,
     1050, 1050, 1050, 1050, 1050, 1050, 1050, 1050, 1050, 1050,

     1050, 1050, 1050, 1050, 1050, 1050, 1050, 1050, 1050, 1050
    } ;

extern int yy_flex_debug;
int yy_flex_debug = 0;

static yy_state_type *yy_state_buf=0, *yy_state_ptr=0;
static char *yy_full_match;
static int yy_lp;
static int yy_looking_for_trail_begin = 0;
static int yy_full_lp;
static int *yy_full_state;
#define YY_TRAILING_MASK 0x2000
#define YY_TRAILING_HEAD_MASK 0x4000
#define REJECT \
{ \
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */ \
yy_cp = (yy_full_match); /* restore poss. backed-over text */ \
(yy_lp) = (yy_full_lp); /* restore orig. accepting pos. */ \
(yy_state_ptr) = (yy_full_state); /* restore orig. state */ \
yy_current_state = *(yy_state_ptr); /* restore curr. state */ \
++(yy_lp); \
goto find_rule; \
}

#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
/* -*- C++ -*- */
/*
 * Scilab ( https://www.scilab.org/ ) - This file is part of Scilab
 * Copyright (C) 2008-2012 - Scilab Enterprises - Bruno JOFRET
 * Copyright (C) 2012 - 2016 - Scilab Enterprises
 * Copyright (C) 2018 - Dirk Reusch, Kybernetik Dr. Reusch
 * Copyright (C) 2023 - Dassault Systemes - Bruno JOFRET
 *
 * This file is hereby licensed under the terms of the GNU GPL v2.0,
 * pursuant to article 5.3.4 of the CeCILL v.2.1.
 * This file was originally licensed under the terms of the CeCILL v2.1,
 * and continues to be available under such terms.
 * For more information, see the COPYING file which you should have received
 * along with this program.
 *
 */

#include <stack>

#include "isatty.hxx"
#include "parse.hxx"
#include "parser_private.hxx"

#include "context.hxx"

extern "C"
{
#include "charEncoding.h"
#include "sci_malloc.h"
}

static std::stack<int> paren_levels;

static int comment_level = 0;
static int last_token = 0;
static int linebreak_stored_token = 0;
static bool linebreak_stored_space = FALSE;
static int exit_status = PARSE_ERROR;
static int str_opener_column = 0;
static std::string current_file;
static std::string program_name;

static std::string pstBuffer;

extern void yyerror(std::string);

#define YY_USER_ACTION                          \
    yylloc.first_column = yylloc.last_column; yylloc.last_column += yyleng;
//yylloc.last_column += yyleng;

/* -*- Verbose Special Debug -*- */
//#define DEV
//#define TOKENDEV

#ifdef DEV
#define DEBUG(x) std::cout << "[DEBUG] " << x << std::endl;
#else
#define DEBUG(x) /* Nothing */
#endif

#ifdef DEV
std::string token_to_string(int);
#endif

#define INITIAL 0
#define SIMPLESTRING 1
#define DOUBLESTRING 2
#define REGIONCOMMENT 3
#define LINECOMMENT 4
#define LINEBREAK 5
#define MATRIX 6
#define SHELLMODE 7
#define BEGINID 8

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals ( void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy ( void );

int yyget_debug ( void );

void yyset_debug ( int debug_flag  );

YY_EXTRA_TYPE yyget_extra ( void );

void yyset_extra ( YY_EXTRA_TYPE user_defined  );

FILE *yyget_in ( void );

void yyset_in  ( FILE * _in_str  );

FILE *yyget_out ( void );

void yyset_out  ( FILE * _out_str  );

			int yyget_leng ( void );

char *yyget_text ( void );

int yyget_lineno ( void );

void yyset_lineno ( int _line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap ( void );
#else
extern int yywrap ( void );
#endif
#endif

#ifndef YY_NO_UNPUT
    
    static void yyunput ( int c, char *buf_ptr  );
    
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * );
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput ( void );
#else
static int input ( void );
#endif

#endif

        static int yy_start_stack_ptr = 0;
        static int yy_start_stack_depth = 0;
        static int *yy_start_stack = NULL;
    
    static void yy_push_state ( int _new_state );
    
    static void yy_pop_state ( void );
    
    static int yy_top_state ( void );
    
/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = (int) fread(buf, 1, (yy_size_t) max_size, yyin)) == 0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex (void);

#define YY_DECL int yylex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	if ( yyleng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
				(yytext[yyleng - 1] == '\n'); \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

        /* Create the reject buffer large enough to save one state per allowed character. */
        if ( ! (yy_state_buf) )
            (yy_state_buf) = (yy_state_type *)yyalloc(YY_STATE_BUF_SIZE  );
            if ( ! (yy_state_buf) )
                YY_FATAL_ERROR( "out of dynamic memory in yylex()" );

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	{

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
		yy_current_state += YY_AT_BOL();

		(yy_state_ptr) = (yy_state_buf);
		*(yy_state_ptr)++ = yy_current_state;

yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1051 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			*(yy_state_ptr)++ = yy_current_state;
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 4139 );

yy_find_action:
		yy_current_state = *--(yy_state_ptr);
		(yy_lp) = yy_accept[yy_current_state];
find_rule: /* we branch to this label when backing up */
		for ( ; ; ) /* until we find what rule we matched */
			{
			if ( (yy_lp) && (yy_lp) < yy_accept[yy_current_state + 1] )
				{
				yy_act = yy_acclist[(yy_lp)];
				if ( yy_act & YY_TRAILING_HEAD_MASK ||
				     (yy_looking_for_trail_begin) )
					{
					if ( yy_act == (yy_looking_for_trail_begin) )
						{
						(yy_looking_for_trail_begin) = 0;
						yy_act &= ~YY_TRAILING_HEAD_MASK;
						break;
						}
					}
				else if ( yy_act & YY_TRAILING_MASK )
					{
					(yy_looking_for_trail_begin) = yy_act & ~YY_TRAILING_MASK;
					(yy_looking_for_trail_begin) |= YY_TRAILING_HEAD_MASK;
					}
				else
					{
					(yy_full_match) = yy_cp;
					(yy_full_state) = (yy_state_ptr);
					(yy_full_lp) = (yy_lp);
					break;
					}
				++(yy_lp);
				goto find_rule;
				}
			--yy_cp;
			yy_current_state = *--(yy_state_ptr);
			(yy_lp) = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
case 1:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 3;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{
// BOM found ==> ignored
}
	YY_BREAK
case 2:
YY_RULE_SETUP
{
  BEGIN(INITIAL);
  return scan_throw(BOOLTRUE);
}
	YY_BREAK
case 3:
YY_RULE_SETUP
{
  BEGIN(INITIAL);
  return scan_throw(BOOLFALSE);
}
	YY_BREAK
case 4:
YY_RULE_SETUP
{
  if (last_token != DOT)
  {
    ParserSingleInstance::pushControlStatus(Parser::WithinArguments);
  }
  DEBUG("BEGIN(INITIAL)");
  BEGIN(INITIAL);
  return scan_throw(ARGUMENTS);
}
	YY_BREAK
case 5:
YY_RULE_SETUP
{
  if (last_token != DOT)
  {
    ParserSingleInstance::pushControlStatus(Parser::WithinIf);
  }
  DEBUG("BEGIN(INITIAL)");
  BEGIN(INITIAL);
  return scan_throw(IF);
}
	YY_BREAK
case 6:
YY_RULE_SETUP
{
  DEBUG("BEGIN(INITIAL)");
  BEGIN(INITIAL);
  return scan_throw(THEN);
}
	YY_BREAK
case 7:
YY_RULE_SETUP
{
  if (last_token != DOT)
  {
    // Pop to step out IF
    ParserSingleInstance::popControlStatus();
    ParserSingleInstance::pushControlStatus(Parser::WithinElse);
  }
  DEBUG("BEGIN(INITIAL)");
  BEGIN(INITIAL);
  return scan_throw(ELSE);
}
	YY_BREAK
case 8:
YY_RULE_SETUP
{
  if (last_token != DOT)
  {
    ParserSingleInstance::popControlStatus();
    ParserSingleInstance::pushControlStatus(Parser::WithinElseIf);
  }
  DEBUG("BEGIN(INITIAL)");
  BEGIN(INITIAL);
  return scan_throw(ELSEIF);
}
	YY_BREAK
case 9:
YY_RULE_SETUP
{
  if (last_token != DOT)
  {
    ParserSingleInstance::popControlStatus();
  }
  DEBUG("BEGIN(INITIAL)");
  BEGIN(INITIAL);
  return scan_throw(END);
}
	YY_BREAK
case 10:
YY_RULE_SETUP
{
  if (last_token != DOT)
  {
    ParserSingleInstance::pushControlStatus(Parser::WithinSelect);
  }
  DEBUG("BEGIN(INITIAL)");
  BEGIN(INITIAL);
  return scan_throw(SELECT);
}
	YY_BREAK
case 11:
YY_RULE_SETUP
{
  if (last_token != DOT)
  {
    ParserSingleInstance::pushControlStatus(Parser::WithinSwitch);
  }
  DEBUG("BEGIN(INITIAL)");
  BEGIN(INITIAL);
  return scan_throw(SWITCH);
}
	YY_BREAK
case 12:
YY_RULE_SETUP
{
  if (last_token != DOT)
  {
    ParserSingleInstance::popControlStatus();
    ParserSingleInstance::pushControlStatus(Parser::WithinOtherwise);
  }
  DEBUG("BEGIN(INITIAL)");
  BEGIN(INITIAL);
  return scan_throw(OTHERWISE);
}
	YY_BREAK
case 13:
YY_RULE_SETUP
{
  if (last_token != DOT)
  {
    ParserSingleInstance::popControlStatus();
    ParserSingleInstance::pushControlStatus(Parser::WithinCase);
  }
  DEBUG("BEGIN(INITIAL)");
  BEGIN(INITIAL);
  return scan_throw(CASE);
}
	YY_BREAK
case 14:
YY_RULE_SETUP
{
  if (last_token != DOT)
  {
    ParserSingleInstance::pushControlStatus(Parser::WithinFunction);
  }
  DEBUG("BEGIN(INITIAL)");
  BEGIN(INITIAL);
  return scan_throw(FUNCTION);
}
	YY_BREAK
case 15:
YY_RULE_SETUP
{
  if (last_token != DOT)
  {
    ParserSingleInstance::popControlStatus();
  }
  DEBUG("BEGIN(INITIAL)");
  BEGIN(INITIAL);
  return scan_throw(ENDFUNCTION);
}
	YY_BREAK
case 16:
YY_RULE_SETUP
{
  if (last_token != DOT)
  {
    ParserSingleInstance::pushControlStatus(Parser::WithinFor);
  }
  BEGIN(INITIAL);
  return scan_throw(FOR);
}
	YY_BREAK
case 17:
YY_RULE_SETUP
{
  if (last_token != DOT)
  {
    ParserSingleInstance::pushControlStatus(Parser::WithinWhile);
  }
  BEGIN(INITIAL);
  return scan_throw(WHILE);
}
	YY_BREAK
case 18:
YY_RULE_SETUP
{
  BEGIN(INITIAL);
  return scan_throw(DO);
}
	YY_BREAK
case 19:
YY_RULE_SETUP
{
  BEGIN(INITIAL);
  return scan_throw(BREAK);
}
	YY_BREAK
case 20:
YY_RULE_SETUP
{
  BEGIN(INITIAL);
  return scan_throw(CONTINUE);
}
	YY_BREAK
case 21:
YY_RULE_SETUP
{
  ParserSingleInstance::pushControlStatus(Parser::WithinTry);
  BEGIN(INITIAL);
  return scan_throw(TRY);
}
	YY_BREAK
case 22:
YY_RULE_SETUP
{
  // Pop to step out TRY
  ParserSingleInstance::popControlStatus();
  ParserSingleInstance::pushControlStatus(Parser::WithinCatch);
  BEGIN(INITIAL);
  return scan_throw(CATCH);
}
	YY_BREAK
case 23:
YY_RULE_SETUP
{
  BEGIN(INITIAL);
  return scan_throw(RETURN);
}
	YY_BREAK
case 24:
YY_RULE_SETUP
{
  BEGIN(INITIAL);
  return scan_throw(RETURN);
}
	YY_BREAK
case 25:
/* rule 25 can match eol */
YY_RULE_SETUP
{
  DEBUG("BEGIN(BEGINID)");
  BEGIN(BEGINID);
}
	YY_BREAK
case 26:
YY_RULE_SETUP
{
  wchar_t *pwText = to_wide_string(yytext);
  if (yytext != NULL && pwText == NULL)
  {
    std::string str = "Can\'t convert \'";
    str += yytext;
    str += "\' to UTF-8";
    BEGIN(INITIAL);
    yyerror(str);
    return scan_throw(FLEX_ERROR);
  }
  yylval.str = new std::wstring(pwText);
  FREE(pwText);
  types::InternalType * pIT = symbol::Context::getInstance()->get(symbol::Symbol(*yylval.str));
  if (pIT && pIT->isCallable() && ParserSingleInstance::getControlStatus() != Parser::WithinArguments)
  {
    DEBUG("BEGIN(SHELLMODE)");
    BEGIN(SHELLMODE);
  }
  else
  {
    DEBUG("BEGIN(INITIAL)");
    BEGIN(INITIAL);
  }
  #ifdef TOKENDEV
  std::cout << "--> [DEBUG] ID : " << yytext << std::endl;
  #endif
  return scan_throw(ID);
}
	YY_BREAK
case 27:
YY_RULE_SETUP
return scan_throw(NOT);
	YY_BREAK
case 28:
YY_RULE_SETUP
return scan_throw(DOLLAR);
	YY_BREAK
case 29:
YY_RULE_SETUP
return scan_throw(BOOLTRUE);
	YY_BREAK
case 30:
YY_RULE_SETUP
return scan_throw(BOOLFALSE);
	YY_BREAK
case 31:
YY_RULE_SETUP
return scan_throw(AND);
	YY_BREAK
case 32:
YY_RULE_SETUP
return scan_throw(ANDAND);
	YY_BREAK
case 33:
YY_RULE_SETUP
return scan_throw(OR);
	YY_BREAK
case 34:
YY_RULE_SETUP
return scan_throw(OROR);
	YY_BREAK
case 35:
YY_RULE_SETUP
return scan_throw(LPAREN);
	YY_BREAK
case 36:
YY_RULE_SETUP
return scan_throw(RPAREN);
	YY_BREAK
case 37:
YY_RULE_SETUP
{
  scan_step();
  return scan_throw(SEMI);
}
	YY_BREAK
case 38:
YY_RULE_SETUP
{
  scan_step();
  return scan_throw(COMMA);
}
	YY_BREAK
case 39:
YY_RULE_SETUP
return scan_throw(COLON);
	YY_BREAK
case 40:
YY_RULE_SETUP
{
  yy_push_state(MATRIX);
  paren_levels.push(0);
  ParserSingleInstance::pushControlStatus(Parser::WithinCell);
  return scan_throw(LBRACE);
}
	YY_BREAK
case 41:
YY_RULE_SETUP
return scan_throw(RBRACE);
	YY_BREAK
case 42:
YY_RULE_SETUP
return scan_throw(DOTQUOTE);
	YY_BREAK
case 43:
YY_RULE_SETUP
return scan_throw(DOTTIMES);
	YY_BREAK
case 44:
YY_RULE_SETUP
return scan_throw(DOTRDIVIDE);
	YY_BREAK
case 45:
YY_RULE_SETUP
return scan_throw(DOTLDIVIDE);
	YY_BREAK
case 46:
YY_RULE_SETUP
return scan_throw(DOTPOWER);
	YY_BREAK
case 47:
YY_RULE_SETUP
return scan_throw(MINUS);
	YY_BREAK
case 48:
YY_RULE_SETUP
return scan_throw(PLUS);
	YY_BREAK
case 49:
YY_RULE_SETUP
return scan_throw(TIMES);
	YY_BREAK
case 50:
YY_RULE_SETUP
return scan_throw(RDIVIDE);
	YY_BREAK
case 51:
YY_RULE_SETUP
return scan_throw(LDIVIDE);
	YY_BREAK
case 52:
YY_RULE_SETUP
return scan_throw(POWER);
	YY_BREAK
case 53:
YY_RULE_SETUP
return scan_throw(KRONTIMES);
	YY_BREAK
case 54:
YY_RULE_SETUP
return scan_throw(KRONRDIVIDE);
	YY_BREAK
case 55:
YY_RULE_SETUP
return scan_throw(KRONLDIVIDE);
	YY_BREAK
case 56:
/* rule 56 can match eol */
YY_RULE_SETUP
{
  unput(yytext[yyleng - 1]);
  return scan_throw(CONTROLTIMES);
}
	YY_BREAK
case 57:
/* rule 57 can match eol */
YY_RULE_SETUP
{
  unput(yytext[yyleng - 1]);
  return scan_throw(CONTROLRDIVIDE);
}
	YY_BREAK
case 58:
/* rule 58 can match eol */
YY_RULE_SETUP
{
  unput(yytext[yyleng - 1]);
  return scan_throw(CONTROLLDIVIDE);
}
	YY_BREAK
case 59:
YY_RULE_SETUP
return scan_throw(EQ);
	YY_BREAK
case 60:
YY_RULE_SETUP
return scan_throw(NE);
	YY_BREAK
case 61:
YY_RULE_SETUP
return scan_throw(LT);
	YY_BREAK
case 62:
YY_RULE_SETUP
return scan_throw(GT);
	YY_BREAK
case 63:
YY_RULE_SETUP
return scan_throw(LE);
	YY_BREAK
case 64:
YY_RULE_SETUP
return scan_throw(GE);
	YY_BREAK
case 65:
YY_RULE_SETUP
return scan_throw(ASSIGN);
	YY_BREAK
case 66:
YY_RULE_SETUP
{
  DEBUG("yy_push_state(MATRIX)");
  yy_push_state(MATRIX);
  paren_levels.push(0);
  ParserSingleInstance::pushControlStatus(Parser::WithinMatrix);
  return scan_throw(LBRACK);
}
	YY_BREAK
case 67:
YY_RULE_SETUP
return scan_throw(RBRACK);
	YY_BREAK
case 68:
YY_RULE_SETUP
return scan_throw(DOT);
	YY_BREAK
case 69:
YY_RULE_SETUP
{
  ParserSingleInstance::pushControlStatus(Parser::WithinDots);
  yy_push_state(LINEBREAK);
}
	YY_BREAK
case 70:
YY_RULE_SETUP
{
  yylval.number = atof(yytext);
#ifdef TOKENDEV
  std::cout << "--> [DEBUG] INTEGER : " << yytext << std::endl;
#endif
//  scan_step();
  return scan_throw(VARINT);
}
	YY_BREAK
case 71:
YY_RULE_SETUP
{
  scan_exponent_convert(yytext);
  yylval.number = atof(yytext);
#ifdef TOKENDEV
  std::cout << "--> [DEBUG] FLOATING : " << yytext << std::endl;
#endif
  //scan_step();
  return scan_throw(VARFLOAT);
}
	YY_BREAK
case 72:
YY_RULE_SETUP
{
  yylval.number = atof(yytext);
#ifdef TOKENDEV
  std::cout << "--> [DEBUG] FLOATING : " << yytext << std::endl;
#endif
  //scan_step();
  return scan_throw(VARFLOAT);
}
	YY_BREAK
case 73:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{
  yylval.number = atof(yytext);
#ifdef TOKENDEV
  std::cout << "--> [DEBUG] NUMBER WITH DOT AS LAST CHARACTER : " << yytext << std::endl;
#endif
//  scan_step();
  unput('.');
  yylloc.last_column--;
  return scan_throw(NUM);
}
	YY_BREAK
case 74:
YY_RULE_SETUP
{
  yylval.number = atof(yytext);
#ifdef TOKENDEV
  std::cout << "--> [DEBUG] NUMBER : " << yytext << std::endl;
#endif
//  scan_step();
  return scan_throw(NUM);
}
	YY_BREAK
case 75:
YY_RULE_SETUP
{
  yylval.number = atof(yytext);
#ifdef TOKENDEV
  std::cout << "--> [DEBUG] LITTLE : " << yytext << std::endl;
#endif
//  scan_step();
  return scan_throw(NUM);
}
	YY_BREAK
case 76:
YY_RULE_SETUP
{
  wchar_t *pwText = to_wide_string(yytext);
  if (yytext != NULL && pwText == NULL)
  {
    std::string str = "Can\'t convert \'";
    str += yytext;
    str += "\' to UTF-8";
    BEGIN(INITIAL);
    yyerror(str);
    return scan_throw(FLEX_ERROR);
  }
  yylval.str = new std::wstring(pwText);
  FREE(pwText);
#ifdef TOKENDEV
  std::cout << "--> [DEBUG] ID : " << yytext << std::endl;
#endif
//  scan_step();
  return scan_throw(ID);
}
	YY_BREAK
case 77:
YY_RULE_SETUP
{
  yyerror("syntax error, unexpected identifier, expecting end of file");
  return scan_throw(FLEX_ERROR);
}
	YY_BREAK
case 78:
YY_RULE_SETUP
{
  yylval.comment = new std::wstring();
  comment_level = 1;
  ParserSingleInstance::pushControlStatus(Parser::WithinBlockComment);
  yy_push_state(REGIONCOMMENT);
}
	YY_BREAK
case 79:
YY_RULE_SETUP
{
  pstBuffer.clear();
  yy_push_state(LINECOMMENT);
}
	YY_BREAK
case 80:
YY_RULE_SETUP
{
  pstBuffer.clear();
  str_opener_column = yylloc.first_column;
  #ifdef TOKENDEV
    std::cout << "--> Push State DOUBLESTRING" << std::endl;
  #endif
  yy_push_state(DOUBLESTRING);
}
	YY_BREAK
case 81:
YY_RULE_SETUP
{
  /*
  ** Can not be Matrix Transposition
  ** Pushing SIMPLESTRING
  */
  pstBuffer.clear();
  str_opener_column = yylloc.first_column;
  #ifdef TOKENDEV
  std::cout << "--> Push State SIMPLESTRING" << std::endl;
  #endif
  yy_push_state(SIMPLESTRING);
}
	YY_BREAK
case 82:
YY_RULE_SETUP
{
  /*
  ** Matrix Transposition special behaviour
  ** ID' []' toto()' are transposition call
  */
  if (last_token == ID
      || last_token == RBRACK
      || last_token == RPAREN
      || last_token == RBRACE
      || last_token == VARINT
      || last_token == VARFLOAT
      || last_token == NUM
      || last_token == BOOLTRUE
      || last_token == BOOLFALSE)
  {
    #ifdef TOKENDEV
    std::cout << "--> QUOTE" << std::endl;
    #endif
    return scan_throw(QUOTE);
  }
  else
  {
    pstBuffer.clear();
    str_opener_column = yylloc.first_column;
    #ifdef TOKENDEV
    std::cout << "--> Push State SIMPLESTRING" << std::endl;
    #endif
    yy_push_state(SIMPLESTRING);
  }
}
	YY_BREAK
case 83:
YY_RULE_SETUP
scan_step();
	YY_BREAK
case 84:
/* rule 84 can match eol */
YY_RULE_SETUP
{
  yylloc.last_line += 1;
  yylloc.last_column = 1;
  scan_step();
  if (last_token != EOL) {
    return scan_throw(EOL);
  }
}
	YY_BREAK
case 85:
/* rule 85 can match eol */
YY_RULE_SETUP
{
  yylloc.last_line += 1;
  yylloc.last_column = 1;
  scan_step();
  if (last_token != EOL)
  {
    return scan_throw(EOL);
  }
  scan_throw(EOL);
}
	YY_BREAK
case 86:
/* rule 86 can match eol */
YY_RULE_SETUP
{
  yylloc.last_line += 2;
  yylloc.last_column = 1;
  scan_step();
  if (last_token != EOL)
  {
    return scan_throw(EOL);
  }
  scan_throw(EOL);
}
	YY_BREAK
case 87:
YY_RULE_SETUP
{
    std::string str = "Unexpected token \'";
    str += yytext;
    str += "\'";
    BEGIN(INITIAL);
    yyerror(str);
    return scan_throw(FLEX_ERROR);
}
	YY_BREAK

case 88:
YY_RULE_SETUP
{
    ++paren_levels.top();
    return scan_throw(LPAREN);
  }
	YY_BREAK
case 89:
YY_RULE_SETUP
{
    --paren_levels.top();
    return scan_throw(RPAREN);
  }
	YY_BREAK
case 90:
YY_RULE_SETUP
{
    unput(yytext[yyleng - 1]);
    --yylloc.last_column;
    if (last_token == ID
        || last_token == RPAREN
        || last_token == QUOTE
        || last_token == VARINT
        || last_token == VARFLOAT
        || last_token == NUM)
    {
      return scan_throw(COMMA);
    }
  }
	YY_BREAK
case 91:
YY_RULE_SETUP
return scan_throw(COLON);
	YY_BREAK
case 92:
/* rule 92 can match eol */
YY_RULE_SETUP
{
    yylloc.last_line += 1;
    yylloc.last_column = 1;
    scan_step();
    if(last_token != DOTS && last_token != EOL)
    {
      return scan_throw(EOL);
    }
    scan_throw(EOL);
  }
	YY_BREAK
case 93:
YY_RULE_SETUP
{
    unput('\'');
    yylloc.last_column--;
    if (last_token == ID
        || last_token == RPAREN
        || last_token == QUOTE)
    {
      return scan_throw(COMMA);
    }
  }
	YY_BREAK
case 94:
YY_RULE_SETUP
{
    DEBUG("yy_pop_state()");
    yy_pop_state();
    paren_levels.pop();
    ParserSingleInstance::popControlStatus();
    return scan_throw(RBRACK);
  }
	YY_BREAK
case 95:
YY_RULE_SETUP
{
    yy_pop_state();
    paren_levels.pop();
    ParserSingleInstance::popControlStatus();
    return scan_throw(RBRACE);
  }
	YY_BREAK
case 96:
case 97:
YY_RULE_SETUP
{
    // _+_ is always meaning a PLUS token
    // + alone is a plus if and only if it does not
    // fall into the {spaces}{plus} rule (in matrices space is coding)
    // as Flex is greedy the {plus} rule is only applied
    // if no {spaces}{plus} is found
    // Examples:
    // ========
    // [1 + 2 3] must be understood as [(1+2), 3]
    // [1 +2 3] must be understood as [1, 2, 3]
    // [1 +...
    // 2] must be understood as [(1+2)]
    return scan_throw(PLUS);
  }
	YY_BREAK
case 98:
case 99:
YY_RULE_SETUP
{
    // _-_ is always meaning a MINUS token
    // - alone is a MINUS only if and only if it does not
    // fall into the {spaces}{minus} rule (in matrices space is coding)
    // as Flex is greedy the {minus} rule is only applied
    // if no {spaces}{minus} is found
    // Examples:
    // ========
    // [1 - 2 3] must be understood as [(1-2), 3]
    // [1 -2 3] must be understood as [1, -2, 3]
    // [1 -...
    // 2] must be understood as [(1-2)]
    return scan_throw(MINUS);
  }
	YY_BREAK
case 100:
YY_RULE_SETUP
{
    // This rule is made to take into account the coding spaces in matrices.
    // It is important to distinguish between a space coding a matrix column separator
    // and a simple non coding space around the PLUS operator
    // Examples
    // ========
    // [a + b] == [(a + b)]
    // but [a +b] == [a, +b] and plus here is unary and is not removed, as unary plus
    // is not necessary defined for all data types (https://gitlab.com/scilab/scilab/-/issues/15850)
    // A priori, the space *is* coding
    unput('+');
    yylloc.last_column--;
    if (last_token != LBRACK
       && last_token != EOL
       && last_token != SEMI
       && last_token != COMMA
       && last_token != DOTTIMES
       && last_token != DOTRDIVIDE
       && last_token != DOTLDIVIDE
       && last_token != DOTPOWER
       && last_token != MINUS
       && last_token != PLUS
       && last_token != TIMES
       && last_token != RDIVIDE
       && last_token != LDIVIDE
       && last_token != POWER
       && last_token != KRONTIMES
       && last_token != KRONRDIVIDE
       && last_token != KRONLDIVIDE
       && last_token != EQ
       && last_token != NE
       && last_token != LT
       && last_token != GT
       && last_token != LE
       && last_token != GE
      && paren_levels.top() == 0)
    {
      return scan_throw(COMMA);
    }
  }
	YY_BREAK
case 101:
YY_RULE_SETUP
{
    // See {spaces}{plus} rule for the rationale
    unput('-');
    yylloc.last_column--;
    if (last_token != LBRACK
       && last_token != EOL
       && last_token != SEMI
       && last_token != COMMA
       && last_token != DOTTIMES
       && last_token != DOTRDIVIDE
       && last_token != DOTLDIVIDE
       && last_token != DOTPOWER
       && last_token != MINUS
       && last_token != PLUS
       && last_token != TIMES
       && last_token != RDIVIDE
       && last_token != LDIVIDE
       && last_token != POWER
       && last_token != KRONTIMES
       && last_token != KRONRDIVIDE
       && last_token != KRONLDIVIDE
       && last_token != EQ
       && last_token != NE
       && last_token != LT
       && last_token != GT
       && last_token != LE
       && last_token != GE
       && paren_levels.top() == 0)
    {
       return scan_throw(COMMA);
    }
  }
	YY_BREAK
case 102:
YY_RULE_SETUP
{
    std::string str = "Unexpected token \'";
    str += yytext;
    str += "\' within a matrix.";
    BEGIN(INITIAL);
    yyerror(str);
    return scan_throw(FLEX_ERROR);
  }
	YY_BREAK
/* {next} rules
   * ============
   * Scilab can perform a line continuation with the ..
   * In matrices as space may be coding extra care must be taken when parsing {next}
   * Some states must be preserved to parse next line and to revert to a proper state
   * after the ... // comments or ... \/* comments *\/
   */
case 103:
YY_RULE_SETUP
{
    // This rule is made to take into account a +... without spaces after plus
    // if one simply ignores the next a situation like this could arise
    // Example
    // =======
    // A = [1 +...
    // 2] 
    //
    // what is meant by the user [1 +2] ? or [1 + 2]
    // simply ignoring the ... would yield the 1st situation [1, 2]
    // We consider this is NOT proper and instead that the user meant a binary plus
    // split is two lines
    // The same rationale applies to minus.

    linebreak_stored_space = FALSE; // no spaces before ...
    linebreak_stored_token = PLUS; // keep last token to restore
    ParserSingleInstance::pushControlStatus(Parser::WithinDots);
    yy_push_state(LINEBREAK);
    return scan_throw(PLUS);
  }
	YY_BREAK
case 104:
YY_RULE_SETUP
{
    // see {spaces}*{minus}{next} for the rationale

    linebreak_stored_space = FALSE; // no spaces before ...
    linebreak_stored_token = MINUS; // keep last token to restore
    ParserSingleInstance::pushControlStatus(Parser::WithinDots);
    yy_push_state(LINEBREAK);
    return scan_throw(MINUS);
  }
	YY_BREAK
case 105:
YY_RULE_SETUP
{
    // Store the state of the previously scanned token for next rule
    // Only considerations of coding spaces is important for the parser

    linebreak_stored_space = FALSE; // no spaces before ...
    linebreak_stored_token = last_token; // keep last token to restore state
    ParserSingleInstance::pushControlStatus(Parser::WithinDots);
    yy_push_state(LINEBREAK);
  }
	YY_BREAK
case 106:
YY_RULE_SETUP
{
    // Store the state of the previously scanned token for next rule
    // Only considerations of coding spaces is important for the parser

    linebreak_stored_space = TRUE; // no spaces before ...
    linebreak_stored_token = last_token; // keep last token to restore state
    ParserSingleInstance::pushControlStatus(Parser::WithinDots);
    yy_push_state(LINEBREAK);
  }
	YY_BREAK
case YY_STATE_EOF(MATRIX):
{
    yy_pop_state();
    paren_levels.pop();
  }
	YY_BREAK

case 107:
/* rule 107 can match eol */
YY_RULE_SETUP
{
    yylloc.last_line += 1;
    yylloc.last_column = 1;
    scan_step();
    last_token = linebreak_stored_token;
    if (linebreak_stored_space)
    {
      // This is important to restore coding spaces as if ... was not present
      unput(' ');
      linebreak_stored_space = FALSE;
    }
    yy_pop_state();
    ParserSingleInstance::popControlStatus();
  }
	YY_BREAK
case 108:
YY_RULE_SETUP
{
    yylval.comment = new std::wstring();
    comment_level = 1;
    ParserSingleInstance::pushControlStatus(Parser::WithinBlockComment);
    yy_push_state(REGIONCOMMENT);
  }
	YY_BREAK
case 109:
YY_RULE_SETUP
{
    scan_throw(DOTS);
    pstBuffer.clear();
    yy_push_state(LINECOMMENT);
  }
	YY_BREAK
case 110:
YY_RULE_SETUP
{
    /* Do nothing... */
  }
	YY_BREAK
case YY_STATE_EOF(LINEBREAK):
{
    yy_pop_state();
  }
	YY_BREAK
case 111:
YY_RULE_SETUP
{
    // The following case is not handled by the parser
    // a line of code ... /* some multiline
    // comments */ continued here;
    // without the special case telling we are after comments
    // will generate the error as follows:

    // Any characters after ... yields to an error
    std::string str = "Unexpected token \'";
    str += yytext;
    str += "\' after line break with .. or ...";
    yy_pop_state();
    ParserSingleInstance::popControlStatus();
    BEGIN(INITIAL);
    yyerror(str);
    return scan_throw(FLEX_ERROR);
  }
	YY_BREAK

case 112:
/* rule 112 can match eol */
YY_RULE_SETUP
{
    //yylloc.last_line += 1;
    //yylloc.last_column = 1;
    //scan_step();
    yy_pop_state();
    // loop to manage \n and \r\n
    for (int i = yyleng - 1 ; i >= 0 ; --i)
    {
      //std::cerr << "Unputting i = {" << i << "}" << std::endl;
      //std::cerr << "Unputting {" << yytext[i] << "}" << std::endl;
      unput(yytext[i]);
      yylloc.last_column--;
    }
    // yylloc.first_column is the location of the {newline}
    // remove the size of the comment to have proper location 
    // as for <<EOF>> '//' is not part of the comment location
    yylloc.first_column -= pstBuffer.length();
    
    /*
    ** To forgot comments after lines break
    */
    if (last_token != DOTS)
    {
      //std::cerr << "pstBuffer = {" << *pstBuffer << "}" << std::endl;
      //std::cerr << "pstBuffer->c_str() = {" << pstBuffer->c_str() << "}" << std::endl;
      wchar_t *pwstBuffer = to_wide_string(pstBuffer.c_str());
      //std::wcerr << L"pwstBuffer = W{" << pwstBuffer << L"}" << std::endl;
      if (pstBuffer.c_str() != NULL && pwstBuffer == NULL)
      {
        pstBuffer.clear();
        std::string str = "Can\'t convert \'";
        str += pstBuffer.c_str();
        str += "\' to UTF-8";
        BEGIN(INITIAL);
        yyerror(str);
        return scan_throw(FLEX_ERROR);
      }
      yylval.comment = new std::wstring(pwstBuffer);
      pstBuffer.clear();
      FREE (pwstBuffer);
      return scan_throw(COMMENT);
    }
    else
    {
      pstBuffer.clear();
    }
  }
	YY_BREAK
case YY_STATE_EOF(LINECOMMENT):
{
    yy_pop_state();
    wchar_t *pwstBuffer = to_wide_string(pstBuffer.c_str());
    if (pstBuffer.c_str() != NULL && pwstBuffer == NULL)
    {
      pstBuffer.clear();
      std::string str = "Can\'t convert \'";
      str += pstBuffer.c_str();
      str += "\' to UTF-8";
      BEGIN(INITIAL);
      yyerror(str);
      return scan_throw(FLEX_ERROR);
    }
    yylval.comment = new std::wstring(pwstBuffer);
    pstBuffer.clear();
    FREE (pwstBuffer);
    return scan_throw(COMMENT);
  }
	YY_BREAK
case 113:
YY_RULE_SETUP
{
      // Put the char in a temporary CHAR buffer to go through UTF-8 trouble
      // only translate to WCHAR_T when popping state.
      pstBuffer += yytext;
  }
	YY_BREAK

case 114:
YY_RULE_SETUP
{
    --comment_level;
    if (comment_level == 0)
    {
      ParserSingleInstance::popControlStatus();
      yy_pop_state();
      //return scan_throw(BLOCKCOMMENT);
    }
  }
	YY_BREAK
case 115:
YY_RULE_SETUP
{
    ++comment_level;
    yy_push_state(REGIONCOMMENT);
  }
	YY_BREAK
case 116:
/* rule 116 can match eol */
YY_RULE_SETUP
{
    yylloc.last_line += 1;
    yylloc.last_column = 1;
    scan_step();
    *yylval.comment += L"\n";
  }
	YY_BREAK
case 117:
case 118:
YY_RULE_SETUP
{
      wchar_t *pwText = to_wide_string(yytext);
      *yylval.comment += std::wstring(pwText);
      FREE(pwText);
  }
	YY_BREAK
case YY_STATE_EOF(REGIONCOMMENT):
{
      yy_pop_state();
//    std::string str = "unexpected end of file in a comment";
//    scan_error(str);
  }
	YY_BREAK

case 119:
YY_RULE_SETUP
pstBuffer += "\"";
	YY_BREAK
case 120:
YY_RULE_SETUP
pstBuffer += "'";
	YY_BREAK
case 121:
YY_RULE_SETUP
pstBuffer += "\"";
	YY_BREAK
case 122:
YY_RULE_SETUP
pstBuffer += "'";
	YY_BREAK
case 123:
YY_RULE_SETUP
{
    yy_pop_state();
    //scan_step();
    wchar_t *pwstBuffer = to_wide_string(pstBuffer.c_str());
    if (pstBuffer.c_str() != NULL && pwstBuffer == NULL)
    {
      pstBuffer.clear();
      std::string str = "Can\'t convert \'";
      str += pstBuffer.c_str();
      str += "\' to UTF-8";
      BEGIN(INITIAL);
      yyerror(str);
      return scan_throw(FLEX_ERROR);
    }
    yylval.str = new std::wstring(pwstBuffer);
    pstBuffer.clear();
    FREE(pwstBuffer);
    yylloc.first_column = str_opener_column;
    return scan_throw(STR);
  }
	YY_BREAK
case 124:
YY_RULE_SETUP
{
    pstBuffer.clear();
    BEGIN(INITIAL);
    yyerror("Heterogeneous string detected, starting with \' and ending with \".");
    return scan_throw(FLEX_ERROR);
  }
	YY_BREAK
case 125:
/* rule 125 can match eol */
YY_RULE_SETUP
{
    pstBuffer.clear();
    yylloc.last_line += 1;
    yylloc.last_column = 1;
    BEGIN(INITIAL);
    ParserSingleInstance::popControlStatus();
    yyerror("Unexpected end of line in a string.");
    return scan_throw(FLEX_ERROR);
  }
	YY_BREAK
case YY_STATE_EOF(SIMPLESTRING):
{
    pstBuffer.clear();
    BEGIN(INITIAL);
    yyerror("Unexpected end of file in a string.");
    return scan_throw(FLEX_ERROR);
  }
	YY_BREAK
case 126:
case 127:
YY_RULE_SETUP
{
    //scan_step();
    pstBuffer += yytext;
  }
	YY_BREAK

case 128:
YY_RULE_SETUP
pstBuffer += "\"";
	YY_BREAK
case 129:
YY_RULE_SETUP
pstBuffer += "'";
	YY_BREAK
case 130:
YY_RULE_SETUP
pstBuffer += "\"";
	YY_BREAK
case 131:
YY_RULE_SETUP
pstBuffer += "'";
	YY_BREAK
case 132:
YY_RULE_SETUP
{
    yy_pop_state();
    //scan_step();
    wchar_t *pwstBuffer = to_wide_string(pstBuffer.c_str());
    if (pstBuffer.c_str() != NULL && pwstBuffer == NULL)
    {
      pstBuffer.clear();
      std::string str = "Can\'t convert \'";
      str += pstBuffer.c_str();
      str += "\' to UTF-8";
      BEGIN(INITIAL);
      yyerror(str);
      return scan_throw(FLEX_ERROR);
    }
    yylval.str = new std::wstring(pwstBuffer);
    pstBuffer.clear();
    FREE(pwstBuffer);
    yylloc.first_column = str_opener_column;
    return scan_throw(STR);
  }
	YY_BREAK
case 133:
YY_RULE_SETUP
{
    pstBuffer.clear();
    BEGIN(INITIAL);
    yyerror("Heterogeneous string detected, starting with \" and ending with \'.");
    return scan_throw(FLEX_ERROR);
  }
	YY_BREAK
case 134:
/* rule 134 can match eol */
YY_RULE_SETUP
{
    pstBuffer.clear();
    yylloc.last_line += 1;
    yylloc.last_column = 1;
    ParserSingleInstance::popControlStatus();
    BEGIN(INITIAL);
    yyerror("Unexpected end of line in a string.");
    return scan_throw(FLEX_ERROR);
  }
	YY_BREAK
case YY_STATE_EOF(DOUBLESTRING):
{
    pstBuffer.clear();
    BEGIN(INITIAL);
    yyerror("Unexpected end of file in a string.");
    return scan_throw(FLEX_ERROR);
  }
	YY_BREAK
case 135:
case 136:
YY_RULE_SETUP
{
    //scan_step();
    pstBuffer += yytext;
  }
	YY_BREAK

case 137:
YY_RULE_SETUP
{
        if (last_token == ID)
        {
          scan_throw(SPACES);
          //return ID;
        }
    }
	YY_BREAK
case 138:
YY_RULE_SETUP
{
      BEGIN(INITIAL);
      scan_step();
      return scan_throw(SEMI);
    }
	YY_BREAK
case 139:
YY_RULE_SETUP
{
      BEGIN(INITIAL);
      scan_step();
      return scan_throw(COMMA);
    }
	YY_BREAK
case 140:
/* rule 140 can match eol */
YY_RULE_SETUP
{
      BEGIN(INITIAL);
      yylloc.last_line += 1;
      yylloc.last_column = 1;
      scan_step();
      return scan_throw(EOL);
    }
	YY_BREAK
case 141:
YY_RULE_SETUP
{
      if (last_token == STR || last_token == SPACES)
      {
        wchar_t *pwText = to_wide_string(yytext);
        yylval.str = new std::wstring(pwText);
        FREE(pwText);
        return scan_throw(STR);
      }
      else
      {
        BEGIN(INITIAL);
        return scan_throw(ASSIGN);
      }
    }
	YY_BREAK
case 142:
YY_RULE_SETUP
{
      if (last_token == STR || last_token == SPACES)
      {
        wchar_t *pwText = to_wide_string(yytext);
        yylval.str = new std::wstring(pwText);
        FREE(pwText);
        return scan_throw(STR);
      }
      else
      {
        BEGIN(INITIAL);
        return scan_throw(LPAREN);
      }
    }
	YY_BREAK
case 143:
YY_RULE_SETUP
{
        if (last_token == STR || last_token == SPACES)
        {
          wchar_t *pwText = to_wide_string(yytext);
          yylval.str = new std::wstring(pwText);
          FREE(pwText);
          return scan_throw(STR);
        }
        else
        {
          BEGIN(INITIAL);
          return scan_throw(LT);
        }
    }
	YY_BREAK
case 144:
YY_RULE_SETUP
{
        if (last_token == STR || last_token == SPACES)
        {
          wchar_t *pwText = to_wide_string(yytext);
          yylval.str = new std::wstring(pwText);
          FREE(pwText);
          return scan_throw(STR);
        }
        else
        {
          BEGIN(INITIAL);
          return scan_throw(GT);
        }
    }
	YY_BREAK
case 145:
YY_RULE_SETUP
{
        if (last_token == STR || last_token == SPACES)
        {
          wchar_t *pwText = to_wide_string(yytext);
          yylval.str = new std::wstring(pwText);
          FREE(pwText);
          return scan_throw(STR);
        }
        else
        {
          BEGIN(INITIAL);
          return scan_throw(NOT);
        }
    }
	YY_BREAK
case 146:
YY_RULE_SETUP
{
      wchar_t *pwText = to_wide_string(yytext);
      yylval.str = new std::wstring(pwText);
      FREE(pwText);
      return scan_throw(STR);
    }
	YY_BREAK
case YY_STATE_EOF(SHELLMODE):
{
      BEGIN(INITIAL);
    }
	YY_BREAK

case 147:
YY_RULE_SETUP
ECHO;
	YY_BREAK
			case YY_STATE_EOF(INITIAL):
			case YY_STATE_EOF(BEGINID):
				yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = (yytext_ptr);
	int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr) - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if (((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    
	yy_current_state = (yy_start);
	yy_current_state += YY_AT_BOL();

	(yy_state_ptr) = (yy_state_buf);
	*(yy_state_ptr)++ = yy_current_state;

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1051 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		*(yy_state_ptr)++ = yy_current_state;
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	int yy_is_jam;
    
	YY_CHAR yy_c = 1;
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1051 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 1050);
	if ( ! yy_is_jam )
		*(yy_state_ptr)++ = yy_current_state;

		return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT

    static void yyunput (int c, char * yy_bp )
{
	char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		int number_to_move = (yy_n_chars) + 2;
		char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = (int) YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (int) ((yy_c_buf_p) - (yytext_ptr));
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return 0;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void yy_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2)  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf  );

	yyfree( (void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return NULL;

	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = (int) (size - 2);	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = NULL;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (const char * yystr )
{
    
	return yy_scan_bytes( yystr, (int) strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (const char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = (yy_size_t) (_yybytes_len + 2);
	buf = (char *) yyalloc( n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

    static void yy_push_state (int  _new_state )
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_size_t) (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) yyalloc( new_size  );

		else
			(yy_start_stack) = (int *) yyrealloc(
					(void *) (yy_start_stack), new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(_new_state);
}

    static void yy_pop_state  (void)
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

    static int yy_top_state  (void)
{
    	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yynoreturn yy_fatal_error (const char* msg )
{
			fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int yyget_lineno  (void)
{
    
    return yylineno;
}

/** Get the input stream.
 * 
 */
FILE *yyget_in  (void)
{
        return yyin;
}

/** Get the output stream.
 * 
 */
FILE *yyget_out  (void)
{
        return yyout;
}

/** Get the length of the current token.
 * 
 */
int yyget_leng  (void)
{
        return yyleng;
}

/** Get the current token.
 * 
 */

char *yyget_text  (void)
{
        return yytext;
}

/** Set the current line number.
 * @param _line_number line number
 * 
 */
void yyset_lineno (int  _line_number )
{
    
    yylineno = _line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * 
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  _in_str )
{
        yyin = _in_str ;
}

void yyset_out (FILE *  _out_str )
{
        yyout = _out_str ;
}

int yyget_debug  (void)
{
        return yy_flex_debug;
}

void yyset_debug (int  _bdebug )
{
        yy_flex_debug = _bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = NULL;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = NULL;
    (yy_init) = 0;
    (yy_start) = 0;

    (yy_start_stack_ptr) = 0;
    (yy_start_stack_depth) = 0;
    (yy_start_stack) =  NULL;

    (yy_state_buf) = 0;
    (yy_state_ptr) = 0;
    (yy_full_match) = 0;
    (yy_lp) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = NULL;
    yyout = NULL;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer( YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Destroy the start condition stack. */
        yyfree( (yy_start_stack)  );
        (yy_start_stack) = NULL;

    yyfree ( (yy_state_buf) );
    (yy_state_buf)  = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n )
{
		
	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s )
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
			return malloc(size);
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
		
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void yyfree (void * ptr )
{
			free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

int scan_throw(int token) {
  last_token = token;
#ifdef DEV
  std::cout << "--> [DEBUG] TOKEN : " << token << " - " << token_to_string(token) << std::endl;
#endif
  return token;
}

int get_last_token() {
  return last_token;
}

void scan_step() {
  yylloc.first_line = yylloc.last_line;
  yylloc.first_column = yylloc.last_column;
}

/*
** convert floating numbers to C standard
** 1.2d-3 -> 1.2e-3
** 1.2D-3 -> 1.2e-3
*/
void scan_exponent_convert(char *in)
{
  for (; *in != 'd' && *in != 'D'; ++in);
  *in = 'e';
}

#ifdef _MSC_VER
int isatty (int desc)
{
  return 0;
}
#endif

#ifdef DEV
std::string token_to_string(int token)
{
  std::string str;
  switch(token)
  {
    case AND :                   str = "AND"; break;
    case ASSIGN :                str = "ASSIGN"; break;
    case BOOLFALSE :             str = "BOOLFALSE"; break;
    case BOOLTRUE :              str = "BOOLTRUE"; break;
    case BREAK :                 str = "BREAK"; break;
    case CASE :                  str = "CASE"; break;
    case CATCH :                 str = "CATCH"; break;
    case COLON :                 str = "COLON"; break;
    case COMMA :                 str = "COMMA"; break;
    case COMMENT :               str = "COMMENT"; break;
    case CONTINUE :              str = "CONTINUE"; break;
    case CONTROLLDIVIDE :        str = "CONTROLLDIVIDE"; break;
    case CONTROLRDIVIDE :        str = "CONTROLRDIVIDE"; break;
    case CONTROLTIMES :          str = "CONTROLTIMES"; break;
    case DO :                    str = "DO"; break;
    case DOLLAR :                str = "DOLLAR"; break;
    case DOT :                   str = "DOT"; break;
    case DOTLDIVIDE :            str = "DOTLDIVIDE"; break;
    case DOTPOWER :              str = "DOTPOWER"; break;
    case DOTQUOTE :              str = "DOTQUOTE"; break;
    case DOTRDIVIDE :            str = "DOTRDIVIDE"; break;
    case DOTS :                  str = "DOTS"; break;
    case DOTTIMES :              str = "DOTTIMES"; break;
    case ELSE :                  str = "ELSE"; break;
    case ELSEIF :                str = "ELSEIF"; break;
    case END :                   str = "END"; break;
    case ENDFUNCTION :           str = "ENDFUNCTION"; break;
    case EOL :                   str = "EOL"; break;
    case EQ :                    str = "EQ"; break;
    case FLEX_ERROR :            str = "FLEX_ERROR"; break;
    case FOR :                   str = "FOR"; break;
    case FUNCTION :              str = "FUNCTION"; break;
    case GE :                    str = "GE"; break;
    case GT :                    str = "GT"; break;
    case ID :                    str = "ID"; break;
    case IF :                    str = "IF"; break;
    case KRONLDIVIDE :           str = "KRONLDIVIDE"; break;
    case KRONRDIVIDE :           str = "KRONRDIVIDE"; break;
    case KRONTIMES :             str = "KRONTIMES"; break;
    case LBRACE :                str = "LBRACE"; break;
    case LBRACK :                str = "LBRACK"; break;
    case LDIVIDE :               str = "LDIVIDE"; break;
    case LE :                    str = "LE"; break;
    case LPAREN :                str = "LPAREN"; break;
    case LT :                    str = "LT"; break;
    case MINUS :                 str = "MINUS"; break;
    case NE :                    str = "NE"; break;
    case NOT :                   str = "NOT"; break;
    case NUM :                   str = "NUM"; break;
    case OR :                    str = "OR"; break;
    case OROR :                  str = "OROR"; break;
    case OTHERWISE :             str = "OTHERWISE"; break;
    case PLUS :                  str = "PLUS"; break;
    case POWER :                 str = "POWER"; break;
    case QUOTE :                 str = "QUOTE"; break;
    case RBRACE :                str = "RBRACE"; break;
    case RBRACK :                str = "RBRACK"; break;
    case RDIVIDE :               str = "RDIVIDE"; break;
    case RETURN :                str = "RETURN"; break;
    case RPAREN :                str = "RPAREN"; break;
    case SELECT :                str = "SELECT"; break;
    case SEMI :                  str = "SEMI"; break;
    case SPACES :                str = "SPACES"; break;
    case STR :                   str = "STR"; break;
    case SWITCH :                str = "SWITCH"; break;
    case THEN :                  str = "THEN"; break;
    case TIMES :                 str = "TIMES"; break;
    case TRY :                   str = "TRY"; break;
    case VARFLOAT :              str = "VARFLOAT"; break;
    case VARINT :                str = "VARINT"; break;
    case WHILE :                 str = "WHILE"; break;
    default :                    str = "UNKNOWN"; break;
  }
  return str;

}
#endif

