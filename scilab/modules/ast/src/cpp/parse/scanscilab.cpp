
#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern int yyleng;

extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = NULL; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = NULL;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart ( FILE *input_file  );
void yy_switch_to_buffer ( YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer ( FILE *file, int size  );
void yy_delete_buffer ( YY_BUFFER_STATE b  );
void yy_flush_buffer ( YY_BUFFER_STATE b  );
void yypush_buffer_state ( YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state ( void );

static void yyensure_buffer_stack ( void );
static void yy_load_buffer_state ( void );
static void yy_init_buffer ( YY_BUFFER_STATE b, FILE *file  );
#define YY_FLUSH_BUFFER yy_flush_buffer( YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer ( char *base, yy_size_t size  );
YY_BUFFER_STATE yy_scan_string ( const char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes ( const char *bytes, int len  );

void *yyalloc ( yy_size_t  );
void *yyrealloc ( void *, yy_size_t  );
void yyfree ( void *  );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define yywrap() (/*CONSTCOND*/1)
#define YY_SKIP_YYWRAP
typedef flex_uint8_t YY_CHAR;

FILE *yyin = NULL, *yyout = NULL;

typedef int yy_state_type;

extern int yylineno;
int yylineno = 1;

extern char *yytext;
#ifdef yytext_ptr
#undef yytext_ptr
#endif
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state ( void );
static yy_state_type yy_try_NUL_trans ( yy_state_type current_state  );
static int yy_get_next_buffer ( void );
static void yynoreturn yy_fatal_error ( const char* msg  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;
#define YY_NUM_RULES 149
#define YY_END_OF_BUFFER 150
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_acclist[1006] =
    {   0,
    16409,  128,  128,  137,  137,  119,  119,  115,  115,  150,
       89,  149,   85,   89,  149,   86,  149,   86,   89,  149,
       78,   89,  149,   82,   89,  149,   30,   89,  149,   28,
       89,  149,   78,   89,  149,   33,   89,  149,   84,   89,
      149,   37,   89,  149,   38,   89,  149,   51,   89,  149,
       50,   89,  149,   40,   89,  149,   49,   89,  149,   70,
       89,  149,   52,   89,  149,   72,   89,  149,   41,   89,
      149,   39,   89,  149,   63,   89,  149,   67,   89,  149,
       64,   89,  149,   27,   89,  149,   68,   89,  149,   53,
       89,  149,   69,   89,  149,   54,   89,  149,   78,   89,

      149,   78,   89,  149,   78,   89,  149,   78,   89,  149,
       78,   89,  149,   78,   89,  149,   78,   89,  149,   78,
       89,  149,   78,   89,  149,   78,   89,  149,   78,   89,
      149,   78,   89,  149,   42,   89,  149,   35,   89,  149,
       43,   89,  149,   27,   89,  149,   89,  149,   89,  149,
       89,  149,   89,  149,   89,  149,   89,  149,   89,  149,
       89,  149,   89,  149,   85,   89,  149,16409,   78,   89,
      149,   30,   89,  149,   28,   89,  149,   78,   89,  149,
       78,   89,  149,   78,   89,  149,   78,   89,  149,   78,
       89,  149,   78,   89,  149,   78,   89,  149,   78,   89,

      149,   78,   89,  149,   78,   89,  149,   78,   89,  149,
       78,   89,  149,   78,   89,  149,   89,  149,   89,  149,
       89,  149,   89,  149,   89,  149,   89,  149,   89,  149,
       89,  149,   89,  149,  128,  129,  149,  127,  149,  127,
      129,  149,  126,  129,  149,  125,  129,  149,  129,  149,
      137,  138,  149,  136,  149,  136,  138,  149,  134,  138,
      149,  135,  138,  149,  138,  149,  119,  120,  149,  118,
      149,  118,  120,  149,  120,  149,  120,  149,  115,  149,
      114,  149,  114,  149,  113,  149,  112,  113,  149,  109,
      149,  109,  113,  149,  113,  149,  104,  149,   85,  104,

      149,   94,  149,   94,  104,  149,   78,  104,  149,   82,
      104,  149,   30,  104,  149,   28,  104,  149,   78,  104,
      149,   33,  104,  149,   84,  104,  149,   90,  104,  149,
       91,  104,  149,   51,  104,  149,   98,  104,  149,   40,
      104,  149,  100,  104,  149,   70,  104,  149,   52,  104,
      149,   72,  104,  149,   41,   93,  104,  149,   39,  104,
      149,   63,  104,  149,   67,  104,  149,   64,  104,  149,
       27,  104,  149,   68,  104,  149,   53,  104,  149,   96,
      104,  149,   54,  104,  149,   42,  104,  149,   35,  104,
      149,   97,  104,  149,   27,  104,  149,  104,  149,  104,

      149,  104,  149,  104,  149,  104,  149,  104,  149,  104,
      149,  104,  149,  148,  149,  139,  149,  142,  149,  142,
      149,   82,  149,   84,  149,  144,  148,  149,  141,  149,
      148,  149,  140,  149,  145,  148,  149,  143,  148,  149,
      146,  148,  149,  147,  148,  149,  149,   26,  149,  149,
       26,  149,  149,   26,  149,   26,  149,   26,  149,   26,
      149,   26,  149,   26,  149,   26,  149,   26,  149,   26,
      149,   26,  149,   26,  149,   26,  149,  149,  149,  149,
      149,  149,  149,  149,  149,   85,   87,   87,   83,   86,
       78,   78,    3,   32,   78,    2,   31,   78,   34,   54,

       29,   44,   45,   71,   46,   77,   47,   48,   80,   81,
       79,   76,   72,   79,   79,   65,   62,   61,   66,   78,
       78,   78,   78,   18,   78,   78,   78,   78,   78,    5,
       78,   78,   78,   78,   78,   78,   78,   78,   36,   78,
       85,16409,   78,   78,    3,   32,   78,    2,   31,   78,
       78,   78,   78,   78,   18,   78,   78,   78,   78,   78,
        5,   78,   78,   78,   78,   78,   78,   78,   78,   78,
      128,  127,  121,  122,  123,  124,  137,  136,  130,  131,
      132,  133,  119,  118,  116,  117,  115,  114,  112,  109,
      110,  111,   85,   83,   95,   92,  102,  103,   93,   94,

       32,   78,   31,   78,  107,   93,  148,  139,  142,   80,
      148,   81,  148,   26,   26,    3,   26,    2,   26,   26,
       26,   26,   26,   18,   26,   26,   26,   26,   26,    5,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   88,
       88,   58,   55,   56,   57,   59,   79,   79,   75,   76,
       73,   79,   74,   79,   60,   78,   78,   78,   78,   78,
       78,    9,   78,   16,   78,   78,   78,   78,   78,   78,
       78,   78,   21,   78,   78,    1,   78, 8217, 8217,   78,
       78,   78,   78,   78,   78,    9,   78,   16,   78,   78,
       78,   78,   78,   78,   78,   78,   21,   78,   78,    1,

       78,   99,  101,  108,  105,  106,   26,   26,   26,   26,
       26,   26,    9,   26,   16,   26,   26,   26,   26,   26,
       26,   26,   26,   21,   26,   26,   73,   74,   79,   79,
       78,   78,   13,   78,   78,   78,    7,   78,   78,   78,
       78,   78,   78,   78,   78,    6,   78,   78,    1,    1,
       78,    1,    1,    1,    1,    1,    1,    1,    1,   78,
     8217,   78,   78,   13,   78,   78,   78,    7,   78,   78,
       78,   78,   78,   78,   78,   78,    6,   78,   78,    1,
        1,   78,    1,    1,    1,    1,    1,    1,    1,    1,
       78,   26,   26,   13,   26,   26,   26,    7,   26,   26,

       26,   26,   26,   26,   26,   26,    6,   26,   26,   26,
       78,   78,   79,   79,   78,   19,   78,   22,   78,   78,
       78,   78,   78,   78,   78,   78,   78,   78,   17,   78,
        1,    1,    1,    1,    1,    1,    1,   78,   78,   78,
       19,   78,   22,   78,   78,   78,   78,   78,   78,   78,
       78,   78,   78,   17,   78,    1, 8217,    1, 8217,    1,
        1,    1,    1,    1,    1,    1,   26,   26,   26,   19,
       26,   22,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   17,   26,   79,   79,   78,   78,    8,   78,
       78,   78,   78,   24,   78,   23,   78,   10,   78,   11,

       78,    1,    1,    1,   78,   78,    8,   78,   78,   78,
       78,   24,   78,   23,   78,   10,   78,   11,   78,    1,
     8217,    1,    1,    1,   26,   26,    8,   26,   26,   26,
       26,   24,   26,   23,   26,   10,   26,   11,   26,   79,
       78,   78,   78,   78,   78,    1,   78,   78,   78,   78,
       78,   78,    1,   78,   26,   26,   26,   26,   26,   79,
       78,   20,   78,   78,   14,   78,   78,   78,   20,   78,
       78,   14,   78,   78,   26,   20,   26,   26,   14,   26,
       26,    4,   78,   78,   12,   78,    4,   78,   78,   12,
       78,    4,   26,   26,   12,   26,   78,   78,   26,   15,

       78,   15,   78,   15,   26
    } ;

static const flex_int16_t yy_accept[949] =
    {   0,
        1,    1,    2,    3,    4,    5,    6,    7,    8,    9,
       10,   10,   10,   10,   10,   10,   10,   10,   10,   11,
       13,   16,   18,   21,   24,   27,   30,   33,   36,   39,
       42,   45,   48,   51,   54,   57,   60,   63,   66,   69,
       72,   75,   78,   81,   84,   87,   90,   93,   96,   99,
      102,  105,  108,  111,  114,  117,  120,  123,  126,  129,
      132,  135,  138,  141,  144,  147,  149,  151,  153,  155,
      157,  159,  161,  163,  165,  169,  172,  175,  178,  181,
      184,  187,  190,  193,  196,  199,  202,  205,  208,  211,
      214,  217,  219,  221,  223,  225,  227,  229,  231,  233,

      235,  238,  240,  243,  246,  249,  251,  254,  256,  259,
      262,  265,  267,  270,  272,  275,  277,  279,  281,  283,
      285,  287,  290,  292,  295,  297,  299,  302,  304,  307,
      310,  313,  316,  319,  322,  325,  328,  331,  334,  337,
      340,  343,  346,  349,  352,  355,  359,  362,  365,  368,
      371,  374,  377,  380,  383,  386,  389,  392,  395,  398,
      400,  402,  404,  406,  408,  410,  412,  414,  416,  418,
      420,  422,  424,  426,  429,  431,  433,  435,  438,  441,
      444,  447,  448,  450,  451,  453,  454,  456,  458,  460,
      462,  464,  466,  468,  470,  472,  474,  476,  478,  479,

      480,  481,  482,  483,  484,  485,  486,  487,  488,  489,
      490,  490,  490,  491,  492,  492,  492,  492,  492,  492,
      492,  492,  492,  493,  493,  493,  493,  493,  493,  493,
      493,  493,  496,  499,  500,  501,  501,  502,  503,  504,
      505,  506,  507,  508,  509,  510,  510,  511,  512,  512,
      513,  514,  515,  516,  516,  516,  516,  516,  516,  516,
      516,  516,  516,  517,  518,  518,  519,  519,  520,  520,
      520,  521,  522,  523,  524,  526,  527,  528,  529,  530,
      532,  533,  534,  535,  536,  537,  538,  539,  540,  540,
      541,  541,  541,  541,  541,  541,  541,  541,  541,  543,

      543,  543,  543,  543,  543,  543,  543,  543,  543,  543,
      543,  544,  544,  544,  544,  544,  544,  544,  544,  544,
      545,  545,  545,  545,  545,  545,  545,  545,  545,  548,
      551,  552,  553,  554,  555,  557,  558,  559,  560,  561,
      563,  564,  565,  566,  567,  568,  569,  570,  571,  571,
      571,  571,  571,  571,  571,  571,  571,  572,  573,  574,
      575,  576,  577,  578,  579,  580,  581,  582,  583,  584,
      585,  586,  587,  588,  589,  590,  591,  592,  593,  594,
      596,  597,  598,  599,  599,  600,  601,  603,  605,  605,
      605,  606,  607,  608,  609,  610,  612,  614,  615,  615,

      615,  615,  615,  615,  615,  615,  615,  616,  616,  616,
      616,  616,  616,  616,  616,  616,  618,  620,  621,  622,
      623,  624,  626,  627,  628,  629,  630,  632,  633,  634,
      635,  636,  637,  638,  639,  640,  640,  640,  640,  640,
      640,  640,  640,  641,  642,  642,  642,  642,  642,  642,
      642,  642,  642,  642,  642,  642,  642,  642,  642,  643,
      644,  645,  645,  645,  646,  647,  648,  648,  648,  648,
      648,  648,  648,  648,  648,  649,  649,  649,  649,  649,
      649,  649,  649,  649,  650,  651,  651,  653,  653,  655,
      655,  655,  655,  655,  655,  655,  655,  656,  657,  658,

      659,  660,  661,  662,  664,  666,  667,  668,  669,  670,
      671,  672,  673,  675,  676,  678,  678,  678,  678,  678,
      678,  678,  678,  678,  678,  678,  678,  678,  678,  678,
      678,  678,  678,  678,  678,  678,  678,  678,  678,  678,
      678,  678,  678,  678,  679,  680,  680,  680,  680,  680,
      680,  680,  680,  680,  680,  680,  680,  680,  680,  680,
      681,  682,  683,  684,  685,  686,  688,  690,  691,  692,
      693,  694,  695,  696,  697,  699,  700,  702,  702,  702,
      702,  703,  704,  705,  706,  707,  707,  707,  707,  707,
      707,  707,  707,  707,  707,  707,  707,  707,  707,  707,

      708,  709,  710,  711,  712,  713,  715,  717,  718,  719,
      720,  721,  722,  723,  724,  726,  727,  727,  727,  727,
      727,  727,  727,  727,  727,  727,  728,  729,  729,  729,
      729,  729,  729,  729,  729,  729,  729,  729,  729,  729,
      729,  729,  730,  731,  731,  731,  731,  731,  731,  731,
      731,  731,  731,  731,  731,  732,  733,  735,  736,  737,
      739,  740,  741,  742,  743,  744,  745,  746,  748,  749,
      750,  752,  753,  754,  755,  756,  757,  758,  759,  760,
      761,  761,  761,  761,  761,  761,  761,  761,  761,  761,
      761,  761,  761,  761,  761,  761,  761,  761,  762,  762,

      762,  762,  762,  762,  762,  763,  764,  766,  767,  768,
      770,  771,  772,  773,  774,  775,  776,  777,  779,  780,
      781,  783,  784,  785,  786,  787,  788,  789,  790,  791,
      792,  792,  792,  792,  792,  792,  792,  793,  794,  796,
      797,  798,  800,  801,  802,  803,  804,  805,  806,  807,
      809,  810,  811,  812,  813,  813,  813,  813,  813,  813,
      813,  814,  814,  814,  814,  814,  814,  814,  814,  814,
      814,  814,  814,  814,  814,  814,  814,  815,  816,  818,
      820,  821,  822,  823,  824,  825,  826,  827,  828,  829,
      831,  832,  833,  834,  835,  836,  837,  838,  838,  838,

      838,  838,  838,  838,  838,  839,  840,  841,  843,  845,
      846,  847,  848,  849,  850,  851,  852,  853,  854,  856,
      858,  860,  861,  862,  863,  864,  865,  866,  867,  868,
      869,  870,  872,  874,  875,  876,  877,  878,  879,  880,
      881,  882,  883,  885,  886,  887,  887,  887,  887,  887,
      887,  887,  887,  887,  887,  887,  888,  889,  891,  892,
      893,  894,  896,  898,  900,  902,  903,  904,  905,  905,
      905,  906,  907,  909,  910,  911,  912,  914,  916,  918,
      920,  922,  923,  924,  925,  926,  927,  929,  930,  931,
      932,  934,  936,  938,  940,  940,  940,  940,  941,  942,

      943,  944,  945,  946,  948,  949,  950,  951,  952,  953,
      955,  956,  957,  958,  959,  960,  961,  962,  964,  965,
      967,  968,  969,  971,  972,  974,  975,  976,  978,  979,
      981,  982,  984,  985,  987,  989,  990,  992,  994,  995,
      997,  998,  999, 1000, 1002, 1004, 1006, 1006
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        2,    2,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    5,    6,    7,    8,    9,   10,   11,   12,
       13,   14,   15,   16,   17,   18,   19,   20,   20,   20,
       20,   20,   20,   20,   20,   20,   20,   21,   22,   23,
       24,   25,    5,   26,    5,    5,    5,   27,   28,   29,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,   30,    5,    5,    5,    5,    5,    5,
       31,   32,   33,   34,    5,    1,   35,   36,   37,   38,

       39,   40,   41,   42,   43,    5,   44,   45,   46,   47,
       48,    5,    5,   49,   50,   51,   52,    5,   53,    5,
       54,    5,   55,   56,   57,   58,    1,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   60,   60,   60,   60,   60,   60,   60,
       60,   60,   60,   60,   60,   60,   60,   60,   60,   61,
       61,   61,   61,   61,   61,   61,   61,   61,   61,   61,
       61,   61,   61,   61,   61,   61,   61,   61,   61,   61,
       61,   61,   61,   61,   61,   61,   62,   61,   61,   61,
       63,    1,    1,   64,   64,   64,   64,   64,   64,   64,

       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   65,   66,   66,   66,   66,   66,   66,
       66,   66,   66,   66,   66,   66,   67,   68,   69,   70,
       71,   71,   71,   72,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const YY_CHAR yy_meta[73] =
    {   0,
        1,    2,    3,    4,    5,    6,    5,    5,    7,    1,
        8,    9,    1,   10,    1,   11,    1,   12,   10,   13,
        1,   11,    9,    9,    9,    1,    5,    5,    5,    5,
        1,    1,    1,    1,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    5,    5,    5,    5,    5,    5,    5,
        5,    5
    } ;

static const flex_int16_t yy_base[980] =
    {   0,
        0,   72,  142,  146,  152,  162,  158,  171,  175,  178,
      184,  189,  208,    0,  279,  336,  394,    0, 1270, 4960,
      193,  167,  284,  243, 4960,  252,  261,  438, 1255, 4960,
     4960, 4960,  133, 4960, 4960, 1234,  352,  180,  506, 4960,
     4960,  182,  152,  332,  333, 4960, 1236, 4960, 4960,  324,
      338,  440,  442,  447,  539,  444,  487,  489,  553,  556,
      559, 4960, 1191, 4960,  341,  320,  139,  502,  229,  552,
      557,  330,  562, 1185,  624,  578,  587,  596,  695,  669,
      672,  697,  699,  704,  728,  701,  741,  743,  745,  748,
      771,  577,  231,  610,  237,  615,  620,  460,  644, 1181,

        0, 4960, 1225,  330,  338, 4960,    0, 4960, 1222,  339,
      340, 4960,    0, 4960, 1204, 1183, 1182,    0, 4960, 1191,
     4960, 1179, 4960, 1143,  355, 4960,  803,  720,  801,  779,
     4960,    0,    0,  796, 1134, 4960, 4960, 4960,  153, 1103,
     4960,  461,  820,  482,    0, 1117, 4960,  808,  579,  606,
      684, 4960, 1092, 4960, 4960, 4960,  993, 4960,  714,  782,
      469,  796,  317,  801,  788,  806,  977,    0,  598, 4960,
     1001, 4960, 4960,    0, 4960,  583, 4960,    0,    0,    0,
        0, 4960,  806,  815,  859,  615,  862,  865,  903,  867,
      905,  907,  931,  933,  935,  937,  949,  963,  947,  652,

      956,  507,  961,  859,  966,  940,  937, 4960,  984, 4960,
     1028, 1031,  979, 1008,  980,  766,  995,  535, 1001, 1005,
     1010,  926,    0, 1015,  907, 1020,  625, 1025, 1029, 1034,
      924, 1069, 1071, 4960, 4960,    0, 4960, 4960,  467,  939,
      935, 1085,  928, 4960, 4960,    0, 4960, 1061, 1070, 1129,
        0, 1149,  883, 1055,  950, 1091,  651, 1096, 1110, 1115,
      885, 1143, 4960, 4960,  767, 4960,  888, 4960,  970,    0,
     1150, 1153, 1155, 1182, 1157, 1159, 1194, 1197, 1209, 1201,
     1213, 1221, 1228, 1237, 1245, 1252, 1257, 4960,  978, 1261,
     1254, 1259, 1264, 1269, 1274, 1279, 1284, 1289, 1351, 1300,

     1309, 1323, 1041, 1328,  694, 1333, 1337, 1342,  883,  891,
     1384, 1347, 1045, 1366,  727, 1371, 1376, 1381,  847,  902,
     1386, 1232, 1391,  849, 1396, 1400, 1405,  842, 1440, 1442,
     1444, 1447, 1449, 1467, 1472, 1475, 1479, 1491, 1498, 1503,
     1506, 1521, 1523, 1526, 1546, 1530, 1549, 1553, 1546, 1551,
     1556, 1561, 1566, 1571, 1576, 1581,    0, 4960, 4960, 4960,
     4960, 4960,    0, 4960, 4960, 4960, 4960, 4960,    0, 4960,
     4960, 4960,    0, 4960,  851, 4960, 4960, 4960, 1643, 4960,
     4960,  481,  738,  828,  835, 1267, 1619, 1622,  817,  798,
      794,  793,    0,  791, 4960,    0,    0, 1627, 1620, 1248,

     1625,  937, 1630, 1614, 1635,  730, 1635, 1649, 1533, 1654,
      986, 1659, 1663, 1668,  684, 1703, 1705, 1707, 1710, 1712,
     1730, 1735, 1738, 1742, 1754, 1761, 1766, 1769, 1784, 1786,
     1789, 1809, 1793, 1812, 1816, 1809, 1814, 1819, 1824, 1829,
     1834, 1839, 4960,  716, 1844, 1849, 1854, 1859, 1864, 1869,
     1874, 1879, 1884, 1889, 1894, 1899, 1904, 1909, 4960, 4960,
     4960, 1145, 1183, 4960, 4960, 1496, 1914, 1540, 1919,  992,
     1924, 1928, 1933,  658, 1933, 1947, 1796, 1952, 1176, 1957,
     1961, 1966,  641, 4960,  519,  667, 2023,  621, 2089, 1974,
     1979, 1985, 1990, 1995, 2000, 2005, 4960, 2070, 2072, 2074,

     2087, 2089, 2112, 2135, 2137, 2139, 2141, 2143, 2167, 2169,
     2171, 2174, 2176, 2183, 2234, 2010, 2015, 2020, 2305, 2071,
     1803, 2084, 1203, 2170, 2248, 2253,  574, 2315, 2259, 2023,
     2264, 1239, 2269, 2273, 2278,  525, 2283, 2288, 2293, 2298,
     2303, 2329, 2334, 4960, 2396, 2340, 2354, 2363, 2368, 2373,
     2378, 2383, 2388, 2393, 2398, 2403, 2408, 2413, 2418, 2453,
     2455, 2457, 2462, 2471, 2480, 2485, 2487, 2500, 2494, 2512,
     2514, 2517, 2519, 2531, 2543, 2545, 2596, 2610, 2615, 2620,
      523,  510,  479,  370,  367, 2625, 2630, 2635, 2640, 2645,
     2650, 2655, 2660, 2665, 2670, 2675, 2680, 2685, 2690, 2725,

     2727, 2729, 2734, 2743, 2752, 2757, 2759, 2772, 2766, 2784,
     2786, 2789, 2791, 2803, 2815, 2817, 2810, 2815, 2820, 2825,
     2830, 2835, 2840, 2845, 2850, 2549, 2821, 2855, 2860, 2865,
     2870, 2875, 2880, 2885, 2890, 2895, 2900, 2905, 2910, 2915,
     2920, 1524, 2920, 2934, 2074, 2939, 1245, 2944, 2344, 2949,
      240, 2954, 2959, 2964, 2999, 3002, 3004, 3007, 3011, 3027,
     3031, 3034, 3039, 3046, 3051, 3064, 3066, 3069, 3082,    0,
        0, 3064, 2087, 3069, 1297, 3075, 3079, 3084,  225, 3119,
     3091, 3101, 3106, 3112, 3117, 3122, 3127, 3132, 3137, 3142,
     3147, 3152, 3157, 3162, 3167, 3172, 3177, 3239, 3183, 3197,

     3206, 3211, 3216, 3221, 3256, 3259, 3261, 3264, 3268, 3284,
     3288, 3291, 3296, 3303, 3308, 3321, 3323, 3326, 3339, 3373,
        0, 3321, 2348, 3341, 1301, 3346, 3095, 3351,  146, 3386,
     3358, 3373, 3379, 3384, 3389, 3394, 3429, 3432, 3434, 3437,
     3441, 3457, 3461, 3464, 3469, 3476, 3481, 3494, 3496, 3499,
     3512, 3508, 3514, 3502, 3516, 3521, 3526, 3531, 3536, 3541,
     3541, 3555, 2518, 3560, 1352, 3565, 3187, 3570,  100, 3575,
     3580, 3585, 3590, 3595, 3600, 3605, 1547, 3640, 3642, 3644,
     3647, 3656, 3659, 3671, 3673, 3679, 3687, 3691, 3699, 3703,
     3685, 3696, 3701, 3706, 3711, 3716, 3721, 3726, 3731, 3736,

     3741, 3746, 3751,    0, 3786, 3815, 3789, 3791, 3793, 3805,
     3809, 3817, 3848, 3821, 3863, 3860, 3825, 3866, 3875,    0,
     3063, 3859, 3868, 3873, 3878, 3883, 3888, 3893, 3928,    0,
     3930, 3932, 3934, 3937, 3946, 3960, 3962, 3964, 3969, 3989,
     3992, 3995, 3998, 1648,    0, 3991, 3996, 4001, 4006, 4011,
     4016, 4021, 4026, 4031, 4036, 4071, 4073, 4075, 4077, 4079,
     4091, 4103, 4106, 4108, 4110, 4103, 4108, 4113,    0,    0,
     4148, 4150, 4152, 4154, 4156, 4168, 4180, 4183, 4185, 4187,
     3320, 4180, 4185, 4190, 4225, 4227, 4229, 4231, 4233, 4245,
     4257, 4260, 4262, 4264, 4257, 4262, 4267, 1759, 4302, 4304,

     4306, 4309, 4311,    0, 4318, 4334, 4336, 4341, 4349,    0,
     4353, 4366, 4361, 4368, 4373,    0, 4380, 4392, 4396, 4398,
     4405, 4411, 4423, 4425, 4429, 4442, 4437, 4449, 4454, 4456,
     4462, 4469, 4474, 4481, 4486, 4488, 4494, 4500, 4512, 4514,
     4517, 4519, 4532, 4544, 4546, 4548, 4960, 4599, 4612, 4625,
     4638, 4651, 4664, 4673, 4682, 4694, 4701, 4710, 4723, 4736,
     4749, 4762, 4775, 4784, 4793, 4806, 4818, 4826, 4835, 4848,
     4859, 4868, 4881, 4890, 4899, 4912, 4925, 4934, 4946
    } ;

static const flex_int16_t yy_def[980] =
    {   0,
      947,  947,  948,  948,  949,  949,  950,  950,  951,  951,
      952,  952,  947,   13,  953,  953,  947,   17,  947,  947,
      947,  947,  947,  954,  947,  955,  955,  954,  947,  947,
      947,  947,  947,  947,  947,  947,  947,  947,  947,  947,
      947,  947,  947,  947,  947,  947,  947,  947,  947,   28,
       28,   28,   28,   28,   28,   28,   28,   28,   28,   28,
       28,  947,  947,  947,  947,  947,  947,  947,  947,  947,
      947,  947,  947,  947,  956,  957,  958,  958,  957,   79,
       79,   79,   79,   79,   79,   79,   79,   79,   79,   79,
       79,  947,  947,  947,  947,  947,  947,  947,  947,  947,

      959,  947,  947,  947,  947,  947,  960,  947,  947,  947,
      947,  947,  961,  947,  947,  947,  947,  962,  947,  947,
      947,  947,  947,  947,  947,  947,  947,  947,  947,   28,
      947,   27,   27,   28,  947,  947,  947,  947,  947,  947,
      947,  947,  947,  947,   39,  947,  947,  947,  947,  947,
      947,  947,  947,  947,  947,  947,  947,  947,  947,  947,
      947,  947,  947,  947,  947,  947,  947,  963,  947,  947,
      947,  947,  947,  963,  947,  963,  947,  963,  963,  963,
      963,  947,  964,  965,  964,  947,  185,  185,  185,  185,
      185,  185,  185,  185,  185,  185,  185,  185,  947,  947,

      947,  947,  947,  947,  947,  947,  947,  947,  947,  947,
      947,  947,  947,   28,  947,  947,  947,  947,  947,  947,
      947,  947,   27,  947,  947,  947,  947,  947,  947,  947,
      947,   28,   28,  947,  947,  966,  947,  947,  947,  947,
      947,  947,  947,  947,  947,  967,  947,  968,  969,   39,
       39,  968,  252,  947,  947,  947,  947,  947,  947,  947,
      947,  947,  947,  947,  947,  947,  947,  947,  947,  970,
       28,   28,   28,   28,   28,   28,   28,   28,   28,   28,
       28,   28,   28,   28,   28,   28,   28,  947,  947,   28,
      947,  947,  947,  947,  947,  947,  947,  947,  956,  971,

      972,  947,  947,  947,  947,  947,  947,  947,  947,  973,
       79,  947,  947,  947,  947,  947,  947,  947,  947,   78,
      947,  947,  947,  947,  947,  947,  947,  947,   79,   79,
       79,   79,   79,   79,   79,   79,   79,   79,   79,   79,
       79,   79,   79,   79,   79,   79,   79,   79,  947,  947,
      947,  947,  947,  947,  947,  947,  959,  947,  947,  947,
      947,  947,  960,  947,  947,  947,  947,  947,  961,  947,
      947,  947,  962,  947,  947,  947,  947,  947,  947,  947,
      947,  947,  947,  947,  947,  947,   28,   28,  947,  947,
      947,  947,  963,  947,  947,  963,  963,  185,  947,  947,

      947,  947,  947,  947,  947,  947,  965,  947,  947,  947,
      947,  947,  947,  947,  947,  185,  185,  185,  185,  185,
      185,  185,  185,  185,  185,  185,  185,  185,  185,  185,
      185,  185,  185,  185,  185,  947,  947,  947,  947,  947,
      947,  947,  947,  947,  947,  947,  947,  947,  947,  947,
      947,  947,  947,  947,  947,  947,  947,  947,  947,  947,
      947,  947,  947,  947,  947,  252,  947,  947,  947,  947,
      947,  947,  947,  947,  969,  947,  947,  947,  947,  947,
      947,  947,  947,  947,   39,  947,  974,  947,  974,  947,
      947,  947,  947,  947,  947,  947,  947,   28,   28,   28,

       28,   28,   28,   28,   28,   28,   28,   28,   28,   28,
       28,   28,   28,   28,  947,  947,  947,  947,  971,  947,
      947,  947,  947,  947,  947,  947,  947,  972,  947,  947,
      947,  947,  947,  947,  947,  947,  947,  947,  947,  947,
      947,  947,  947,  947,  973,  947,  947,  947,  947,  947,
      947,  947,  947,  947,  947,  947,  947,  947,  947,   79,
       79,   79,   79,   79,   79,   79,   79,   79,   79,   79,
       79,   79,   79,   79,   79,   79,  947,  947,  947,  947,
      947,  947,  947,  947,  947,  947,  947,  947,  947,  947,
      947,  947,  947,  947,  947,  947,  947,  947,  947,  185,

      185,  185,  185,  185,  185,  185,  185,  185,  185,  185,
      185,  185,  185,  185,  185,  185,  947,  947,  947,  947,
      947,  947,  947,  947,  947,   39,   39,  947,  947,  947,
      947,  947,  947,  947,  947,  947,  947,  947,  947,  947,
      947,  252,  975,  947,  947,  947,  947,  947,  947,  947,
      947,  947,  947,  947,   28,   28,   28,   28,   28,   28,
       28,   28,   28,   28,   28,   28,   28,   28,   28,  976,
      515,  976,  976,  976,  976,  976,  976,  976,  976,   28,
      947,  947,  947,  947,  947,  947,  947,  947,  947,  947,
      947,  947,  947,  947,  947,  947,  947,  973,  947,  947,

      947,  947,  947,  947,   79,   79,   79,   79,   79,   79,
       79,   79,   79,   79,   79,   79,   79,   79,   79,  977,
      577,  976,  976,  976,  976,  976,  976,  976,  976,   79,
      947,  947,  947,  947,  947,  947,  185,  185,  185,  185,
      185,  185,  185,  185,  185,  185,  185,  185,  185,  185,
      185,  185,   28,  978,  947,  947,  947,  947,  947,  947,
      975,  947,  947,  947,  947,  947,  947,  947,  947,  947,
      947,  947,  947,  947,  947,  947,  252,   28,   28,   28,
       28,   28,   28,   28,   28,   28,   28,   28,   28,   28,
      976,  976,  976,  976,  976,  976,  976,  947,  947,  947,

      947,  947,  947,  519,   79,  979,   79,   79,   79,   79,
       79,   79,   79,   79,   79,   79,   79,   79,   79,  976,
      977,  976,  976,  976,  976,  976,  976,  976,  185,  407,
      185,  185,  185,  185,  185,  185,  185,  185,  185,  185,
      185,  185,  185,  252,  475,  947,  947,  947,  947,  947,
      947,  947,  947,  947,  947,   28,   28,   28,   28,   28,
       28,   28,   28,   28,   28,  976,  976,  976,  519,  528,
       79,   79,   79,   79,   79,   79,   79,   79,   79,   79,
      977,  976,  976,  976,  185,  185,  185,  185,  185,  185,
      185,  185,  185,  185,  947,  947,  947,  252,   28,   28,

       28,   28,   28,  515,   79,   79,   79,   79,   79,  577,
      185,  185,  185,  185,  185,  761,   28,   28,   28,   28,
       28,   79,   79,   79,   79,   79,  185,  185,  185,  185,
      185,   28,   28,   28,   79,   79,   79,  185,  185,  185,
       28,   79,  185,   28,   79,  185,    0,  947,  947,  947,
      947,  947,  947,  947,  947,  947,  947,  947,  947,  947,
      947,  947,  947,  947,  947,  947,  947,  947,  947,  947,
      947,  947,  947,  947,  947,  947,  947,  947,  947
    } ;

static const flex_int16_t yy_nxt[5033] =
    {   0,
       20,   21,   22,   23,   24,   25,   26,   27,   28,   29,
       30,   31,   32,   33,   34,   35,   36,   37,   38,   39,
       40,   41,   42,   43,   44,   45,   24,   24,   24,   24,
       46,   47,   48,   49,   50,   51,   52,   53,   54,   55,
       24,   24,   56,   24,   24,   24,   24,   57,   58,   59,
       60,   24,   61,   24,   62,   63,   64,   65,   20,   20,
       20,   20,   20,   66,   67,   68,   69,   70,   71,   72,
       73,   74,   20,   75,   22,   23,   76,   25,   77,   78,
       79,   29,   30,   31,   32,   33,   34,   35,   36,   37,
       38,   39,   40,   41,   42,   43,   44,   45,   76,   76,

       76,   76,   46,   47,   48,   49,   80,   81,   82,   83,
       84,   85,   76,   76,   86,   76,   76,   76,   76,   87,
       88,   89,   90,   76,   91,   76,   62,   63,   64,   65,
       20,   20,   20,   20,   20,   92,   93,   94,   95,   96,
       97,   98,   99,  100,  102,  103,  235,  104,  102,  103,
      236,  104,  105,  265,  108,  109,  105,  110,  852,  106,
      114,  115,  111,  106,  108,  109,  235,  110,  211,  112,
      236,  116,  111,  114,  115,  266,  117,  119,  120,  112,
      119,  120,  212,  262,  116,  122,  123,  124,  212,  117,
      122,  123,  124,  245,  207,  208,  209,  246,  247,  291,

      291,  291,  125,  210,  828,  263,  264,  125,  126,  127,
      128,  129,  130,  131,  132,  133,  134,  135,  136,  137,
      138,  139,  140,  141,  142,  143,  144,  145,  146,  147,
      148,  149,  150,  151,  130,  130,  130,  130,  152,  153,
      154,  155,  130,  130,  130,  130,  130,  130,  130,  130,
      130,  130,  130,  130,  130,  130,  130,  130,  130,  130,
      130,  130,  156,  157,  158,  159,  126,  126,  126,  126,
      126,  160,  161,  162,  163,  164,  164,  165,  166,  167,
      169,  170,  171,  797,  172,  211,  213,  293,  293,  173,
      174,  349,  349,  349,  175,  351,  351,  176,  776,  212,

      177,  178,  179,  180,  181,  212,  215,  216,  217,  218,
      219,  219,  220,  221,  222,  224,  225,  226,  227,  228,
      228,  229,  230,  231,  224,  225,  226,  227,  228,  228,
      229,  230,  231,  267,  269,  359,  181,  169,  170,  171,
      360,  172,  289,  361,  365,  367,  173,  174,  362,  366,
      368,  175,  214,  214,  176,  268,  264,  177,  178,  179,
      180,  181,  238,  214,  264,  239,  214,  214,  377,  240,
      241,  242,  271,  378,  214,  293,  293,  214,  290,  290,
      290,  290,  290,  243,  585,  244,  272,  584,  214,  296,
      296,  296,  296,  181,  182,  182,  182,  182,  183,  182,

      184,  184,  185,  182,  182,  182,  182,  182,  182,  182,
      182,  182,  186,  182,  182,  182,  182,  182,  182,  182,
      183,  183,  183,  183,  182,  182,  182,  182,  187,  188,
      189,  190,  191,  192,  183,  183,  193,  183,  183,  183,
      183,  194,  195,  196,  197,  183,  198,  183,  182,  182,
      182,  182,  182,  182,  182,  182,  182,  199,  200,  201,
      202,  203,  203,  204,  205,  206,  232,  233,  214,  214,
      214,  214,  214,  214,  273,  214,  214,  232,  390,  214,
      244,  214,  581,  280,  460,  237,  214,  274,  233,  275,
      214,  276,  214,  277,  214,  245,  583,  214,  389,  246,

      247,  215,  216,  217,  218,  219,  219,  220,  221,  222,
      248,  582,  249,  249,  248,  214,  214,  214,  214,  354,
      354,  354,  354,  250,  581,  251,  214,  282,  214,  291,
      291,  291,  252,  253,  248,  248,  947,  281,  485,  214,
      248,  248,  248,  252,  253,  248,  248,  248,  248,  248,
      248,  248,  248,  248,  248,  248,  248,  248,  248,  248,
      292,  292,  292,  292,  292,  438,  438,  214,  214,  254,
      255,  256,  257,  258,  258,  259,  260,  261,  214,  310,
      265,  214,  214,  694,  214,  214,  278,  214,  214,  214,
      279,  283,  214,  447,  447,  214,  396,  285,  214,  394,

      287,  397,  266,  214,  286,  284,  214,  267,  210,  214,
      294,  294,  294,  294,  294,  294,  294,  294,  295,  294,
      297,  297,  297,  297,  297,  299,  208,  209,  245,  268,
      301,  301,  687,  247,  210,  348,  348,  348,  348,  348,
      627,  312,  313,  314,  315,  316,  316,  317,  318,  319,
      321,  322,  323,  324,  325,  325,  326,  327,  328,  321,
      322,  323,  324,  325,  325,  326,  327,  328,  350,  350,
      350,  350,  350,  352,  352,  352,  352,  352,  352,  352,
      352,  353,  352,  454,  454,  269,  626,  302,  303,  304,
      305,  306,  306,  307,  308,  309,  310,  311,  311,  641,

      311,  311,  355,  355,  355,  355,  355,  264,  311,  492,
      492,  311,  436,  436,  436,  289,  634,  331,  443,  311,
      332,  211,  311,  329,  330,  311,  311,  311,  311,  311,
      311,  333,  311,  311,  329,  212,  311,  264,  311,  582,
      340,  212,  599,  311,  334,  330,  335,  311,  336,  311,
      337,  311,  539,  539,  311,  390,  311,  311,  312,  313,
      314,  315,  316,  316,  317,  318,  319,  311,  265,  311,
      311,  311,  311,  311,  311,  338,  311,  311,  311,  339,
      311,  342,  311,  343,  311,  548,  548,  311,  592,  345,
      266,  341,  394,  311,  392,  311,  346,  344,  311,  311,

      311,  210,  211,  386,  379,  208,  209,  214,  214,  262,
      311,  391,  347,  380,  381,  585,  212,  382,  214,  383,
      384,  311,  212,  385,  387,  388,  445,  445,  445,  214,
      238,  263,  264,  239,  584,  387,  392,  391,  241,  242,
      290,  290,  290,  290,  290,  583,  388,  296,  296,  296,
      296,  243,  375,  244,  292,  292,  292,  292,  292,  294,
      294,  294,  294,  294,  297,  297,  297,  297,  297,  399,
      400,  401,  402,  403,  403,  404,  405,  406,  408,  409,
      410,  411,  412,  412,  413,  414,  415,  416,  417,  267,
      398,  398,  310,  398,  398,  398,  398,  488,  416,  488,

      559,  398,  489,  310,  398,  552,  398,  555,  555,  417,
      418,  268,  398,  419,  422,  398,  545,  398,  440,  440,
      440,  440,  399,  400,  401,  402,  403,  403,  404,  405,
      406,  398,  398,  398,  398,  398,  398,  420,  207,  208,
      209,  543,  398,  496,  398,  464,  398,  210,  545,  423,
      421,  424,  461,  398,  425,  398,  240,  398,  426,  398,
      398,  398,  398,  398,  398,  398,  398,  452,  452,  452,
      427,  269,  398,  429,  398,  430,  398,  398,  398,  289,
      211,  398,  458,  428,  451,  398,  208,  398,  398,  431,
      432,  398,  398,  264,  212,  588,  588,  433,  442,  398,

      212,  264,  398,  395,  434,  435,  435,  435,  435,  435,
      490,  490,  490,  398,  437,  437,  437,  437,  437,  439,
      439,  439,  439,  439,  441,  441,  441,  441,  441,  211,
      443,  444,  211,  443,  444,  298,  214,  214,  214,  214,
      214,  214,  214,  212,  595,  595,  212,  214,  288,  212,
      630,  630,  212,  446,  446,  446,  446,  446,  214,  448,
      448,  448,  448,  448,  449,  449,  449,  449,  450,  450,
      450,  450,  450,  223,  223,  223,  223,  223,  453,  453,
      453,  453,  453,  455,  455,  455,  455,  455,  456,  456,
      456,  456,  457,  457,  457,  457,  457,  214,  214,  214,

      214,  537,  537,  537,  242,  546,  546,  546,  214,  270,
      214,  462,  463,  248,  248,  248,  248,  248,  392,  214,
      389,  214,  462,  463,  467,  468,  469,  470,  471,  471,
      472,  473,  474,  476,  477,  478,  479,  480,  480,  481,
      482,  483,  484,  234,  262,  376,  947,  484,  485,  491,
      491,  491,  491,  491,  493,  493,  493,  493,  493,  486,
      484,  486,  484,  486,  626,  486,  263,  264,  487,  494,
      494,  494,  494,  495,  495,  495,  495,  495,  214,  214,
      375,  214,  214,  214,  214,  214,  214,  214,  214,  214,
      498,  499,  214,  374,  214,  372,  214,  488,  214,  488,

      214,  371,  627,  214,  500,  501,  370,  214,  503,  214,
      214,  214,  467,  468,  469,  470,  471,  471,  472,  473,
      474,  214,  214,  214,  364,  214,  214,  358,  502,  214,
      214,  504,  214,  214,  637,  637,  214,  214,  214,  356,
      214,  214,  214,  298,  214,  505,  288,  214,  214,  214,
      214,  214,  214,  270,  507,  506,  214,  214,  237,  214,
      214,  683,  683,  214,  234,  214,  214,  214,  211,  947,
      508,  509,  510,  214,  214,  947,  214,  947,  214,  511,
      214,  214,  212,  512,  214,  214,  214,  214,  212,  214,
      214,  214,  553,  553,  553,  214,  214,  690,  690,  514,

      214,  310,  214,  772,  772,  513,  947,  214,  586,  586,
      586,  214,  290,  290,  290,  290,  290,  290,  290,  290,
      290,  290,  290,  290,  290,  290,  290,  290,  290,  290,
      290,  290,  290,  290,  290,  290,  515,  516,  516,  516,
      516,  516,  517,  517,  517,  517,  517,  518,  518,  518,
      518,  518,  299,  208,  209,  793,  793,  301,  301,  824,
      824,  210,  947,  520,  521,  522,  523,  524,  524,  525,
      526,  527,  529,  530,  531,  532,  533,  533,  534,  535,
      536,  300,  300,  300,  300,  300,  538,  538,  538,  538,
      538,  540,  540,  540,  540,  540,  541,  541,  541,  541,

      542,  542,  542,  542,  542,  311,  311,  311,  311,  311,
      848,  848,  311,  311,  302,  303,  304,  305,  306,  306,
      307,  308,  309,  311,  547,  547,  547,  547,  547,  549,
      549,  549,  549,  549,  311,  550,  550,  550,  550,  551,
      551,  551,  551,  551,  320,  320,  320,  320,  320,  554,
      554,  554,  554,  554,  556,  556,  556,  556,  556,  557,
      557,  557,  557,  558,  558,  558,  558,  558,  311,  311,
      311,  311,  311,  311,  947,  311,  311,  311,  311,  311,
      947,  311,  947,  311,  560,  561,  311,  947,  311,  947,
      311,  947,  311,  947,  311,  311,  311,  311,  562,  563,

      311,  311,  947,  311,  311,  947,  311,  311,  311,  947,
      947,  311,  947,  564,  311,  466,  566,  311,  311,  311,
      311,  947,  311,  947,  565,  311,  311,  311,  947,  311,
      311,  311,  311,  947,  311,  311,  947,  311,  947,  567,
      947,  311,  311,  466,  568,  311,  947,  569,  311,  311,
      311,  311,  311,  311,  311,  311,  311,  947,  311,  311,
      311,  947,  311,  947,  947,  311,  466,  572,  573,  311,
      570,  571,  947,  311,  311,  311,  311,  311,  311,  947,
      311,  311,  311,  575,  574,  311,  947,  947,  311,  947,
      947,  576,  311,  593,  593,  593,  311,  947,  947,  311,

      628,  628,  628,  311,  348,  348,  348,  348,  348,  348,
      348,  348,  348,  348,  348,  348,  348,  348,  348,  348,
      348,  348,  348,  348,  348,  348,  348,  348,  577,  578,
      578,  578,  578,  578,  579,  579,  579,  579,  579,  580,
      580,  580,  580,  580,  379,  208,  209,  214,  214,  947,
      214,  214,  947,  380,  381,  398,  398,  382,  214,  383,
      384,  214,  947,  385,  947,  947,  398,  466,  947,  214,
      947,  947,  214,  590,  590,  590,  590,  398,  398,  398,
      398,  398,  398,  587,  587,  587,  587,  587,  589,  589,
      589,  589,  589,  591,  591,  591,  591,  591,  408,  409,

      410,  411,  412,  412,  413,  414,  415,  407,  407,  407,
      407,  407,  594,  594,  594,  594,  594,  596,  596,  596,
      596,  596,  597,  597,  597,  597,  598,  598,  598,  598,
      598,  398,  398,  398,  398,  398,  398,  947,  398,  398,
      398,  398,  398,  947,  398,  947,  398,  600,  601,  398,
      947,  398,  947,  398,  947,  398,  947,  398,  398,  398,
      398,  602,  603,  398,  398,  947,  398,  398,  947,  398,
      398,  398,  947,  947,  398,  947,  604,  398,  466,  606,
      398,  398,  398,  398,  947,  398,  947,  605,  398,  398,
      398,  947,  398,  398,  398,  398,  947,  398,  398,  947,

      398,  947,  607,  947,  398,  398,  947,  608,  398,  947,
      609,  398,  398,  398,  398,  398,  398,  398,  398,  398,
      947,  398,  398,  398,  947,  398,  947,  947,  398,  947,
      612,  613,  398,  610,  611,  947,  398,  398,  398,  398,
      398,  398,  947,  398,  398,  398,  615,  614,  398,  947,
      947,  398,  947,  947,  616,  398,  635,  635,  635,  398,
      947,  947,  398,  681,  681,  681,  398,  435,  435,  435,
      435,  435,  435,  435,  435,  435,  435,  435,  435,  435,
      435,  435,  435,  435,  435,  435,  435,  617,  617,  617,
      617,  617,  618,  618,  618,  618,  618,  619,  619,  619,

      619,  619,  214,  214,  214,  214,  214,  214,  214,  214,
      214,  214,  214,  214,  214,  214,  214,  214,  214,  214,
      214,  214,  620,  620,  620,  620,  620,  621,  621,  621,
      621,  621,  622,  622,  622,  622,  622,  223,  223,  223,
      223,  223,  223,  223,  223,  223,  223,  223,  223,  223,
      223,  223,  223,  223,  223,  223,  223,  623,  623,  623,
      623,  623,  624,  624,  624,  624,  624,  625,  625,  625,
      625,  625,  466,  466,  466,  466,  466,  629,  629,  629,
      629,  629,  631,  631,  631,  631,  631,  632,  632,  632,
      632,  633,  633,  633,  633,  633,  476,  477,  478,  479,

      480,  480,  481,  482,  483,  475,  475,  475,  475,  475,
      636,  636,  636,  636,  636,  638,  638,  638,  638,  638,
      639,  639,  639,  639,  640,  640,  640,  640,  640,  643,
      643,  248,  248,  248,  248,  248,  248,  248,  248,  248,
      248,  248,  487,  248,  248,  248,  248,  248,  248,  248,
      248,  248,  248,  652,  652,  652,  652,  652,  653,  653,
      653,  653,  653,  654,  654,  654,  654,  654,  680,  680,
      680,  680,  680,  680,  680,  680,  680,  680,  680,  680,
      680,  680,  680,  688,  688,  688,  644,  645,  646,  647,
      648,  648,  649,  650,  651,  643,  643,  248,  214,  214,

      214,  214,  214,  214,  947,  947,  656,  947,  489,  214,
      947,  214,  657,  214,  947,  214,  214,  214,  214,  947,
      214,  655,  214,  658,  214,  947,  214,  947,  214,  519,
      519,  519,  519,  519,  770,  770,  770,  214,  947,  659,
      214,  214,  682,  682,  682,  682,  682,  791,  791,  791,
      660,  214,  644,  645,  646,  647,  648,  648,  649,  650,
      651,  947,  214,  214,  214,  214,  214,  214,  214,  214,
      214,  214,  214,  947,  661,  662,  214,  947,  214,  663,
      214,  947,  214,  947,  947,  214,  947,  214,  947,  214,
      947,  214,  947,  214,  664,  214,  214,  214,  214,  214,

      214,  947,  214,  214,  214,  214,  214,  666,  214,  947,
      214,  214,  214,  214,  947,  214,  947,  214,  665,  214,
      668,  667,  214,  947,  214,  947,  214,  669,  684,  684,
      684,  684,  684,  214,  670,  670,  947,  670,  671,  670,
      671,  671,  670,  670,  670,  670,  670,  670,  670,  670,
      670,  670,  670,  671,  670,  670,  670,  670,  670,  670,
      671,  671,  671,  671,  670,  670,  670,  670,  671,  671,
      671,  671,  671,  671,  671,  671,  671,  671,  671,  671,
      671,  671,  671,  671,  671,  671,  671,  671,  670,  670,
      670,  670,  670,  670,  670,  670,  670,  672,  673,  674,

      675,  676,  676,  677,  678,  679,  310,  685,  685,  685,
      685,  686,  686,  686,  686,  686,  310,  528,  528,  528,
      528,  528,  689,  689,  689,  689,  689,  691,  691,  691,
      691,  691,  692,  692,  692,  692,  693,  693,  693,  693,
      693,  300,  300,  300,  300,  300,  300,  300,  300,  300,
      300,  300,  300,  300,  300,  300,  300,  300,  300,  300,
      300,  695,  695,  695,  695,  695,  947,  947,  520,  521,
      522,  523,  524,  524,  525,  526,  527,  947,  529,  530,
      531,  532,  533,  533,  534,  535,  536,  696,  696,  696,
      696,  696,  697,  697,  697,  697,  697,  698,  311,  311,

      311,  311,  311,  774,  774,  774,  774,  544,  822,  822,
      822,  544,  311,  311,  311,  311,  311,  544,  544,  947,
      544,  311,  311,  311,  311,  311,  311,  311,  311,  311,
      311,  699,  699,  699,  699,  699,  700,  700,  700,  700,
      700,  701,  701,  701,  701,  701,  320,  320,  320,  320,
      320,  320,  320,  320,  320,  320,  320,  320,  320,  320,
      320,  320,  320,  320,  320,  320,  702,  702,  702,  702,
      702,  703,  703,  703,  703,  703,  704,  704,  704,  704,
      704,  311,  311,  311,  311,  311,  311,  947,  947,  706,
      311,  311,  311,  947,  311,  707,  311,  947,  708,  311,

      311,  311,  947,  311,  705,  311,  947,  311,  311,  311,
      311,  947,  311,  311,  311,  311,  311,  947,  710,  311,
      947,  709,  311,  311,  711,  947,  311,  947,  311,  311,
      311,  947,  713,  311,  947,  311,  712,  311,  947,  311,
      311,  311,  311,  311,  311,  311,  311,  311,  311,  947,
      311,  311,  947,  311,  947,  716,  311,  947,  311,  311,
      311,  947,  311,  714,  311,  715,  947,  311,  626,  717,
      311,  311,  311,  311,  311,  248,  248,  718,  846,  846,
      846,  311,  311,  947,  311,  947,  248,  248,  947,  719,
      947,  947,  947,  311,  947,  311,  670,  720,  947,  670,

      721,  670,  721,  721,  670,  670,  670,  670,  670,  670,
      670,  670,  670,  670,  670,  721,  670,  670,  670,  670,
      670,  670,  721,  721,  721,  721,  670,  670,  670,  670,
      721,  721,  721,  721,  721,  721,  721,  721,  721,  721,
      721,  721,  721,  721,  721,  721,  721,  721,  721,  721,
      670,  670,  670,  670,  670,  670,  670,  670,  670,  722,
      723,  724,  725,  726,  726,  727,  728,  729,  730,  730,
      730,  730,  730,  730,  730,  730,  730,  730,  730,  730,
      730,  730,  730,  398,  398,  398,  398,  398,  398,  398,
      398,  398,  398,  398,  398,  398,  398,  398,  398,  398,

      398,  398,  398,  731,  731,  731,  731,  731,  732,  732,
      732,  732,  732,  733,  733,  733,  733,  733,  407,  407,
      407,  407,  407,  407,  407,  407,  407,  407,  407,  407,
      407,  407,  407,  407,  407,  407,  407,  407,  734,  734,
      734,  734,  734,  735,  735,  735,  735,  735,  736,  736,
      736,  736,  736,  398,  398,  398,  398,  398,  398,  947,
      947,  738,  398,  398,  398,  947,  398,  739,  398,  947,
      740,  398,  398,  398,  947,  398,  737,  398,  947,  398,
      398,  398,  398,  947,  398,  398,  398,  398,  398,  947,
      742,  398,  947,  741,  398,  398,  743,  947,  398,  947,

      398,  398,  398,  947,  745,  398,  947,  398,  744,  398,
      947,  398,  398,  398,  398,  398,  398,  398,  398,  398,
      398,  947,  398,  398,  947,  398,  947,  748,  398,  947,
      398,  398,  398,  947,  398,  746,  398,  747,  947,  398,
      627,  749,  398,  398,  398,  398,  398,  248,  248,  750,
      947,  947,  947,  398,  398,  947,  398,  947,  248,  248,
      947,  751,  947,  947,  947,  398,  947,  398,  752,  752,
      752,  752,  752,  752,  752,  752,  752,  752,  752,  752,
      752,  752,  752,  753,  753,  753,  753,  753,  753,  753,
      753,  753,  753,  753,  753,  753,  753,  753,  754,  754,

      754,  754,  754,  754,  754,  754,  754,  754,  754,  754,
      754,  754,  754,  466,  466,  466,  466,  466,  466,  466,
      466,  466,  466,  466,  466,  466,  466,  466,  466,  466,
      466,  466,  466,  755,  755,  755,  755,  755,  756,  756,
      756,  756,  756,  757,  757,  757,  757,  757,  475,  475,
      475,  475,  475,  475,  475,  475,  475,  475,  475,  475,
      475,  475,  475,  475,  475,  475,  475,  475,  758,  758,
      758,  758,  758,  759,  759,  759,  759,  759,  760,  760,
      760,  760,  760,  762,  763,  764,  765,  766,  766,  767,
      768,  769,  642,  642,  642,  642,  642,  771,  771,  771,

      771,  771,  773,  773,  773,  773,  773,  775,  775,  775,
      775,  775,  777,  777,  777,  777,  777,  777,  777,  777,
      777,  777,  777,  777,  777,  777,  777,  214,  214,  947,
      214,  214,  214,  214,  947,  214,  214,  947,  214,  214,
      214,  214,  947,  214,  778,  779,  214,  947,  780,  214,
      214,  947,  214,  781,  214,  214,  214,  214,  947,  214,
      214,  214,  214,  214,  881,  544,  214,  214,  214,  782,
      214,  947,  947,  214,  214,  214,  947,  214,  214,  214,
      214,  214,  783,  947,  784,  214,  670,  785,  947,  214,
      214,  786,  214,  214,  214,  214,  214,  214,  214,  787,

      788,  214,  789,  214,  947,  214,  947,  947,  214,  947,
      214,  214,  947,  947,  214,  947,  214,  947,  947,  214,
      790,  214,  671,  671,  671,  671,  671,  792,  792,  792,
      792,  792,  214,  794,  794,  794,  794,  794,  795,  795,
      795,  795,  796,  796,  796,  796,  796,  214,  214,  519,
      519,  519,  519,  519,  826,  826,  826,  826,  214,  519,
      519,  519,  519,  519,  519,  519,  519,  519,  519,  214,
      519,  519,  519,  519,  519,  798,  798,  798,  798,  798,
      799,  799,  799,  799,  799,  800,  800,  800,  800,  800,
      528,  528,  528,  528,  528,  528,  528,  528,  528,  528,

      528,  528,  528,  528,  528,  528,  528,  528,  528,  528,
      801,  801,  801,  801,  801,  802,  802,  802,  802,  802,
      803,  803,  803,  803,  803,  804,  804,  804,  804,  804,
      804,  804,  804,  804,  804,  804,  804,  804,  804,  804,
      698,  805,  805,  805,  805,  805,  850,  850,  850,  850,
      544,  947,  947,  947,  544,  805,  805,  805,  805,  805,
      544,  544,  947,  544,  805,  805,  805,  805,  805,  806,
      806,  806,  806,  806,  806,  806,  806,  806,  806,  806,
      806,  806,  806,  806,  311,  311,  947,  311,  311,  311,
      311,  947,  311,  311,  947,  311,  311,  311,  311,  947,

      311,  807,  808,  311,  947,  809,  311,  311,  947,  311,
      810,  311,  311,  311,  311,  947,  311,  311,  311,  311,
      311,  881,  544,  311,  311,  311,  811,  311,  947,  947,
      311,  311,  311,  947,  311,  311,  311,  311,  311,  812,
      947,  813,  311,  670,  814,  947,  311,  311,  815,  311,
      311,  311,  311,  311,  311,  311,  816,  817,  311,  818,
      311,  947,  311,  947,  947,  311,  947,  311,  311,  947,
      947,  311,  947,  311,  720,  544,  311,  819,  311,  721,
      721,  721,  721,  721,  670,  947,  947,  947,  670,  311,
      947,  947,  947,  947,  670,  670,  670,  670,  821,  823,

      823,  823,  823,  823,  825,  825,  825,  825,  825,  827,
      827,  827,  827,  827,  311,  311,  829,  829,  829,  829,
      829,  947,  947,  947,  947,  311,  947,  947,  947,  947,
      821,  829,  829,  829,  829,  829,  311,  829,  829,  829,
      829,  829,  830,  830,  830,  830,  830,  830,  830,  830,
      830,  830,  830,  830,  830,  830,  830,  398,  398,  947,
      398,  398,  398,  398,  947,  398,  398,  947,  398,  398,
      398,  398,  947,  398,  831,  832,  398,  947,  833,  398,
      398,  947,  398,  834,  398,  398,  398,  398,  947,  398,
      398,  398,  398,  398,  947,  947,  398,  398,  398,  835,

      398,  947,  947,  398,  398,  398,  947,  398,  398,  398,
      398,  398,  836,  947,  837,  398,  947,  838,  947,  398,
      398,  839,  398,  398,  398,  398,  398,  398,  398,  840,
      841,  398,  842,  398,  947,  398,  398,  398,  398,  947,
      398,  398,  214,  214,  398,  947,  398,  398,  947,  398,
      843,  398,  947,  214,  947,  947,  947,  947,  398,  947,
      947,  947,  398,  947,  214,  224,  225,  226,  227,  228,
      228,  229,  230,  231,  844,  844,  844,  844,  844,  844,
      844,  844,  844,  844,  844,  844,  844,  844,  844,  845,
      845,  845,  845,  845,  845,  845,  845,  845,  845,  845,

      845,  845,  845,  845,  762,  763,  764,  765,  766,  766,
      767,  768,  769,  761,  761,  761,  761,  761,  847,  847,
      847,  847,  847,  849,  849,  849,  849,  849,  851,  851,
      851,  851,  851,  642,  642,  642,  642,  642,  642,  642,
      642,  642,  642,  642,  642,  642,  642,  642,  642,  642,
      642,  642,  642,  853,  853,  853,  853,  853,  854,  854,
      854,  854,  854,  855,  855,  855,  855,  855,  214,  214,
      214,  214,  214,  214,  947,  214,  214,  947,  856,  214,
      947,  214,  947,  214,  214,  214,  214,  214,  214,  947,
      214,  947,  214,  857,  214,  858,  947,  214,  214,  214,

      214,  214,  214,  947,  947,  859,  214,  214,  214,  214,
      214,  947,  214,  860,  947,  214,  214,  862,  214,  214,
      214,  214,  947,  214,  947,  861,  214,  214,  214,  214,
      214,  214,  214,  863,  947,  947,  947,  214,  214,  947,
      865,  864,  214,  671,  671,  671,  671,  671,  947,  214,
      947,  947,  947,  214,  671,  671,  671,  671,  671,  671,
      671,  671,  671,  671,  671,  671,  671,  671,  671,  866,
      866,  866,  866,  866,  867,  867,  867,  867,  867,  868,
      868,  868,  868,  868,  869,  869,  869,  869,  869,  869,
      869,  869,  869,  869,  869,  869,  869,  869,  869,  870,

      870,  870,  870,  870,  870,  870,  870,  870,  870,  870,
      870,  870,  870,  870,  311,  311,  310,  311,  311,  311,
      311,  311,  311,  947,  947,  311,  947,  871,  311,  947,
      311,  947,  311,  311,  311,  947,  311,  311,  311,  311,
      947,  311,  947,  311,  311,  311,  311,  947,  873,  311,
      311,  872,  947,  311,  311,  311,  311,  947,  947,  311,
      311,  947,  947,  874,  311,  947,  947,  311,  947,  947,
      947,  311,  947,  876,  947,  879,  311,  311,  321,  322,
      323,  324,  325,  325,  326,  327,  328,  311,  311,  311,
      875,  311,  311,  947,  311,  311,  947,  947,  311,  311,

      947,  877,  311,  311,  311,  311,  878,  880,  947,  947,
      311,  947,  947,  311,  311,  947,  311,  721,  721,  721,
      721,  721,  947,  947,  947,  311,  721,  721,  721,  721,
      721,  721,  721,  721,  721,  721,  721,  721,  721,  721,
      721,  882,  882,  882,  882,  882,  883,  883,  883,  883,
      883,  884,  884,  884,  884,  884,  398,  398,  398,  398,
      398,  398,  398,  398,  947,  398,  398,  398,  885,  398,
      947,  398,  947,  398,  398,  398,  398,  947,  398,  947,
      398,  947,  398,  886,  398,  887,  947,  398,  398,  398,
      398,  398,  398,  398,  947,  947,  398,  398,  398,  398,

      947,  398,  947,  398,  889,  947,  888,  891,  398,  947,
      398,  947,  398,  947,  398,  947,  890,  398,  398,  398,
      398,  398,  947,  398,  398,  947,  398,  398,  398,  947,
      947,  398,  947,  947,  398,  892,  894,  398,  947,  398,
      947,  947,  893,  947,  947,  398,  947,  947,  398,  761,
      761,  761,  761,  761,  761,  761,  761,  761,  761,  761,
      761,  761,  761,  761,  761,  761,  761,  761,  761,  895,
      895,  895,  895,  895,  896,  896,  896,  896,  896,  897,
      897,  897,  897,  897,  898,  898,  898,  898,  898,  898,
      898,  898,  898,  898,  898,  898,  898,  898,  898,  214,

      214,  214,  214,  214,  214,  214,  214,  214,  214,  947,
      214,  947,  214,  901,  214,  947,  214,  899,  214,  214,
      214,  214,  947,  214,  900,  214,  902,  214,  947,  214,
      214,  214,  214,  903,  214,  214,  214,  214,  214,  214,
      947,  214,  214,  947,  947,  214,  947,  214,  947,  214,
      947,  947,  947,  214,  947,  947,  214,  947,  214,  947,
      214,  904,  904,  904,  904,  904,  904,  904,  904,  904,
      904,  904,  904,  904,  904,  904,  311,  311,  311,  311,
      311,  311,  311,  311,  311,  311,  947,  311,  947,  311,
      907,  311,  947,  311,  905,  311,  311,  311,  311,  947,

      311,  906,  311,  908,  311,  947,  311,  311,  311,  311,
      909,  311,  311,  311,  311,  311,  311,  947,  311,  311,
      947,  947,  311,  947,  311,  947,  311,  947,  947,  947,
      311,  947,  947,  311,  947,  311,  947,  311,  910,  910,
      910,  910,  910,  910,  910,  910,  910,  910,  910,  910,
      910,  910,  910,  398,  398,  398,  398,  398,  398,  398,
      398,  398,  398,  947,  398,  947,  398,  913,  398,  947,
      398,  911,  398,  398,  398,  398,  947,  398,  912,  398,
      914,  398,  947,  398,  398,  398,  398,  915,  398,  398,
      398,  398,  398,  398,  947,  398,  398,  947,  947,  398,

      947,  398,  947,  398,  947,  947,  947,  398,  947,  947,
      398,  947,  398,  947,  398,  916,  916,  916,  916,  916,
      916,  916,  916,  916,  916,  916,  916,  916,  916,  916,
      214,  214,  214,  214,  214,  214,  947,  214,  214,  214,
      214,  214,  918,  214,  947,  214,  311,  311,  214,  947,
      214,  947,  917,  947,  214,  920,  919,  311,  947,  214,
      921,  214,  311,  311,  311,  311,  947,  947,  922,  311,
      311,  947,  923,  311,  947,  311,  947,  311,  311,  947,
      311,  398,  398,  947,  311,  947,  924,  925,  311,  398,
      398,  311,  398,  947,  398,  398,  398,  398,  926,  311,

      398,  398,  398,  927,  928,  398,  947,  398,  214,  214,
      947,  929,  398,  947,  930,  947,  398,  947,  398,  214,
      214,  214,  931,  398,  214,  214,  214,  214,  947,  932,
      214,  214,  947,  214,  214,  214,  947,  214,  933,  311,
      311,  947,  214,  934,  214,  947,  214,  947,  214,  947,
      311,  311,  311,  311,  311,  214,  947,  311,  311,  947,
      935,  311,  311,  947,  311,  398,  398,  936,  311,  947,
      311,  311,  947,  311,  947,  311,  398,  398,  398,  311,
      937,  311,  398,  398,  398,  398,  938,  398,  398,  947,
      398,  398,  311,  398,  947,  398,  939,  214,  214,  398,

      940,  398,  214,  214,  398,  947,  398,  947,  214,  214,
      214,  947,  398,  214,  311,  311,  311,  311,  947,  214,
      214,  941,  311,  311,  214,  311,  947,  311,  398,  398,
      947,  214,  947,  311,  947,  942,  311,  947,  311,  398,
      398,  398,  398,  398,  311,  214,  214,  311,  311,  947,
      398,  398,  947,  398,  947,  947,  214,  947,  311,  943,
      398,  398,  398,  944,  398,  945,  947,  214,  947,  311,
      947,  398,  214,  214,  311,  311,  398,  398,  946,  947,
      947,  947,  398,  214,  947,  311,  947,  398,  947,  947,
      947,  947,  947,  947,  214,  947,  311,  947,  398,  101,

      101,  101,  101,  101,  101,  101,  101,  101,  101,  101,
      101,  101,  107,  107,  107,  107,  107,  107,  107,  107,
      107,  107,  107,  107,  107,  113,  113,  113,  113,  113,
      113,  113,  113,  113,  113,  113,  113,  113,  118,  118,
      118,  118,  118,  118,  118,  118,  118,  118,  118,  118,
      118,  121,  121,  121,  121,  121,  121,  121,  121,  121,
      121,  121,  121,  121,  168,  168,  168,  168,  168,  168,
      168,  168,  168,  168,  168,  168,  168,  214,  947,  947,
      947,  947,  947,  947,  947,  214,  223,  947,  947,  947,
      947,  947,  947,  947,  223,  300,  300,  300,  300,  947,

      300,  300,  311,  947,  947,  311,  947,  947,  947,  947,
      947,  947,  947,  311,  320,  947,  947,  947,  947,  947,
      947,  947,  320,  357,  357,  947,  947,  357,  947,  357,
      947,  357,  357,  357,  947,  357,  363,  363,  947,  947,
      363,  947,  363,  947,  363,  363,  363,  947,  363,  369,
      369,  947,  947,  369,  369,  369,  369,  369,  947,  369,
      369,  369,  373,  373,  947,  947,  373,  373,  373,  373,
      373,  373,  373,  373,  373,  393,  947,  947,  947,  393,
      947,  393,  947,  393,  393,  947,  393,  393,  398,  947,
      947,  947,  947,  947,  947,  947,  398,  407,  947,  947,

      947,  947,  947,  947,  947,  407,  459,  459,  459,  459,
      459,  459,  459,  459,  459,  459,  459,  459,  465,  465,
      465,  465,  465,  465,  465,  465,  465,  465,  465,  465,
      466,  947,  947,  947,  947,  947,  947,  947,  466,  475,
      947,  947,  947,  947,  947,  947,  947,  475,  497,  497,
      497,  497,  497,  497,  497,  497,  497,  497,  497,  497,
      519,  947,  947,  519,  947,  947,  947,  947,  947,  947,
      947,  519,  528,  947,  947,  947,  947,  947,  947,  947,
      528,  544,  544,  544,  544,  544,  544,  544,  544,  947,
      544,  947,  544,  544,  642,  947,  642,  947,  947,  947,

      947,  947,  642,  761,  947,  947,  947,  947,  947,  947,
      947,  761,  670,  670,  947,  670,  670,  670,  670,  670,
      670,  670,  670,  670,  670,  820,  820,  820,  820,  820,
      820,  820,  820,  820,  820,  820,  820,  820,  223,  947,
      947,  947,  947,  947,  947,  947,  223,  320,  947,  947,
      320,  947,  947,  947,  947,  947,  947,  947,  320,   19,
      947,  947,  947,  947,  947,  947,  947,  947,  947,  947,
      947,  947,  947,  947,  947,  947,  947,  947,  947,  947,
      947,  947,  947,  947,  947,  947,  947,  947,  947,  947,
      947,  947,  947,  947,  947,  947,  947,  947,  947,  947,

      947,  947,  947,  947,  947,  947,  947,  947,  947,  947,
      947,  947,  947,  947,  947,  947,  947,  947,  947,  947,
      947,  947,  947,  947,  947,  947,  947,  947,  947,  947,
      947,  947
    } ;

static const flex_int16_t yy_chk[5033] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    3,    3,   33,    3,    4,    4,
       33,    4,    3,   43,    5,    5,    4,    5,  769,    3,
        7,    7,    5,    4,    6,    6,  139,    6,   22,    5,
      139,    7,    6,    8,    8,   43,    7,    9,    9,    6,
       10,   10,   22,   42,    8,   11,   11,   11,   22,    8,
       12,   12,   12,   38,   21,   21,   21,   38,   38,   67,

       67,   67,   11,   21,  729,   42,   42,   12,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       15,   15,   15,  679,   15,   23,   23,   69,   69,   15,
       15,   93,   93,   93,   15,   95,   95,   15,  651,   23,

       15,   15,   15,   15,   15,   23,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   44,   45,  104,   15,   16,   16,   16,
      104,   16,   65,  105,  110,  111,   16,   16,  105,  110,
      111,   16,   50,   50,   16,   44,   45,   16,   16,   16,
       16,   16,   37,   50,   65,   37,   51,   51,  125,   37,
       37,   37,   50,  125,   50,  163,  163,   51,   66,   66,
       66,   66,   66,   37,  585,   37,   51,  584,   51,   72,
       72,   72,   72,   16,   17,   17,   17,   17,   17,   17,

       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   28,   28,   52,   52,
       53,   53,   56,   56,   52,   54,   54,   28,  142,   52,
      239,   53,  382,   56,  239,  142,   54,   52,   28,   53,
       52,   54,   53,   54,   56,  144,  583,   54,  382,  144,

      144,   28,   28,   28,   28,   28,   28,   28,   28,   28,
       39,  582,   39,   39,   39,   57,   57,   58,   58,   98,
       98,   98,   98,   39,  581,   39,   57,   58,   58,  161,
      161,  161,   39,   39,   39,   39,  485,   57,  485,   58,
       39,   39,   39,   39,   39,   39,   39,   39,   39,   39,
       39,   39,   39,   39,   39,   39,   39,   39,   39,   39,
       68,   68,   68,   68,   68,  202,  202,   55,   55,   39,
       39,   39,   39,   39,   39,   39,   39,   39,   55,   76,
      149,   59,   59,  536,   60,   60,   55,   61,   61,   55,
       55,   59,   59,  218,  218,   60,  176,   60,   61,  169,

       61,  176,  149,   59,   60,   59,   60,  150,  169,   61,
       70,   70,   70,   70,   70,   71,   71,   71,   71,   71,
       73,   73,   73,   73,   73,   75,   75,   75,  186,  150,
       75,   75,  527,  186,   75,   92,   92,   92,   92,   92,
      488,   76,   76,   76,   76,   76,   76,   76,   76,   76,
       77,   77,   77,   77,   77,   77,   77,   77,   77,   78,
       78,   78,   78,   78,   78,   78,   78,   78,   94,   94,
       94,   94,   94,   96,   96,   96,   96,   96,   97,   97,
       97,   97,   97,  227,  227,  151,  486,   75,   75,   75,
       75,   75,   75,   75,   75,   75,   79,   80,   80,  483,

       81,   81,   99,   99,   99,   99,   99,  151,   80,  257,
      257,   81,  200,  200,  200,  159,  474,   80,  444,   80,
       81,  128,   81,   79,   79,   82,   82,   83,   83,   86,
       86,   82,   84,   84,   79,  128,   82,  159,   83,  383,
       86,  128,  415,   84,   82,   79,   83,   82,   84,   83,
       84,   86,  305,  305,   84,  383,   85,   85,   79,   79,
       79,   79,   79,   79,   79,   79,   79,   85,  265,   87,
       87,   88,   88,   89,   89,   85,   90,   90,   85,   85,
       87,   88,   88,   89,   89,  315,  315,   90,  406,   90,
      265,   87,  394,   88,  392,   89,   90,   89,   90,   91,

       91,  394,  129,  129,  127,  127,  127,  130,  130,  148,
       91,  391,   91,  127,  127,  390,  129,  127,  130,  127,
      127,   91,  129,  127,  134,  134,  216,  216,  216,  130,
      143,  148,  148,  143,  389,  134,  385,  143,  143,  143,
      160,  160,  160,  160,  160,  384,  134,  165,  165,  165,
      165,  143,  375,  143,  162,  162,  162,  162,  162,  164,
      164,  164,  164,  164,  166,  166,  166,  166,  166,  183,
      183,  183,  183,  183,  183,  183,  183,  183,  184,  184,
      184,  184,  184,  184,  184,  184,  184,  185,  185,  267,
      187,  187,  310,  188,  188,  190,  190,  253,  185,  253,

      328,  187,  253,  320,  188,  319,  190,  324,  324,  185,
      187,  267,  187,  188,  190,  188,  310,  190,  204,  204,
      204,  204,  185,  185,  185,  185,  185,  185,  185,  185,
      185,  189,  189,  191,  191,  192,  192,  189,  207,  207,
      207,  309,  189,  261,  191,  243,  192,  207,  310,  191,
      189,  191,  241,  189,  192,  191,  240,  192,  192,  193,
      193,  194,  194,  195,  195,  196,  196,  225,  225,  225,
      193,  269,  194,  195,  195,  196,  196,  197,  197,  289,
      213,  193,  231,  194,  222,  195,  209,  196,  197,  196,
      197,  198,  198,  269,  213,  402,  402,  197,  206,  197,

      213,  289,  198,  171,  198,  199,  199,  199,  199,  199,
      255,  255,  255,  198,  201,  201,  201,  201,  201,  203,
      203,  203,  203,  203,  205,  205,  205,  205,  205,  211,
      211,  211,  212,  212,  212,  167,  214,  214,  215,  215,
      215,  215,  215,  211,  411,  411,  212,  214,  157,  211,
      470,  470,  212,  217,  217,  217,  217,  217,  214,  219,
      219,  219,  219,  219,  220,  220,  220,  220,  221,  221,
      221,  221,  221,  224,  224,  224,  224,  224,  226,  226,
      226,  226,  226,  228,  228,  228,  228,  228,  229,  229,
      229,  229,  230,  230,  230,  230,  230,  232,  232,  233,

      233,  303,  303,  303,  242,  313,  313,  313,  232,  153,
      233,  242,  242,  254,  254,  254,  254,  254,  146,  232,
      140,  233,  242,  242,  248,  248,  248,  248,  248,  248,
      248,  248,  248,  249,  249,  249,  249,  249,  249,  249,
      249,  249,  250,  135,  262,  124,  250,  250,  250,  256,
      256,  256,  256,  256,  258,  258,  258,  258,  258,  462,
      250,  462,  250,  252,  462,  252,  262,  262,  252,  259,
      259,  259,  259,  260,  260,  260,  260,  260,  271,  271,
      122,  272,  272,  273,  273,  275,  275,  276,  276,  271,
      271,  272,  272,  120,  273,  117,  275,  463,  276,  463,

      271,  116,  463,  272,  273,  273,  115,  275,  276,  276,
      274,  274,  252,  252,  252,  252,  252,  252,  252,  252,
      252,  274,  277,  277,  109,  278,  278,  103,  274,  280,
      280,  277,  274,  277,  479,  479,  278,  279,  279,  100,
      280,  281,  281,   74,  277,  278,   63,  278,  279,  282,
      282,  280,  281,   47,  281,  279,  283,  283,   36,  279,
      282,  523,  523,  281,   29,  284,  284,  283,  386,   19,
      282,  282,  283,  285,  285,    0,  284,    0,  283,  284,
      286,  286,  386,  285,  285,  287,  287,  284,  386,  290,
      290,  286,  322,  322,  322,  285,  287,  532,  532,  287,

      290,  300,  286,  647,  647,  286,    0,  287,  400,  400,
      400,  290,  291,  291,  291,  291,  291,  292,  292,  292,
      292,  292,  293,  293,  293,  293,  293,  294,  294,  294,
      294,  294,  295,  295,  295,  295,  295,  296,  296,  296,
      296,  296,  297,  297,  297,  297,  297,  298,  298,  298,
      298,  298,  299,  299,  299,  675,  675,  299,  299,  725,
      725,  299,    0,  300,  300,  300,  300,  300,  300,  300,
      300,  300,  301,  301,  301,  301,  301,  301,  301,  301,
      301,  302,  302,  302,  302,  302,  304,  304,  304,  304,
      304,  306,  306,  306,  306,  306,  307,  307,  307,  307,

      308,  308,  308,  308,  308,  312,  312,  312,  312,  312,
      765,  765,  311,  311,  299,  299,  299,  299,  299,  299,
      299,  299,  299,  311,  314,  314,  314,  314,  314,  316,
      316,  316,  316,  316,  311,  317,  317,  317,  317,  318,
      318,  318,  318,  318,  321,  321,  321,  321,  321,  323,
      323,  323,  323,  323,  325,  325,  325,  325,  325,  326,
      326,  326,  326,  327,  327,  327,  327,  327,  329,  329,
      330,  330,  331,  331,    0,  332,  332,  333,  333,  329,
        0,  330,    0,  331,  331,  332,  332,    0,  333,    0,
      329,    0,  330,    0,  331,  334,  334,  332,  333,  333,

      335,  335,    0,  336,  336,    0,  334,  337,  337,    0,
      466,  335,  466,  334,  336,  466,  337,  334,  337,  338,
      338,    0,  335,    0,  336,  336,  339,  339,    0,  337,
      338,  340,  340,    0,  341,  341,    0,  339,  642,  338,
      642,  338,  340,  642,  339,  341,    0,  341,  339,  342,
      342,  343,  343,  340,  344,  344,  341,    0,  346,  346,
      342,  777,  343,  777,    0,  344,  777,  343,  344,  346,
      342,  342,    0,  343,  345,  345,  344,  347,  347,    0,
      346,  348,  348,  346,  345,  345,    0,    0,  347,    0,
        0,  347,  348,  409,  409,  409,  345,    0,    0,  347,

      468,  468,  468,  348,  349,  349,  349,  349,  349,  350,
      350,  350,  350,  350,  351,  351,  351,  351,  351,  352,
      352,  352,  352,  352,  353,  353,  353,  353,  353,  354,
      354,  354,  354,  354,  355,  355,  355,  355,  355,  356,
      356,  356,  356,  356,  379,  379,  379,  387,  387,    0,
      388,  388,    0,  379,  379,  398,  398,  379,  387,  379,
      379,  388,  844,  379,  844,    0,  398,  844,    0,  387,
        0,    0,  388,  404,  404,  404,  404,  398,  399,  399,
      399,  399,  399,  401,  401,  401,  401,  401,  403,  403,
      403,  403,  403,  405,  405,  405,  405,  405,  407,  407,

      407,  407,  407,  407,  407,  407,  407,  408,  408,  408,
      408,  408,  410,  410,  410,  410,  410,  412,  412,  412,
      412,  412,  413,  413,  413,  413,  414,  414,  414,  414,
      414,  416,  416,  417,  417,  418,  418,    0,  419,  419,
      420,  420,  416,    0,  417,    0,  418,  418,  419,  419,
        0,  420,    0,  416,    0,  417,    0,  418,  421,  421,
      419,  420,  420,  422,  422,    0,  423,  423,    0,  421,
      424,  424,    0,  898,  422,  898,  421,  423,  898,  424,
      421,  424,  425,  425,    0,  422,    0,  423,  423,  426,
      426,    0,  424,  425,  427,  427,    0,  428,  428,    0,

      426,    0,  425,    0,  425,  427,    0,  426,  428,    0,
      428,  426,  429,  429,  430,  430,  427,  431,  431,  428,
        0,  433,  433,  429,    0,  430,    0,    0,  431,    0,
      430,  431,  433,  429,  429,    0,  430,  432,  432,  431,
      434,  434,    0,  433,  435,  435,  433,  432,  432,    0,
        0,  434,    0,    0,  434,  435,  477,  477,  477,  432,
        0,    0,  434,  521,  521,  521,  435,  436,  436,  436,
      436,  436,  437,  437,  437,  437,  437,  438,  438,  438,
      438,  438,  439,  439,  439,  439,  439,  440,  440,  440,
      440,  440,  441,  441,  441,  441,  441,  442,  442,  442,

      442,  442,  445,  445,  445,  445,  445,  446,  446,  446,
      446,  446,  447,  447,  447,  447,  447,  448,  448,  448,
      448,  448,  449,  449,  449,  449,  449,  450,  450,  450,
      450,  450,  451,  451,  451,  451,  451,  452,  452,  452,
      452,  452,  453,  453,  453,  453,  453,  454,  454,  454,
      454,  454,  455,  455,  455,  455,  455,  456,  456,  456,
      456,  456,  457,  457,  457,  457,  457,  458,  458,  458,
      458,  458,  467,  467,  467,  467,  467,  469,  469,  469,
      469,  469,  471,  471,  471,  471,  471,  472,  472,  472,
      472,  473,  473,  473,  473,  473,  475,  475,  475,  475,

      475,  475,  475,  475,  475,  476,  476,  476,  476,  476,
      478,  478,  478,  478,  478,  480,  480,  480,  480,  480,
      481,  481,  481,  481,  482,  482,  482,  482,  482,  487,
      487,  487,  490,  490,  490,  490,  490,  491,  491,  491,
      491,  491,  487,  492,  492,  492,  492,  492,  493,  493,
      493,  493,  493,  494,  494,  494,  494,  494,  495,  495,
      495,  495,  495,  496,  496,  496,  496,  496,  516,  516,
      516,  516,  516,  517,  517,  517,  517,  517,  518,  518,
      518,  518,  518,  530,  530,  530,  487,  487,  487,  487,
      487,  487,  487,  487,  487,  489,  489,  489,  498,  498,

      499,  499,  500,  500,    0,    0,  499,    0,  489,  498,
        0,  499,  500,  500,    0,  501,  501,  502,  502,    0,
      498,  498,  499,  501,  500,    0,  501,    0,  502,  520,
      520,  520,  520,  520,  645,  645,  645,  501,    0,  502,
      503,  503,  522,  522,  522,  522,  522,  673,  673,  673,
      503,  503,  489,  489,  489,  489,  489,  489,  489,  489,
      489,    0,  503,  504,  504,  505,  505,  506,  506,  507,
      507,  508,  508,    0,  504,  506,  505,    0,  506,  507,
      507,    0,  508,    0,    0,  504,    0,  505,    0,  506,
        0,  507,    0,  508,  508,  509,  509,  510,  510,  511,

      511,    0,  512,  512,  513,  513,  509,  510,  510,    0,
      511,  514,  514,  512,    0,  513,    0,  509,  509,  510,
      512,  511,  514,    0,  512,    0,  513,  514,  524,  524,
      524,  524,  524,  514,  515,  515,    0,  515,  515,  515,
      515,  515,  515,  515,  515,  515,  515,  515,  515,  515,
      515,  515,  515,  515,  515,  515,  515,  515,  515,  515,
      515,  515,  515,  515,  515,  515,  515,  515,  515,  515,
      515,  515,  515,  515,  515,  515,  515,  515,  515,  515,
      515,  515,  515,  515,  515,  515,  515,  515,  515,  515,
      515,  515,  515,  515,  515,  515,  515,  515,  515,  515,

      515,  515,  515,  515,  515,  515,  519,  525,  525,  525,
      525,  526,  526,  526,  526,  526,  528,  529,  529,  529,
      529,  529,  531,  531,  531,  531,  531,  533,  533,  533,
      533,  533,  534,  534,  534,  534,  535,  535,  535,  535,
      535,  537,  537,  537,  537,  537,  538,  538,  538,  538,
      538,  539,  539,  539,  539,  539,  540,  540,  540,  540,
      540,  541,  541,  541,  541,  541,    0,    0,  519,  519,
      519,  519,  519,  519,  519,  519,  519,    0,  528,  528,
      528,  528,  528,  528,  528,  528,  528,  542,  542,  542,
      542,  542,  543,  543,  543,  543,  543,  545,  546,  546,

      546,  546,  546,  649,  649,  649,  649,  545,  723,  723,
      723,  545,  547,  547,  547,  547,  547,  545,  545,    0,
      545,  548,  548,  548,  548,  548,  549,  549,  549,  549,
      549,  550,  550,  550,  550,  550,  551,  551,  551,  551,
      551,  552,  552,  552,  552,  552,  553,  553,  553,  553,
      553,  554,  554,  554,  554,  554,  555,  555,  555,  555,
      555,  556,  556,  556,  556,  556,  557,  557,  557,  557,
      557,  558,  558,  558,  558,  558,  559,  559,  559,  559,
      559,  560,  560,  561,  561,  562,  562,    0,    0,  561,
      563,  563,  560,    0,  561,  562,  562,    0,  563,  564,

      564,  563,    0,  560,  560,  561,    0,  562,  565,  565,
      564,    0,  563,  566,  566,  567,  567,    0,  565,  565,
        0,  564,  569,  569,  566,    0,  567,    0,  568,  568,
      565,    0,  569,  569,    0,  566,  568,  567,    0,  568,
      570,  570,  571,  571,  569,  572,  572,  573,  573,    0,
      568,  570,    0,  571,    0,  572,  572,    0,  573,  574,
      574,    0,  570,  570,  571,  571,  626,  572,  626,  573,
      574,  575,  575,  576,  576,  626,  626,  574,  763,  763,
      763,  574,  575,    0,  576,    0,  626,  626,    0,  576,
        0,    0,    0,  575,    0,  576,  577,  577,    0,  577,

      577,  577,  577,  577,  577,  577,  577,  577,  577,  577,
      577,  577,  577,  577,  577,  577,  577,  577,  577,  577,
      577,  577,  577,  577,  577,  577,  577,  577,  577,  577,
      577,  577,  577,  577,  577,  577,  577,  577,  577,  577,
      577,  577,  577,  577,  577,  577,  577,  577,  577,  577,
      577,  577,  577,  577,  577,  577,  577,  577,  577,  577,
      577,  577,  577,  577,  577,  577,  577,  577,  578,  578,
      578,  578,  578,  579,  579,  579,  579,  579,  580,  580,
      580,  580,  580,  586,  586,  586,  586,  586,  587,  587,
      587,  587,  587,  588,  588,  588,  588,  588,  589,  589,

      589,  589,  589,  590,  590,  590,  590,  590,  591,  591,
      591,  591,  591,  592,  592,  592,  592,  592,  593,  593,
      593,  593,  593,  594,  594,  594,  594,  594,  595,  595,
      595,  595,  595,  596,  596,  596,  596,  596,  597,  597,
      597,  597,  597,  598,  598,  598,  598,  598,  599,  599,
      599,  599,  599,  600,  600,  601,  601,  602,  602,    0,
        0,  601,  603,  603,  600,    0,  601,  602,  602,    0,
      603,  604,  604,  603,    0,  600,  600,  601,    0,  602,
      605,  605,  604,    0,  603,  606,  606,  607,  607,    0,
      605,  605,    0,  604,  609,  609,  606,    0,  607,    0,

      608,  608,  605,    0,  609,  609,    0,  606,  608,  607,
        0,  608,  610,  610,  611,  611,  609,  612,  612,  613,
      613,    0,  608,  610,    0,  611,    0,  612,  612,    0,
      613,  614,  614,    0,  610,  610,  611,  611,  627,  612,
      627,  613,  614,  615,  615,  616,  616,  627,  627,  614,
        0,    0,    0,  614,  615,    0,  616,    0,  627,  627,
        0,  616,    0,    0,    0,  615,    0,  616,  617,  617,
      617,  617,  617,  618,  618,  618,  618,  618,  619,  619,
      619,  619,  619,  620,  620,  620,  620,  620,  621,  621,
      621,  621,  621,  622,  622,  622,  622,  622,  623,  623,

      623,  623,  623,  624,  624,  624,  624,  624,  625,  625,
      625,  625,  625,  628,  628,  628,  628,  628,  629,  629,
      629,  629,  629,  630,  630,  630,  630,  630,  631,  631,
      631,  631,  631,  632,  632,  632,  632,  632,  633,  633,
      633,  633,  633,  634,  634,  634,  634,  634,  635,  635,
      635,  635,  635,  636,  636,  636,  636,  636,  637,  637,
      637,  637,  637,  638,  638,  638,  638,  638,  639,  639,
      639,  639,  639,  640,  640,  640,  640,  640,  641,  641,
      641,  641,  641,  643,  643,  643,  643,  643,  643,  643,
      643,  643,  644,  644,  644,  644,  644,  646,  646,  646,

      646,  646,  648,  648,  648,  648,  648,  650,  650,  650,
      650,  650,  652,  652,  652,  652,  652,  653,  653,  653,
      653,  653,  654,  654,  654,  654,  654,  655,  655,    0,
      656,  656,  657,  657,    0,  658,  658,    0,  655,  659,
      659,  656,    0,  657,  655,  656,  658,    0,  658,  655,
      659,    0,  656,  659,  657,  660,  660,  658,    0,  661,
      661,  659,  662,  662,  821,  821,  660,  663,  663,  660,
      661,    0,    0,  662,  664,  664,    0,  660,  663,  665,
      665,  661,  661,    0,  662,  664,  821,  663,    0,  663,
      665,  664,  666,  666,  667,  667,  664,  668,  668,  665,

      666,  665,  667,  666,    0,  667,    0,    0,  668,    0,
      669,  669,    0,    0,  666,    0,  667,    0,    0,  668,
      669,  669,  672,  672,  672,  672,  672,  674,  674,  674,
      674,  674,  669,  676,  676,  676,  676,  676,  677,  677,
      677,  677,  678,  678,  678,  678,  678,  680,  680,  681,
      681,  681,  681,  681,  727,  727,  727,  727,  680,  682,
      682,  682,  682,  682,  683,  683,  683,  683,  683,  680,
      684,  684,  684,  684,  684,  685,  685,  685,  685,  685,
      686,  686,  686,  686,  686,  687,  687,  687,  687,  687,
      688,  688,  688,  688,  688,  689,  689,  689,  689,  689,

      690,  690,  690,  690,  690,  691,  691,  691,  691,  691,
      692,  692,  692,  692,  692,  693,  693,  693,  693,  693,
      694,  694,  694,  694,  694,  695,  695,  695,  695,  695,
      696,  696,  696,  696,  696,  697,  697,  697,  697,  697,
      698,  699,  699,  699,  699,  699,  767,  767,  767,  767,
      698,    0,    0,    0,  698,  700,  700,  700,  700,  700,
      698,  698,    0,  698,  701,  701,  701,  701,  701,  702,
      702,  702,  702,  702,  703,  703,  703,  703,  703,  704,
      704,  704,  704,  704,  705,  705,    0,  706,  706,  707,
      707,    0,  708,  708,    0,  705,  709,  709,  706,    0,

      707,  705,  706,  708,    0,  708,  705,  709,    0,  706,
      709,  707,  710,  710,  708,    0,  711,  711,  709,  712,
      712,  881,  881,  710,  713,  713,  710,  711,    0,    0,
      712,  714,  714,    0,  710,  713,  715,  715,  711,  711,
        0,  712,  714,  881,  713,    0,  713,  715,  714,  716,
      716,  717,  717,  714,  718,  718,  715,  716,  715,  717,
      716,    0,  717,    0,    0,  718,    0,  719,  719,    0,
        0,  716,    0,  717,  720,  720,  718,  719,  719,  722,
      722,  722,  722,  722,  720,    0,    0,    0,  720,  719,
        0,    0,    0,    0,  720,  720,  720,  720,  720,  724,

      724,  724,  724,  724,  726,  726,  726,  726,  726,  728,
      728,  728,  728,  728,  730,  730,  731,  731,  731,  731,
      731,    0,    0,    0,    0,  730,    0,    0,    0,    0,
      720,  732,  732,  732,  732,  732,  730,  733,  733,  733,
      733,  733,  734,  734,  734,  734,  734,  735,  735,  735,
      735,  735,  736,  736,  736,  736,  736,  737,  737,    0,
      738,  738,  739,  739,    0,  740,  740,    0,  737,  741,
      741,  738,    0,  739,  737,  738,  740,    0,  740,  737,
      741,    0,  738,  741,  739,  742,  742,  740,    0,  743,
      743,  741,  744,  744,    0,    0,  742,  745,  745,  742,

      743,    0,    0,  744,  746,  746,    0,  742,  745,  747,
      747,  743,  743,    0,  744,  746,    0,  745,    0,  745,
      747,  746,  748,  748,  749,  749,  746,  750,  750,  747,
      748,  747,  749,  748,    0,  749,  752,  752,  750,    0,
      751,  751,  753,  753,  748,    0,  749,  752,    0,  750,
      751,  751,    0,  753,    0,    0,    0,    0,  752,    0,
        0,    0,  751,    0,  753,  754,  754,  754,  754,  754,
      754,  754,  754,  754,  755,  755,  755,  755,  755,  756,
      756,  756,  756,  756,  757,  757,  757,  757,  757,  758,
      758,  758,  758,  758,  759,  759,  759,  759,  759,  760,

      760,  760,  760,  760,  761,  761,  761,  761,  761,  761,
      761,  761,  761,  762,  762,  762,  762,  762,  764,  764,
      764,  764,  764,  766,  766,  766,  766,  766,  768,  768,
      768,  768,  768,  770,  770,  770,  770,  770,  771,  771,
      771,  771,  771,  772,  772,  772,  772,  772,  773,  773,
      773,  773,  773,  774,  774,  774,  774,  774,  775,  775,
      775,  775,  775,  776,  776,  776,  776,  776,  778,  778,
      779,  779,  780,  780,    0,  781,  781,    0,  778,  778,
        0,  779,    0,  780,  782,  782,  781,  783,  783,    0,
      778,    0,  779,  781,  780,  782,    0,  781,  783,  784,

      784,  785,  785,    0,    0,  783,  782,  786,  786,  783,
      784,    0,  785,  784,    0,  787,  787,  786,  786,  788,
      788,  784,    0,  785,    0,  785,  787,  789,  789,  786,
      788,  790,  790,  787,    0,    0,    0,  787,  789,    0,
      789,  788,  790,  791,  791,  791,  791,  791,    0,  789,
        0,    0,    0,  790,  792,  792,  792,  792,  792,  793,
      793,  793,  793,  793,  794,  794,  794,  794,  794,  795,
      795,  795,  795,  795,  796,  796,  796,  796,  796,  797,
      797,  797,  797,  797,  798,  798,  798,  798,  798,  799,
      799,  799,  799,  799,  800,  800,  800,  800,  800,  801,

      801,  801,  801,  801,  802,  802,  802,  802,  802,  803,
      803,  803,  803,  803,  805,  805,  806,  807,  807,  808,
      808,  809,  809,    0,    0,  805,    0,  807,  807,    0,
      808,    0,  809,  810,  810,    0,  805,  811,  811,  807,
        0,  808,    0,  809,  810,  812,  812,    0,  811,  814,
      814,  810,    0,  817,  817,  810,  812,    0,    0,  811,
      814,    0,    0,  812,  817,    0,    0,  812,    0,    0,
        0,  814,    0,  814,    0,  817,  813,  813,  806,  806,
      806,  806,  806,  806,  806,  806,  806,  813,  816,  816,
      813,  815,  815,    0,  818,  818,    0,    0,  813,  816,

        0,  815,  815,  819,  819,  818,  816,  818,    0,    0,
      816,    0,    0,  815,  819,    0,  818,  822,  822,  822,
      822,  822,    0,    0,    0,  819,  823,  823,  823,  823,
      823,  824,  824,  824,  824,  824,  825,  825,  825,  825,
      825,  826,  826,  826,  826,  826,  827,  827,  827,  827,
      827,  828,  828,  828,  828,  828,  829,  829,  831,  831,
      832,  832,  833,  833,    0,  834,  834,  829,  831,  831,
        0,  832,    0,  833,  835,  835,  834,    0,  829,    0,
      831,    0,  832,  834,  833,  835,    0,  834,  836,  836,
      837,  837,  838,  838,    0,    0,  835,  839,  839,  836,

        0,  837,    0,  838,  837,    0,  836,  839,  839,    0,
      836,    0,  837,    0,  838,    0,  838,  840,  840,  839,
      841,  841,    0,  842,  842,    0,  843,  843,  840,    0,
        0,  841,    0,    0,  842,  840,  842,  843,    0,  840,
        0,    0,  841,    0,    0,  842,    0,    0,  843,  846,
      846,  846,  846,  846,  847,  847,  847,  847,  847,  848,
      848,  848,  848,  848,  849,  849,  849,  849,  849,  850,
      850,  850,  850,  850,  851,  851,  851,  851,  851,  852,
      852,  852,  852,  852,  853,  853,  853,  853,  853,  854,
      854,  854,  854,  854,  855,  855,  855,  855,  855,  856,

      856,  857,  857,  858,  858,  859,  859,  860,  860,    0,
      856,    0,  857,  859,  858,    0,  859,  856,  860,  861,
      861,  856,    0,  857,  857,  858,  860,  859,    0,  860,
      861,  862,  862,  861,  863,  863,  864,  864,  865,  865,
        0,  861,  862,    0,    0,  863,    0,  864,    0,  865,
        0,    0,    0,  862,    0,    0,  863,    0,  864,    0,
      865,  866,  866,  866,  866,  866,  867,  867,  867,  867,
      867,  868,  868,  868,  868,  868,  871,  871,  872,  872,
      873,  873,  874,  874,  875,  875,    0,  871,    0,  872,
      874,  873,    0,  874,  871,  875,  876,  876,  871,    0,

      872,  872,  873,  875,  874,    0,  875,  876,  877,  877,
      876,  878,  878,  879,  879,  880,  880,    0,  876,  877,
        0,    0,  878,    0,  879,    0,  880,    0,    0,    0,
      877,    0,    0,  878,    0,  879,    0,  880,  882,  882,
      882,  882,  882,  883,  883,  883,  883,  883,  884,  884,
      884,  884,  884,  885,  885,  886,  886,  887,  887,  888,
      888,  889,  889,    0,  885,    0,  886,  888,  887,    0,
      888,  885,  889,  890,  890,  885,    0,  886,  886,  887,
      889,  888,    0,  889,  890,  891,  891,  890,  892,  892,
      893,  893,  894,  894,    0,  890,  891,    0,    0,  892,

        0,  893,    0,  894,    0,    0,    0,  891,    0,    0,
      892,    0,  893,    0,  894,  895,  895,  895,  895,  895,
      896,  896,  896,  896,  896,  897,  897,  897,  897,  897,
      899,  899,  900,  900,  901,  901,    0,  902,  902,  903,
      903,  899,  900,  900,    0,  901,  905,  905,  902,    0,
      903,    0,  899,    0,  900,  902,  901,  905,    0,  902,
      903,  903,  906,  906,  907,  907,    0,    0,  905,  908,
      908,    0,  906,  906,    0,  907,    0,  909,  909,    0,
      908,  911,  911,    0,  906,    0,  907,  908,  909,  913,
      913,  908,  911,    0,  912,  912,  914,  914,  909,  909,

      913,  915,  915,  911,  912,  912,    0,  914,  917,  917,
        0,  913,  915,    0,  914,    0,  912,    0,  914,  917,
      918,  918,  915,  915,  919,  919,  920,  920,    0,  917,
      917,  918,    0,  921,  921,  919,    0,  920,  919,  922,
      922,    0,  918,  921,  921,    0,  919,    0,  920,    0,
      922,  923,  923,  924,  924,  921,    0,  925,  925,    0,
      922,  922,  923,    0,  924,  927,  927,  924,  925,    0,
      926,  926,    0,  923,    0,  924,  927,  928,  928,  925,
      926,  926,  929,  929,  930,  930,  927,  927,  928,    0,
      931,  931,  926,  929,    0,  930,  929,  932,  932,  928,

      931,  931,  933,  933,  929,    0,  930,    0,  932,  934,
      934,    0,  931,  933,  935,  935,  936,  936,    0,  932,
      934,  933,  937,  937,  933,  935,    0,  936,  938,  938,
        0,  934,    0,  937,    0,  936,  935,    0,  936,  938,
      939,  939,  940,  940,  937,  941,  941,  942,  942,    0,
      938,  939,    0,  940,    0,    0,  941,    0,  942,  939,
      943,  943,  939,  941,  940,  942,    0,  941,    0,  942,
        0,  943,  944,  944,  945,  945,  946,  946,  943,    0,
        0,    0,  943,  944,    0,  945,    0,  946,    0,    0,
        0,    0,    0,    0,  944,    0,  945,    0,  946,  948,

      948,  948,  948,  948,  948,  948,  948,  948,  948,  948,
      948,  948,  949,  949,  949,  949,  949,  949,  949,  949,
      949,  949,  949,  949,  949,  950,  950,  950,  950,  950,
      950,  950,  950,  950,  950,  950,  950,  950,  951,  951,
      951,  951,  951,  951,  951,  951,  951,  951,  951,  951,
      951,  952,  952,  952,  952,  952,  952,  952,  952,  952,
      952,  952,  952,  952,  953,  953,  953,  953,  953,  953,
      953,  953,  953,  953,  953,  953,  953,  954,    0,    0,
        0,    0,    0,    0,    0,  954,  955,    0,    0,    0,
        0,    0,    0,    0,  955,  956,  956,  956,  956,    0,

      956,  956,  957,    0,    0,  957,    0,    0,    0,    0,
        0,    0,    0,  957,  958,    0,    0,    0,    0,    0,
        0,    0,  958,  959,  959,    0,    0,  959,    0,  959,
        0,  959,  959,  959,    0,  959,  960,  960,    0,    0,
      960,    0,  960,    0,  960,  960,  960,    0,  960,  961,
      961,    0,    0,  961,  961,  961,  961,  961,    0,  961,
      961,  961,  962,  962,    0,    0,  962,  962,  962,  962,
      962,  962,  962,  962,  962,  963,    0,    0,    0,  963,
        0,  963,    0,  963,  963,    0,  963,  963,  964,    0,
        0,    0,    0,    0,    0,    0,  964,  965,    0,    0,

        0,    0,    0,    0,    0,  965,  966,  966,  966,  966,
      966,  966,  966,  966,  966,  966,  966,  966,  967,  967,
      967,  967,  967,  967,  967,  967,  967,  967,  967,  967,
      968,    0,    0,    0,    0,    0,    0,    0,  968,  969,
        0,    0,    0,    0,    0,    0,    0,  969,  970,  970,
      970,  970,  970,  970,  970,  970,  970,  970,  970,  970,
      971,    0,    0,  971,    0,    0,    0,    0,    0,    0,
        0,  971,  972,    0,    0,    0,    0,    0,    0,    0,
      972,  973,  973,  973,  973,  973,  973,  973,  973,    0,
      973,    0,  973,  973,  974,    0,  974,    0,    0,    0,

        0,    0,  974,  975,    0,    0,    0,    0,    0,    0,
        0,  975,  976,  976,    0,  976,  976,  976,  976,  976,
      976,  976,  976,  976,  976,  977,  977,  977,  977,  977,
      977,  977,  977,  977,  977,  977,  977,  977,  978,    0,
        0,    0,    0,    0,    0,    0,  978,  979,    0,    0,
      979,    0,    0,    0,    0,    0,    0,    0,  979,  947,
      947,  947,  947,  947,  947,  947,  947,  947,  947,  947,
      947,  947,  947,  947,  947,  947,  947,  947,  947,  947,
      947,  947,  947,  947,  947,  947,  947,  947,  947,  947,
      947,  947,  947,  947,  947,  947,  947,  947,  947,  947,

      947,  947,  947,  947,  947,  947,  947,  947,  947,  947,
      947,  947,  947,  947,  947,  947,  947,  947,  947,  947,
      947,  947,  947,  947,  947,  947,  947,  947,  947,  947,
      947,  947
    } ;

extern int yy_flex_debug;
int yy_flex_debug = 0;

static yy_state_type *yy_state_buf=0, *yy_state_ptr=0;
static char *yy_full_match;
static int yy_lp;
static int yy_looking_for_trail_begin = 0;
static int yy_full_lp;
static int *yy_full_state;
#define YY_TRAILING_MASK 0x2000
#define YY_TRAILING_HEAD_MASK 0x4000
#define REJECT \
{ \
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */ \
yy_cp = (yy_full_match); /* restore poss. backed-over text */ \
(yy_lp) = (yy_full_lp); /* restore orig. accepting pos. */ \
(yy_state_ptr) = (yy_full_state); /* restore orig. state */ \
yy_current_state = *(yy_state_ptr); /* restore curr. state */ \
++(yy_lp); \
goto find_rule; \
}

#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
/* -*- C++ -*- */
/*
 * Scilab ( https://www.scilab.org/ ) - This file is part of Scilab
 * Copyright (C) 2008-2012 - Scilab Enterprises - Bruno JOFRET
 * Copyright (C) 2012 - 2016 - Scilab Enterprises
 * Copyright (C) 2018 - Dirk Reusch, Kybernetik Dr. Reusch
 * Copyright (C) 2023 - Dassault Systemes - Bruno JOFRET
 *
 * This file is hereby licensed under the terms of the GNU GPL v2.0,
 * pursuant to article 5.3.4 of the CeCILL v.2.1.
 * This file was originally licensed under the terms of the CeCILL v2.1,
 * and continues to be available under such terms.
 * For more information, see the COPYING file which you should have received
 * along with this program.
 *
 */

#include <stack>

#include "isatty.hxx"
#include "parse.hxx"
#include "parser_private.hxx"

#include "context.hxx"

extern "C"
{
#include "charEncoding.h"
#include "sci_malloc.h"
}

static std::stack<int> paren_levels;
static std::stack<int> lambda_levels;

static int comment_level = 0;
static int last_token = 0;
static int linebreak_stored_token = 0;
static bool linebreak_stored_space = FALSE;
static int exit_status = PARSE_ERROR;
static int str_opener_column = 0;
static std::string current_file;
static std::string program_name;

static std::string pstBuffer;

extern void yyerror(std::string);

#define YY_USER_ACTION                          \
    yylloc.first_column = yylloc.last_column; yylloc.last_column += yyleng;
//yylloc.last_column += yyleng;

/* -*- Verbose Special Debug -*- */
//#define DEV
//#define TOKENDEV

#ifdef DEV
#define DEBUG(x) std::cout << "[DEBUG] " << x << std::endl;
#else
#define DEBUG(x) /* Nothing */
#endif

#ifdef DEV
std::string token_to_string(int);
#endif

#define INITIAL 0
#define SIMPLESTRING 1
#define DOUBLESTRING 2
#define REGIONCOMMENT 3
#define LINECOMMENT 4
#define LINEBREAK 5
#define MATRIX 6
#define SHELLMODE 7
#define BEGINID 8

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals ( void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy ( void );

int yyget_debug ( void );

void yyset_debug ( int debug_flag  );

YY_EXTRA_TYPE yyget_extra ( void );

void yyset_extra ( YY_EXTRA_TYPE user_defined  );

FILE *yyget_in ( void );

void yyset_in  ( FILE * _in_str  );

FILE *yyget_out ( void );

void yyset_out  ( FILE * _out_str  );

			int yyget_leng ( void );

char *yyget_text ( void );

int yyget_lineno ( void );

void yyset_lineno ( int _line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap ( void );
#else
extern int yywrap ( void );
#endif
#endif

#ifndef YY_NO_UNPUT
    
    static void yyunput ( int c, char *buf_ptr  );
    
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * );
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput ( void );
#else
static int input ( void );
#endif

#endif

        static int yy_start_stack_ptr = 0;
        static int yy_start_stack_depth = 0;
        static int *yy_start_stack = NULL;
    
    static void yy_push_state ( int _new_state );
    
    static void yy_pop_state ( void );
    
    static int yy_top_state ( void );
    
/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = (int) fread(buf, 1, (yy_size_t) max_size, yyin)) == 0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex (void);

#define YY_DECL int yylex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	if ( yyleng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
				(yytext[yyleng - 1] == '\n'); \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

        /* Create the reject buffer large enough to save one state per allowed character. */
        if ( ! (yy_state_buf) )
            (yy_state_buf) = (yy_state_type *)yyalloc(YY_STATE_BUF_SIZE  );
            if ( ! (yy_state_buf) )
                YY_FATAL_ERROR( "out of dynamic memory in yylex()" );

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	{

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
		yy_current_state += YY_AT_BOL();

		(yy_state_ptr) = (yy_state_buf);
		*(yy_state_ptr)++ = yy_current_state;

yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 948 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			*(yy_state_ptr)++ = yy_current_state;
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 4960 );

yy_find_action:
		yy_current_state = *--(yy_state_ptr);
		(yy_lp) = yy_accept[yy_current_state];
find_rule: /* we branch to this label when backing up */
		for ( ; ; ) /* until we find what rule we matched */
			{
			if ( (yy_lp) && (yy_lp) < yy_accept[yy_current_state + 1] )
				{
				yy_act = yy_acclist[(yy_lp)];
				if ( yy_act & YY_TRAILING_HEAD_MASK ||
				     (yy_looking_for_trail_begin) )
					{
					if ( yy_act == (yy_looking_for_trail_begin) )
						{
						(yy_looking_for_trail_begin) = 0;
						yy_act &= ~YY_TRAILING_HEAD_MASK;
						break;
						}
					}
				else if ( yy_act & YY_TRAILING_MASK )
					{
					(yy_looking_for_trail_begin) = yy_act & ~YY_TRAILING_MASK;
					(yy_looking_for_trail_begin) |= YY_TRAILING_HEAD_MASK;
					}
				else
					{
					(yy_full_match) = yy_cp;
					(yy_full_state) = (yy_state_ptr);
					(yy_full_lp) = (yy_lp);
					break;
					}
				++(yy_lp);
				goto find_rule;
				}
			--yy_cp;
			yy_current_state = *--(yy_state_ptr);
			(yy_lp) = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
case 1:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 3;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{
// BOM found ==> ignored
}
	YY_BREAK
case 2:
YY_RULE_SETUP
{
  BEGIN(INITIAL);
  return scan_throw(BOOLTRUE);
}
	YY_BREAK
case 3:
YY_RULE_SETUP
{
  BEGIN(INITIAL);
  return scan_throw(BOOLFALSE);
}
	YY_BREAK
case 4:
YY_RULE_SETUP
{
  if (last_token != DOT)
  {
    ParserSingleInstance::pushControlStatus(Parser::WithinArguments);
  }
  DEBUG("BEGIN(INITIAL)");
  BEGIN(INITIAL);
  return scan_throw(ARGUMENTS);
}
	YY_BREAK
case 5:
YY_RULE_SETUP
{
  if (last_token != DOT)
  {
    ParserSingleInstance::pushControlStatus(Parser::WithinIf);
  }
  DEBUG("BEGIN(INITIAL)");
  BEGIN(INITIAL);
  return scan_throw(IF);
}
	YY_BREAK
case 6:
YY_RULE_SETUP
{
  DEBUG("BEGIN(INITIAL)");
  BEGIN(INITIAL);
  return scan_throw(THEN);
}
	YY_BREAK
case 7:
YY_RULE_SETUP
{
  if (last_token != DOT)
  {
    // Pop to step out IF
    ParserSingleInstance::popControlStatus();
    ParserSingleInstance::pushControlStatus(Parser::WithinElse);
  }
  DEBUG("BEGIN(INITIAL)");
  BEGIN(INITIAL);
  return scan_throw(ELSE);
}
	YY_BREAK
case 8:
YY_RULE_SETUP
{
  if (last_token != DOT)
  {
    ParserSingleInstance::popControlStatus();
    ParserSingleInstance::pushControlStatus(Parser::WithinElseIf);
  }
  DEBUG("BEGIN(INITIAL)");
  BEGIN(INITIAL);
  return scan_throw(ELSEIF);
}
	YY_BREAK
case 9:
YY_RULE_SETUP
{
  if (last_token != DOT)
  {
    ParserSingleInstance::popControlStatus();
  }
  DEBUG("BEGIN(INITIAL)");
  BEGIN(INITIAL);
  return scan_throw(END);
}
	YY_BREAK
case 10:
YY_RULE_SETUP
{
  if (last_token != DOT)
  {
    ParserSingleInstance::pushControlStatus(Parser::WithinSelect);
  }
  DEBUG("BEGIN(INITIAL)");
  BEGIN(INITIAL);
  return scan_throw(SELECT);
}
	YY_BREAK
case 11:
YY_RULE_SETUP
{
  if (last_token != DOT)
  {
    ParserSingleInstance::pushControlStatus(Parser::WithinSwitch);
  }
  DEBUG("BEGIN(INITIAL)");
  BEGIN(INITIAL);
  return scan_throw(SWITCH);
}
	YY_BREAK
case 12:
YY_RULE_SETUP
{
  if (last_token != DOT)
  {
    ParserSingleInstance::popControlStatus();
    ParserSingleInstance::pushControlStatus(Parser::WithinOtherwise);
  }
  DEBUG("BEGIN(INITIAL)");
  BEGIN(INITIAL);
  return scan_throw(OTHERWISE);
}
	YY_BREAK
case 13:
YY_RULE_SETUP
{
  if (last_token != DOT)
  {
    ParserSingleInstance::popControlStatus();
    ParserSingleInstance::pushControlStatus(Parser::WithinCase);
  }
  DEBUG("BEGIN(INITIAL)");
  BEGIN(INITIAL);
  return scan_throw(CASE);
}
	YY_BREAK
case 14:
YY_RULE_SETUP
{
  if (last_token != DOT)
  {
    ParserSingleInstance::pushControlStatus(Parser::WithinFunction);
  }
  DEBUG("BEGIN(INITIAL)");
  BEGIN(INITIAL);
  return scan_throw(FUNCTION);
}
	YY_BREAK
case 15:
YY_RULE_SETUP
{
  if (last_token != DOT)
  {
    ParserSingleInstance::popControlStatus();
  }
  DEBUG("BEGIN(INITIAL)");
  BEGIN(INITIAL);
  return scan_throw(ENDFUNCTION);
}
	YY_BREAK
case 16:
YY_RULE_SETUP
{
  if (last_token != DOT)
  {
    ParserSingleInstance::pushControlStatus(Parser::WithinFor);
  }
  BEGIN(INITIAL);
  return scan_throw(FOR);
}
	YY_BREAK
case 17:
YY_RULE_SETUP
{
  if (last_token != DOT)
  {
    ParserSingleInstance::pushControlStatus(Parser::WithinWhile);
  }
  BEGIN(INITIAL);
  return scan_throw(WHILE);
}
	YY_BREAK
case 18:
YY_RULE_SETUP
{
  BEGIN(INITIAL);
  return scan_throw(DO);
}
	YY_BREAK
case 19:
YY_RULE_SETUP
{
  BEGIN(INITIAL);
  return scan_throw(BREAK);
}
	YY_BREAK
case 20:
YY_RULE_SETUP
{
  BEGIN(INITIAL);
  return scan_throw(CONTINUE);
}
	YY_BREAK
case 21:
YY_RULE_SETUP
{
  ParserSingleInstance::pushControlStatus(Parser::WithinTry);
  BEGIN(INITIAL);
  return scan_throw(TRY);
}
	YY_BREAK
case 22:
YY_RULE_SETUP
{
  // Pop to step out TRY
  ParserSingleInstance::popControlStatus();
  ParserSingleInstance::pushControlStatus(Parser::WithinCatch);
  BEGIN(INITIAL);
  return scan_throw(CATCH);
}
	YY_BREAK
case 23:
YY_RULE_SETUP
{
  BEGIN(INITIAL);
  return scan_throw(RETURN);
}
	YY_BREAK
case 24:
YY_RULE_SETUP
{
  BEGIN(INITIAL);
  return scan_throw(RETURN);
}
	YY_BREAK
case 25:
/* rule 25 can match eol */
YY_RULE_SETUP
{
  DEBUG("BEGIN(BEGINID)");
  BEGIN(BEGINID);
}
	YY_BREAK
case 26:
YY_RULE_SETUP
{
  wchar_t *pwText = to_wide_string(yytext);
  if (yytext != NULL && pwText == NULL)
  {
    std::string str = "Can\'t convert \'";
    str += yytext;
    str += "\' to UTF-8";
    BEGIN(INITIAL);
    yyerror(str);
    return scan_throw(FLEX_ERROR);
  }
  yylval.str = new std::wstring(pwText);
  FREE(pwText);
  types::InternalType * pIT = symbol::Context::getInstance()->get(symbol::Symbol(*yylval.str));
  if (pIT && pIT->isCallable() && ParserSingleInstance::getControlStatus() != Parser::WithinArguments)
  {
    DEBUG("BEGIN(SHELLMODE)");
    BEGIN(SHELLMODE);
  }
  else
  {
    DEBUG("BEGIN(INITIAL)");
    BEGIN(INITIAL);
  }
  #ifdef TOKENDEV
  std::cout << "--> [DEBUG] ID : " << yytext << std::endl;
  #endif
  return scan_throw(ID);
}
	YY_BREAK
case 27:
YY_RULE_SETUP
return scan_throw(NOT);
	YY_BREAK
case 28:
YY_RULE_SETUP
return scan_throw(DOLLAR);
	YY_BREAK
case 29:
YY_RULE_SETUP
{
  ParserSingleInstance::pushControlStatus(Parser::WithinLambda);
  lambda_levels.push(0);
  return scan_throw(ARROW);
}
	YY_BREAK
case 30:
YY_RULE_SETUP
return scan_throw(SHARP);
	YY_BREAK
case 31:
YY_RULE_SETUP
return scan_throw(BOOLTRUE);
	YY_BREAK
case 32:
YY_RULE_SETUP
return scan_throw(BOOLFALSE);
	YY_BREAK
case 33:
YY_RULE_SETUP
return scan_throw(AND);
	YY_BREAK
case 34:
YY_RULE_SETUP
return scan_throw(ANDAND);
	YY_BREAK
case 35:
YY_RULE_SETUP
return scan_throw(OR);
	YY_BREAK
case 36:
YY_RULE_SETUP
return scan_throw(OROR);
	YY_BREAK
case 37:
YY_RULE_SETUP
{
  if (lambda_levels.size()) {
    ++lambda_levels.top();
  }
  return scan_throw(LPAREN);
}
	YY_BREAK
case 38:
YY_RULE_SETUP
{
  if (lambda_levels.size()) {
    --lambda_levels.top();
    if (lambda_levels.top() == 0) {
      ParserSingleInstance::popControlStatus();
      lambda_levels.pop();
    }
  }
  return scan_throw(RPAREN);
}
	YY_BREAK
case 39:
YY_RULE_SETUP
{
  scan_step();
  return scan_throw(SEMI);
}
	YY_BREAK
case 40:
YY_RULE_SETUP
{
  scan_step();
  return scan_throw(COMMA);
}
	YY_BREAK
case 41:
YY_RULE_SETUP
return scan_throw(COLON);
	YY_BREAK
case 42:
YY_RULE_SETUP
{
  yy_push_state(MATRIX);
  paren_levels.push(0);
  ParserSingleInstance::pushControlStatus(Parser::WithinCell);
  return scan_throw(LBRACE);
}
	YY_BREAK
case 43:
YY_RULE_SETUP
return scan_throw(RBRACE);
	YY_BREAK
case 44:
YY_RULE_SETUP
return scan_throw(DOTQUOTE);
	YY_BREAK
case 45:
YY_RULE_SETUP
return scan_throw(DOTTIMES);
	YY_BREAK
case 46:
YY_RULE_SETUP
return scan_throw(DOTRDIVIDE);
	YY_BREAK
case 47:
YY_RULE_SETUP
return scan_throw(DOTLDIVIDE);
	YY_BREAK
case 48:
YY_RULE_SETUP
return scan_throw(DOTPOWER);
	YY_BREAK
case 49:
YY_RULE_SETUP
return scan_throw(MINUS);
	YY_BREAK
case 50:
YY_RULE_SETUP
return scan_throw(PLUS);
	YY_BREAK
case 51:
YY_RULE_SETUP
return scan_throw(TIMES);
	YY_BREAK
case 52:
YY_RULE_SETUP
return scan_throw(RDIVIDE);
	YY_BREAK
case 53:
YY_RULE_SETUP
return scan_throw(LDIVIDE);
	YY_BREAK
case 54:
YY_RULE_SETUP
return scan_throw(POWER);
	YY_BREAK
case 55:
YY_RULE_SETUP
return scan_throw(KRONTIMES);
	YY_BREAK
case 56:
YY_RULE_SETUP
return scan_throw(KRONRDIVIDE);
	YY_BREAK
case 57:
YY_RULE_SETUP
return scan_throw(KRONLDIVIDE);
	YY_BREAK
case 58:
/* rule 58 can match eol */
YY_RULE_SETUP
{
  unput(yytext[yyleng - 1]);
  return scan_throw(CONTROLTIMES);
}
	YY_BREAK
case 59:
/* rule 59 can match eol */
YY_RULE_SETUP
{
  unput(yytext[yyleng - 1]);
  return scan_throw(CONTROLRDIVIDE);
}
	YY_BREAK
case 60:
/* rule 60 can match eol */
YY_RULE_SETUP
{
  unput(yytext[yyleng - 1]);
  return scan_throw(CONTROLLDIVIDE);
}
	YY_BREAK
case 61:
YY_RULE_SETUP
return scan_throw(EQ);
	YY_BREAK
case 62:
YY_RULE_SETUP
return scan_throw(NE);
	YY_BREAK
case 63:
YY_RULE_SETUP
return scan_throw(LT);
	YY_BREAK
case 64:
YY_RULE_SETUP
return scan_throw(GT);
	YY_BREAK
case 65:
YY_RULE_SETUP
return scan_throw(LE);
	YY_BREAK
case 66:
YY_RULE_SETUP
return scan_throw(GE);
	YY_BREAK
case 67:
YY_RULE_SETUP
return scan_throw(ASSIGN);
	YY_BREAK
case 68:
YY_RULE_SETUP
{
  DEBUG("yy_push_state(MATRIX)");
  yy_push_state(MATRIX);
  paren_levels.push(0);
  ParserSingleInstance::pushControlStatus(Parser::WithinMatrix);
  return scan_throw(LBRACK);
}
	YY_BREAK
case 69:
YY_RULE_SETUP
return scan_throw(RBRACK);
	YY_BREAK
case 70:
YY_RULE_SETUP
return scan_throw(DOT);
	YY_BREAK
case 71:
YY_RULE_SETUP
{
  ParserSingleInstance::pushControlStatus(Parser::WithinDots);
  yy_push_state(LINEBREAK);
}
	YY_BREAK
case 72:
YY_RULE_SETUP
{
  yylval.number = atof(yytext);
#ifdef TOKENDEV
  std::cout << "--> [DEBUG] INTEGER : " << yytext << std::endl;
#endif
//  scan_step();
  return scan_throw(VARINT);
}
	YY_BREAK
case 73:
YY_RULE_SETUP
{
  scan_exponent_convert(yytext);
  yylval.number = atof(yytext);
#ifdef TOKENDEV
  std::cout << "--> [DEBUG] FLOATING : " << yytext << std::endl;
#endif
  //scan_step();
  return scan_throw(VARFLOAT);
}
	YY_BREAK
case 74:
YY_RULE_SETUP
{
  yylval.number = atof(yytext);
#ifdef TOKENDEV
  std::cout << "--> [DEBUG] FLOATING : " << yytext << std::endl;
#endif
  //scan_step();
  return scan_throw(VARFLOAT);
}
	YY_BREAK
case 75:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{
  yylval.number = atof(yytext);
#ifdef TOKENDEV
  std::cout << "--> [DEBUG] NUMBER WITH DOT AS LAST CHARACTER : " << yytext << std::endl;
#endif
//  scan_step();
  unput('.');
  yylloc.last_column--;
  return scan_throw(NUM);
}
	YY_BREAK
case 76:
YY_RULE_SETUP
{
  yylval.number = atof(yytext);
#ifdef TOKENDEV
  std::cout << "--> [DEBUG] NUMBER : " << yytext << std::endl;
#endif
//  scan_step();
  return scan_throw(NUM);
}
	YY_BREAK
case 77:
YY_RULE_SETUP
{
  yylval.number = atof(yytext);
#ifdef TOKENDEV
  std::cout << "--> [DEBUG] LITTLE : " << yytext << std::endl;
#endif
//  scan_step();
  return scan_throw(NUM);
}
	YY_BREAK
case 78:
YY_RULE_SETUP
{
  wchar_t *pwText = to_wide_string(yytext);
  if (yytext != NULL && pwText == NULL)
  {
    std::string str = "Can\'t convert \'";
    str += yytext;
    str += "\' to UTF-8";
    BEGIN(INITIAL);
    yyerror(str);
    return scan_throw(FLEX_ERROR);
  }
  yylval.str = new std::wstring(pwText);
  FREE(pwText);
#ifdef TOKENDEV
  std::cout << "--> [DEBUG] ID : " << yytext << std::endl;
#endif
//  scan_step();
  return scan_throw(ID);
}
	YY_BREAK
case 79:
YY_RULE_SETUP
{
  yyerror("syntax error, unexpected identifier, expecting end of file");
  return scan_throw(FLEX_ERROR);
}
	YY_BREAK
case 80:
YY_RULE_SETUP
{
  yylval.comment = new std::wstring();
  comment_level = 1;
  ParserSingleInstance::pushControlStatus(Parser::WithinBlockComment);
  yy_push_state(REGIONCOMMENT);
}
	YY_BREAK
case 81:
YY_RULE_SETUP
{
  pstBuffer.clear();
  yy_push_state(LINECOMMENT);
}
	YY_BREAK
case 82:
YY_RULE_SETUP
{
  pstBuffer.clear();
  str_opener_column = yylloc.first_column;
  #ifdef TOKENDEV
    std::cout << "--> Push State DOUBLESTRING" << std::endl;
  #endif
  yy_push_state(DOUBLESTRING);
}
	YY_BREAK
case 83:
YY_RULE_SETUP
{
  /*
  ** Can not be Matrix Transposition
  ** Pushing SIMPLESTRING
  */
  pstBuffer.clear();
  str_opener_column = yylloc.first_column;
  #ifdef TOKENDEV
  std::cout << "--> Push State SIMPLESTRING" << std::endl;
  #endif
  yy_push_state(SIMPLESTRING);
}
	YY_BREAK
case 84:
YY_RULE_SETUP
{
  /*
  ** Matrix Transposition special behaviour
  ** ID' []' toto()' are transposition call
  */
  if (last_token == ID
      || last_token == RBRACK
      || last_token == RPAREN
      || last_token == RBRACE
      || last_token == VARINT
      || last_token == VARFLOAT
      || last_token == NUM
      || last_token == BOOLTRUE
      || last_token == BOOLFALSE)
  {
    #ifdef TOKENDEV
    std::cout << "--> QUOTE" << std::endl;
    #endif
    return scan_throw(QUOTE);
  }
  else
  {
    pstBuffer.clear();
    str_opener_column = yylloc.first_column;
    #ifdef TOKENDEV
    std::cout << "--> Push State SIMPLESTRING" << std::endl;
    #endif
    yy_push_state(SIMPLESTRING);
  }
}
	YY_BREAK
case 85:
YY_RULE_SETUP
scan_step();
	YY_BREAK
case 86:
/* rule 86 can match eol */
YY_RULE_SETUP
{
  yylloc.last_line += 1;
  yylloc.last_column = 1;
  scan_step();
  if (last_token != EOL) {
    return scan_throw(EOL);
  }
}
	YY_BREAK
case 87:
/* rule 87 can match eol */
YY_RULE_SETUP
{
  yylloc.last_line += 1;
  yylloc.last_column = 1;
  scan_step();
  if (last_token != EOL)
  {
    return scan_throw(EOL);
  }
  scan_throw(EOL);
}
	YY_BREAK
case 88:
/* rule 88 can match eol */
YY_RULE_SETUP
{
  yylloc.last_line += 2;
  yylloc.last_column = 1;
  scan_step();
  if (last_token != EOL)
  {
    return scan_throw(EOL);
  }
  scan_throw(EOL);
}
	YY_BREAK
case 89:
YY_RULE_SETUP
{
    std::string str = "Unexpected token \'";
    str += yytext;
    str += "\'";
    BEGIN(INITIAL);
    yyerror(str);
    return scan_throw(FLEX_ERROR);
}
	YY_BREAK

case 90:
YY_RULE_SETUP
{
    ++paren_levels.top();
    return scan_throw(LPAREN);
  }
	YY_BREAK
case 91:
YY_RULE_SETUP
{
    --paren_levels.top();
    return scan_throw(RPAREN);
  }
	YY_BREAK
case 92:
YY_RULE_SETUP
{
    unput(yytext[yyleng - 1]);
    --yylloc.last_column;
    if (last_token == ID
        || last_token == RPAREN
        || last_token == QUOTE
        || last_token == VARINT
        || last_token == VARFLOAT
        || last_token == NUM)
    {
      return scan_throw(COMMA);
    }
  }
	YY_BREAK
case 93:
YY_RULE_SETUP
return scan_throw(COLON);
	YY_BREAK
case 94:
/* rule 94 can match eol */
YY_RULE_SETUP
{
    yylloc.last_line += 1;
    yylloc.last_column = 1;
    scan_step();
    if(last_token != DOTS && last_token != EOL)
    {
      return scan_throw(EOL);
    }
    scan_throw(EOL);
  }
	YY_BREAK
case 95:
YY_RULE_SETUP
{
    unput('\'');
    yylloc.last_column--;
    if (last_token == ID
        || last_token == RPAREN
        || last_token == QUOTE)
    {
      return scan_throw(COMMA);
    }
  }
	YY_BREAK
case 96:
YY_RULE_SETUP
{
    DEBUG("yy_pop_state()");
    yy_pop_state();
    paren_levels.pop();
    ParserSingleInstance::popControlStatus();
    return scan_throw(RBRACK);
  }
	YY_BREAK
case 97:
YY_RULE_SETUP
{
    yy_pop_state();
    paren_levels.pop();
    ParserSingleInstance::popControlStatus();
    return scan_throw(RBRACE);
  }
	YY_BREAK
case 98:
case 99:
YY_RULE_SETUP
{
    // _+_ is always meaning a PLUS token
    // + alone is a plus if and only if it does not
    // fall into the {spaces}{plus} rule (in matrices space is coding)
    // as Flex is greedy the {plus} rule is only applied
    // if no {spaces}{plus} is found
    // Examples:
    // ========
    // [1 + 2 3] must be understood as [(1+2), 3]
    // [1 +2 3] must be understood as [1, 2, 3]
    // [1 +...
    // 2] must be understood as [(1+2)]
    return scan_throw(PLUS);
  }
	YY_BREAK
case 100:
case 101:
YY_RULE_SETUP
{
    // _-_ is always meaning a MINUS token
    // - alone is a MINUS only if and only if it does not
    // fall into the {spaces}{minus} rule (in matrices space is coding)
    // as Flex is greedy the {minus} rule is only applied
    // if no {spaces}{minus} is found
    // Examples:
    // ========
    // [1 - 2 3] must be understood as [(1-2), 3]
    // [1 -2 3] must be understood as [1, -2, 3]
    // [1 -...
    // 2] must be understood as [(1-2)]
    return scan_throw(MINUS);
  }
	YY_BREAK
case 102:
YY_RULE_SETUP
{
    // This rule is made to take into account the coding spaces in matrices.
    // It is important to distinguish between a space coding a matrix column separator
    // and a simple non coding space around the PLUS operator
    // Examples
    // ========
    // [a + b] == [(a + b)]
    // but [a +b] == [a, +b] and plus here is unary and is not removed, as unary plus
    // is not necessary defined for all data types (https://gitlab.com/scilab/scilab/-/issues/15850)
    // A priori, the space *is* coding
    unput('+');
    yylloc.last_column--;
    if (last_token != LBRACK
       && last_token != EOL
       && last_token != SEMI
       && last_token != COMMA
       && last_token != DOTTIMES
       && last_token != DOTRDIVIDE
       && last_token != DOTLDIVIDE
       && last_token != DOTPOWER
       && last_token != MINUS
       && last_token != PLUS
       && last_token != TIMES
       && last_token != RDIVIDE
       && last_token != LDIVIDE
       && last_token != POWER
       && last_token != KRONTIMES
       && last_token != KRONRDIVIDE
       && last_token != KRONLDIVIDE
       && last_token != EQ
       && last_token != NE
       && last_token != LT
       && last_token != GT
       && last_token != LE
       && last_token != GE
      && paren_levels.top() == 0)
    {
      return scan_throw(COMMA);
    }
  }
	YY_BREAK
case 103:
YY_RULE_SETUP
{
    // See {spaces}{plus} rule for the rationale
    unput('-');
    yylloc.last_column--;
    if (last_token != LBRACK
       && last_token != EOL
       && last_token != SEMI
       && last_token != COMMA
       && last_token != DOTTIMES
       && last_token != DOTRDIVIDE
       && last_token != DOTLDIVIDE
       && last_token != DOTPOWER
       && last_token != MINUS
       && last_token != PLUS
       && last_token != TIMES
       && last_token != RDIVIDE
       && last_token != LDIVIDE
       && last_token != POWER
       && last_token != KRONTIMES
       && last_token != KRONRDIVIDE
       && last_token != KRONLDIVIDE
       && last_token != EQ
       && last_token != NE
       && last_token != LT
       && last_token != GT
       && last_token != LE
       && last_token != GE
       && paren_levels.top() == 0)
    {
       return scan_throw(COMMA);
    }
  }
	YY_BREAK
case 104:
YY_RULE_SETUP
{
    std::string str = "Unexpected token \'";
    str += yytext;
    str += "\' within a matrix.";
    BEGIN(INITIAL);
    yyerror(str);
    return scan_throw(FLEX_ERROR);
  }
	YY_BREAK
/* {next} rules
   * ============
   * Scilab can perform a line continuation with the ..
   * In matrices as space may be coding extra care must be taken when parsing {next}
   * Some states must be preserved to parse next line and to revert to a proper state
   * after the ... // comments or ... \/* comments *\/
   */
case 105:
YY_RULE_SETUP
{
    // This rule is made to take into account a +... without spaces after plus
    // if one simply ignores the next a situation like this could arise
    // Example
    // =======
    // A = [1 +...
    // 2]
    //
    // what is meant by the user [1 +2] ? or [1 + 2]
    // simply ignoring the ... would yield the 1st situation [1, 2]
    // We consider this is NOT proper and instead that the user meant a binary plus
    // split is two lines
    // The same rationale applies to minus.

    linebreak_stored_space = FALSE; // no spaces before ...
    linebreak_stored_token = PLUS; // keep last token to restore
    ParserSingleInstance::pushControlStatus(Parser::WithinDots);
    yy_push_state(LINEBREAK);
    return scan_throw(PLUS);
  }
	YY_BREAK
case 106:
YY_RULE_SETUP
{
    // see {spaces}*{minus}{next} for the rationale

    linebreak_stored_space = FALSE; // no spaces before ...
    linebreak_stored_token = MINUS; // keep last token to restore
    ParserSingleInstance::pushControlStatus(Parser::WithinDots);
    yy_push_state(LINEBREAK);
    return scan_throw(MINUS);
  }
	YY_BREAK
case 107:
YY_RULE_SETUP
{
    // Store the state of the previously scanned token for next rule
    // Only considerations of coding spaces is important for the parser

    linebreak_stored_space = FALSE; // no spaces before ...
    linebreak_stored_token = last_token; // keep last token to restore state
    ParserSingleInstance::pushControlStatus(Parser::WithinDots);
    yy_push_state(LINEBREAK);
  }
	YY_BREAK
case 108:
YY_RULE_SETUP
{
    // Store the state of the previously scanned token for next rule
    // Only considerations of coding spaces is important for the parser

    linebreak_stored_space = TRUE; // no spaces before ...
    linebreak_stored_token = last_token; // keep last token to restore state
    ParserSingleInstance::pushControlStatus(Parser::WithinDots);
    yy_push_state(LINEBREAK);
  }
	YY_BREAK
case YY_STATE_EOF(MATRIX):
{
    yy_pop_state();
    paren_levels.pop();
  }
	YY_BREAK

case 109:
/* rule 109 can match eol */
YY_RULE_SETUP
{
    yylloc.last_line += 1;
    yylloc.last_column = 1;
    scan_step();
    last_token = linebreak_stored_token;
    if (linebreak_stored_space)
    {
      // This is important to restore coding spaces as if ... was not present
      unput(' ');
      linebreak_stored_space = FALSE;
    }
    yy_pop_state();
    ParserSingleInstance::popControlStatus();
  }
	YY_BREAK
case 110:
YY_RULE_SETUP
{
    yylval.comment = new std::wstring();
    comment_level = 1;
    ParserSingleInstance::pushControlStatus(Parser::WithinBlockComment);
    yy_push_state(REGIONCOMMENT);
  }
	YY_BREAK
case 111:
YY_RULE_SETUP
{
    scan_throw(DOTS);
    pstBuffer.clear();
    yy_push_state(LINECOMMENT);
  }
	YY_BREAK
case 112:
YY_RULE_SETUP
{
    /* Do nothing... */
  }
	YY_BREAK
case YY_STATE_EOF(LINEBREAK):
{
    yy_pop_state();
  }
	YY_BREAK
case 113:
YY_RULE_SETUP
{
    // The following case is not handled by the parser
    // a line of code ... /* some multiline
    // comments */ continued here;
    // without the special case telling we are after comments
    // will generate the error as follows:

    // Any characters after ... yields to an error
    std::string str = "Unexpected token \'";
    str += yytext;
    str += "\' after line break with .. or ...";
    yy_pop_state();
    ParserSingleInstance::popControlStatus();
    BEGIN(INITIAL);
    yyerror(str);
    return scan_throw(FLEX_ERROR);
  }
	YY_BREAK

case 114:
/* rule 114 can match eol */
YY_RULE_SETUP
{
    //yylloc.last_line += 1;
    //yylloc.last_column = 1;
    //scan_step();
    yy_pop_state();
    // loop to manage \n and \r\n
    for (int i = yyleng - 1 ; i >= 0 ; --i)
    {
      //std::cerr << "Unputting i = {" << i << "}" << std::endl;
      //std::cerr << "Unputting {" << yytext[i] << "}" << std::endl;
      unput(yytext[i]);
      yylloc.last_column--;
    }
    // yylloc.first_column is the location of the {newline}
    // remove the size of the comment to have proper location
    // as for <<EOF>> '//' is not part of the comment location
    yylloc.first_column -= pstBuffer.length();

    /*
    ** To forgot comments after lines break
    */
    if (last_token != DOTS)
    {
      //std::cerr << "pstBuffer = {" << *pstBuffer << "}" << std::endl;
      //std::cerr << "pstBuffer->c_str() = {" << pstBuffer->c_str() << "}" << std::endl;
      wchar_t *pwstBuffer = to_wide_string(pstBuffer.c_str());
      //std::wcerr << L"pwstBuffer = W{" << pwstBuffer << L"}" << std::endl;
      if (pstBuffer.c_str() != NULL && pwstBuffer == NULL)
      {
        pstBuffer.clear();
        std::string str = "Can\'t convert \'";
        str += pstBuffer.c_str();
        str += "\' to UTF-8";
        BEGIN(INITIAL);
        yyerror(str);
        return scan_throw(FLEX_ERROR);
      }
      yylval.comment = new std::wstring(pwstBuffer);
      pstBuffer.clear();
      FREE (pwstBuffer);
      return scan_throw(COMMENT);
    }
    else
    {
      pstBuffer.clear();
    }
  }
	YY_BREAK
case YY_STATE_EOF(LINECOMMENT):
{
    yy_pop_state();
    wchar_t *pwstBuffer = to_wide_string(pstBuffer.c_str());
    if (pstBuffer.c_str() != NULL && pwstBuffer == NULL)
    {
      pstBuffer.clear();
      std::string str = "Can\'t convert \'";
      str += pstBuffer.c_str();
      str += "\' to UTF-8";
      BEGIN(INITIAL);
      yyerror(str);
      return scan_throw(FLEX_ERROR);
    }
    yylval.comment = new std::wstring(pwstBuffer);
    pstBuffer.clear();
    FREE (pwstBuffer);
    return scan_throw(COMMENT);
  }
	YY_BREAK
case 115:
YY_RULE_SETUP
{
      // Put the char in a temporary CHAR buffer to go through UTF-8 trouble
      // only translate to WCHAR_T when popping state.
      pstBuffer += yytext;
  }
	YY_BREAK

case 116:
YY_RULE_SETUP
{
    --comment_level;
    if (comment_level == 0)
    {
      ParserSingleInstance::popControlStatus();
      yy_pop_state();
      //return scan_throw(BLOCKCOMMENT);
    }
  }
	YY_BREAK
case 117:
YY_RULE_SETUP
{
    ++comment_level;
    yy_push_state(REGIONCOMMENT);
  }
	YY_BREAK
case 118:
/* rule 118 can match eol */
YY_RULE_SETUP
{
    yylloc.last_line += 1;
    yylloc.last_column = 1;
    scan_step();
    *yylval.comment += L"\n";
  }
	YY_BREAK
case 119:
case 120:
YY_RULE_SETUP
{
      wchar_t *pwText = to_wide_string(yytext);
      *yylval.comment += std::wstring(pwText);
      FREE(pwText);
  }
	YY_BREAK
case YY_STATE_EOF(REGIONCOMMENT):
{
      yy_pop_state();
//    std::string str = "unexpected end of file in a comment";
//    scan_error(str);
  }
	YY_BREAK

case 121:
YY_RULE_SETUP
pstBuffer += "\"";
	YY_BREAK
case 122:
YY_RULE_SETUP
pstBuffer += "'";
	YY_BREAK
case 123:
YY_RULE_SETUP
pstBuffer += "\"";
	YY_BREAK
case 124:
YY_RULE_SETUP
pstBuffer += "'";
	YY_BREAK
case 125:
YY_RULE_SETUP
{
    yy_pop_state();
    //scan_step();
    wchar_t *pwstBuffer = to_wide_string(pstBuffer.c_str());
    if (pstBuffer.c_str() != NULL && pwstBuffer == NULL)
    {
      pstBuffer.clear();
      std::string str = "Can\'t convert \'";
      str += pstBuffer.c_str();
      str += "\' to UTF-8";
      BEGIN(INITIAL);
      yyerror(str);
      return scan_throw(FLEX_ERROR);
    }
    yylval.str = new std::wstring(pwstBuffer);
    pstBuffer.clear();
    FREE(pwstBuffer);
    yylloc.first_column = str_opener_column;
    return scan_throw(STR);
  }
	YY_BREAK
case 126:
YY_RULE_SETUP
{
    pstBuffer.clear();
    BEGIN(INITIAL);
    yyerror("Heterogeneous string detected, starting with \' and ending with \".");
    return scan_throw(FLEX_ERROR);
  }
	YY_BREAK
case 127:
/* rule 127 can match eol */
YY_RULE_SETUP
{
    pstBuffer.clear();
    yylloc.last_line += 1;
    yylloc.last_column = 1;
    BEGIN(INITIAL);
    ParserSingleInstance::popControlStatus();
    yyerror("Unexpected end of line in a string.");
    return scan_throw(FLEX_ERROR);
  }
	YY_BREAK
case YY_STATE_EOF(SIMPLESTRING):
{
    pstBuffer.clear();
    BEGIN(INITIAL);
    yyerror("Unexpected end of file in a string.");
    return scan_throw(FLEX_ERROR);
  }
	YY_BREAK
case 128:
case 129:
YY_RULE_SETUP
{
    //scan_step();
    pstBuffer += yytext;
  }
	YY_BREAK

case 130:
YY_RULE_SETUP
pstBuffer += "\"";
	YY_BREAK
case 131:
YY_RULE_SETUP
pstBuffer += "'";
	YY_BREAK
case 132:
YY_RULE_SETUP
pstBuffer += "\"";
	YY_BREAK
case 133:
YY_RULE_SETUP
pstBuffer += "'";
	YY_BREAK
case 134:
YY_RULE_SETUP
{
    yy_pop_state();
    //scan_step();
    wchar_t *pwstBuffer = to_wide_string(pstBuffer.c_str());
    if (pstBuffer.c_str() != NULL && pwstBuffer == NULL)
    {
      pstBuffer.clear();
      std::string str = "Can\'t convert \'";
      str += pstBuffer.c_str();
      str += "\' to UTF-8";
      BEGIN(INITIAL);
      yyerror(str);
      return scan_throw(FLEX_ERROR);
    }
    yylval.str = new std::wstring(pwstBuffer);
    pstBuffer.clear();
    FREE(pwstBuffer);
    yylloc.first_column = str_opener_column;
    return scan_throw(STR);
  }
	YY_BREAK
case 135:
YY_RULE_SETUP
{
    pstBuffer.clear();
    BEGIN(INITIAL);
    yyerror("Heterogeneous string detected, starting with \" and ending with \'.");
    return scan_throw(FLEX_ERROR);
  }
	YY_BREAK
case 136:
/* rule 136 can match eol */
YY_RULE_SETUP
{
    pstBuffer.clear();
    yylloc.last_line += 1;
    yylloc.last_column = 1;
    ParserSingleInstance::popControlStatus();
    BEGIN(INITIAL);
    yyerror("Unexpected end of line in a string.");
    return scan_throw(FLEX_ERROR);
  }
	YY_BREAK
case YY_STATE_EOF(DOUBLESTRING):
{
    pstBuffer.clear();
    BEGIN(INITIAL);
    yyerror("Unexpected end of file in a string.");
    return scan_throw(FLEX_ERROR);
  }
	YY_BREAK
case 137:
case 138:
YY_RULE_SETUP
{
    //scan_step();
    pstBuffer += yytext;
  }
	YY_BREAK

case 139:
YY_RULE_SETUP
{
        if (last_token == ID)
        {
          scan_throw(SPACES);
          //return ID;
        }
    }
	YY_BREAK
case 140:
YY_RULE_SETUP
{
      BEGIN(INITIAL);
      scan_step();
      return scan_throw(SEMI);
    }
	YY_BREAK
case 141:
YY_RULE_SETUP
{
      BEGIN(INITIAL);
      scan_step();
      return scan_throw(COMMA);
    }
	YY_BREAK
case 142:
/* rule 142 can match eol */
YY_RULE_SETUP
{
      BEGIN(INITIAL);
      yylloc.last_line += 1;
      yylloc.last_column = 1;
      scan_step();
      return scan_throw(EOL);
    }
	YY_BREAK
case 143:
YY_RULE_SETUP
{
      if (last_token == STR || last_token == SPACES)
      {
        wchar_t *pwText = to_wide_string(yytext);
        yylval.str = new std::wstring(pwText);
        FREE(pwText);
        return scan_throw(STR);
      }
      else
      {
        BEGIN(INITIAL);
        return scan_throw(ASSIGN);
      }
    }
	YY_BREAK
case 144:
YY_RULE_SETUP
{
      if (last_token == STR || last_token == SPACES)
      {
        wchar_t *pwText = to_wide_string(yytext);
        yylval.str = new std::wstring(pwText);
        FREE(pwText);
        return scan_throw(STR);
      }
      else
      {
        BEGIN(INITIAL);
        return scan_throw(LPAREN);
      }
    }
	YY_BREAK
case 145:
YY_RULE_SETUP
{
        if (last_token == STR || last_token == SPACES)
        {
          wchar_t *pwText = to_wide_string(yytext);
          yylval.str = new std::wstring(pwText);
          FREE(pwText);
          return scan_throw(STR);
        }
        else
        {
          BEGIN(INITIAL);
          return scan_throw(LT);
        }
    }
	YY_BREAK
case 146:
YY_RULE_SETUP
{
        if (last_token == STR || last_token == SPACES)
        {
          wchar_t *pwText = to_wide_string(yytext);
          yylval.str = new std::wstring(pwText);
          FREE(pwText);
          return scan_throw(STR);
        }
        else
        {
          BEGIN(INITIAL);
          return scan_throw(GT);
        }
    }
	YY_BREAK
case 147:
YY_RULE_SETUP
{
        if (last_token == STR || last_token == SPACES)
        {
          wchar_t *pwText = to_wide_string(yytext);
          yylval.str = new std::wstring(pwText);
          FREE(pwText);
          return scan_throw(STR);
        }
        else
        {
          BEGIN(INITIAL);
          return scan_throw(NOT);
        }
    }
	YY_BREAK
case 148:
YY_RULE_SETUP
{
      wchar_t *pwText = to_wide_string(yytext);
      yylval.str = new std::wstring(pwText);
      FREE(pwText);
      return scan_throw(STR);
    }
	YY_BREAK
case YY_STATE_EOF(SHELLMODE):
{
      BEGIN(INITIAL);
    }
	YY_BREAK

case 149:
YY_RULE_SETUP
ECHO;
	YY_BREAK
			case YY_STATE_EOF(INITIAL):
			case YY_STATE_EOF(BEGINID):
				yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = (yytext_ptr);
	int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr) - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if (((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    
	yy_current_state = (yy_start);
	yy_current_state += YY_AT_BOL();

	(yy_state_ptr) = (yy_state_buf);
	*(yy_state_ptr)++ = yy_current_state;

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 948 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		*(yy_state_ptr)++ = yy_current_state;
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	int yy_is_jam;
    
	YY_CHAR yy_c = 1;
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 948 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 947);
	if ( ! yy_is_jam )
		*(yy_state_ptr)++ = yy_current_state;

		return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT

    static void yyunput (int c, char * yy_bp )
{
	char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		int number_to_move = (yy_n_chars) + 2;
		char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = (int) YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (int) ((yy_c_buf_p) - (yytext_ptr));
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return 0;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void yy_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2)  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf  );

	yyfree( (void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return NULL;

	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = (int) (size - 2);	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = NULL;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (const char * yystr )
{
    
	return yy_scan_bytes( yystr, (int) strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (const char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = (yy_size_t) (_yybytes_len + 2);
	buf = (char *) yyalloc( n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

    static void yy_push_state (int  _new_state )
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_size_t) (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) yyalloc( new_size  );

		else
			(yy_start_stack) = (int *) yyrealloc(
					(void *) (yy_start_stack), new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(_new_state);
}

    static void yy_pop_state  (void)
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

    static int yy_top_state  (void)
{
    	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yynoreturn yy_fatal_error (const char* msg )
{
			fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int yyget_lineno  (void)
{
    
    return yylineno;
}

/** Get the input stream.
 * 
 */
FILE *yyget_in  (void)
{
        return yyin;
}

/** Get the output stream.
 * 
 */
FILE *yyget_out  (void)
{
        return yyout;
}

/** Get the length of the current token.
 * 
 */
int yyget_leng  (void)
{
        return yyleng;
}

/** Get the current token.
 * 
 */

char *yyget_text  (void)
{
        return yytext;
}

/** Set the current line number.
 * @param _line_number line number
 * 
 */
void yyset_lineno (int  _line_number )
{
    
    yylineno = _line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * 
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  _in_str )
{
        yyin = _in_str ;
}

void yyset_out (FILE *  _out_str )
{
        yyout = _out_str ;
}

int yyget_debug  (void)
{
        return yy_flex_debug;
}

void yyset_debug (int  _bdebug )
{
        yy_flex_debug = _bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = NULL;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = NULL;
    (yy_init) = 0;
    (yy_start) = 0;

    (yy_start_stack_ptr) = 0;
    (yy_start_stack_depth) = 0;
    (yy_start_stack) =  NULL;

    (yy_state_buf) = 0;
    (yy_state_ptr) = 0;
    (yy_full_match) = 0;
    (yy_lp) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = NULL;
    yyout = NULL;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer( YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Destroy the start condition stack. */
        yyfree( (yy_start_stack)  );
        (yy_start_stack) = NULL;

    yyfree ( (yy_state_buf) );
    (yy_state_buf)  = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n )
{
		
	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s )
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
			return malloc(size);
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
		
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void yyfree (void * ptr )
{
			free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

int scan_throw(int token) {
  last_token = token;
#ifdef DEV
  std::cout << "--> [DEBUG] TOKEN : " << token << " - " << token_to_string(token) << std::endl;
#endif
  return token;
}

int get_last_token() {
  return last_token;
}

void scan_step() {
  yylloc.first_line = yylloc.last_line;
  yylloc.first_column = yylloc.last_column;
}

/*
** convert floating numbers to C standard
** 1.2d-3 -> 1.2e-3
** 1.2D-3 -> 1.2e-3
*/
void scan_exponent_convert(char *in)
{
  for (; *in != 'd' && *in != 'D'; ++in);
  *in = 'e';
}

#ifdef _MSC_VER
int isatty (int desc)
{
  return 0;
}
#endif

#ifdef DEV
std::string token_to_string(int token)
{
  std::string str;
  switch(token)
  {
    case AND :                   str = "AND"; break;
    case ASSIGN :                str = "ASSIGN"; break;
    case BOOLFALSE :             str = "BOOLFALSE"; break;
    case BOOLTRUE :              str = "BOOLTRUE"; break;
    case BREAK :                 str = "BREAK"; break;
    case CASE :                  str = "CASE"; break;
    case CATCH :                 str = "CATCH"; break;
    case COLON :                 str = "COLON"; break;
    case COMMA :                 str = "COMMA"; break;
    case COMMENT :               str = "COMMENT"; break;
    case CONTINUE :              str = "CONTINUE"; break;
    case CONTROLLDIVIDE :        str = "CONTROLLDIVIDE"; break;
    case CONTROLRDIVIDE :        str = "CONTROLRDIVIDE"; break;
    case CONTROLTIMES :          str = "CONTROLTIMES"; break;
    case DO :                    str = "DO"; break;
    case DOLLAR :                str = "DOLLAR"; break;
    case DOT :                   str = "DOT"; break;
    case DOTLDIVIDE :            str = "DOTLDIVIDE"; break;
    case DOTPOWER :              str = "DOTPOWER"; break;
    case DOTQUOTE :              str = "DOTQUOTE"; break;
    case DOTRDIVIDE :            str = "DOTRDIVIDE"; break;
    case DOTS :                  str = "DOTS"; break;
    case DOTTIMES :              str = "DOTTIMES"; break;
    case ELSE :                  str = "ELSE"; break;
    case ELSEIF :                str = "ELSEIF"; break;
    case END :                   str = "END"; break;
    case ENDFUNCTION :           str = "ENDFUNCTION"; break;
    case EOL :                   str = "EOL"; break;
    case EQ :                    str = "EQ"; break;
    case FLEX_ERROR :            str = "FLEX_ERROR"; break;
    case FOR :                   str = "FOR"; break;
    case FUNCTION :              str = "FUNCTION"; break;
    case GE :                    str = "GE"; break;
    case GT :                    str = "GT"; break;
    case ID :                    str = "ID"; break;
    case IF :                    str = "IF"; break;
    case KRONLDIVIDE :           str = "KRONLDIVIDE"; break;
    case KRONRDIVIDE :           str = "KRONRDIVIDE"; break;
    case KRONTIMES :             str = "KRONTIMES"; break;
    case LBRACE :                str = "LBRACE"; break;
    case LBRACK :                str = "LBRACK"; break;
    case LDIVIDE :               str = "LDIVIDE"; break;
    case LE :                    str = "LE"; break;
    case LPAREN :                str = "LPAREN"; break;
    case LT :                    str = "LT"; break;
    case MINUS :                 str = "MINUS"; break;
    case NE :                    str = "NE"; break;
    case NOT :                   str = "NOT"; break;
    case NUM :                   str = "NUM"; break;
    case OR :                    str = "OR"; break;
    case OROR :                  str = "OROR"; break;
    case OTHERWISE :             str = "OTHERWISE"; break;
    case PLUS :                  str = "PLUS"; break;
    case POWER :                 str = "POWER"; break;
    case QUOTE :                 str = "QUOTE"; break;
    case RBRACE :                str = "RBRACE"; break;
    case RBRACK :                str = "RBRACK"; break;
    case RDIVIDE :               str = "RDIVIDE"; break;
    case RETURN :                str = "RETURN"; break;
    case RPAREN :                str = "RPAREN"; break;
    case SELECT :                str = "SELECT"; break;
    case SEMI :                  str = "SEMI"; break;
    case SPACES :                str = "SPACES"; break;
    case STR :                   str = "STR"; break;
    case SWITCH :                str = "SWITCH"; break;
    case THEN :                  str = "THEN"; break;
    case TIMES :                 str = "TIMES"; break;
    case TRY :                   str = "TRY"; break;
    case VARFLOAT :              str = "VARFLOAT"; break;
    case VARINT :                str = "VARINT"; break;
    case WHILE :                 str = "WHILE"; break;
    default :                    str = "UNKNOWN"; break;
  }
  return str;

}
#endif

